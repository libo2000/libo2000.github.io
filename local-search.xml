<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GMS之Launcher中去除默认Search或替换为Chrome Search</title>
    <link href="/2023/09/25/GMS%E4%B9%8BLauncher%E4%B8%AD%E5%8E%BB%E9%99%A4%E9%BB%98%E8%AE%A4Search%E6%88%96%E6%9B%BF%E6%8D%A2%E4%B8%BAChrome%20Search/"/>
    <url>/2023/09/25/GMS%E4%B9%8BLauncher%E4%B8%AD%E5%8E%BB%E9%99%A4%E9%BB%98%E8%AE%A4Search%E6%88%96%E6%9B%BF%E6%8D%A2%E4%B8%BAChrome%20Search/</url>
    
    <content type="html"><![CDATA[<h1 id="GMS之Launcher中去除默认Search或替换为Chrome-Search"><a href="#GMS之Launcher中去除默认Search或替换为Chrome-Search" class="headerlink" title="GMS之Launcher中去除默认Search或替换为Chrome Search"></a>GMS之Launcher中去除默认Search或替换为Chrome Search</h1><h2 id="将Launcher中搜索框去除"><a href="#将Launcher中搜索框去除" class="headerlink" title="将Launcher中搜索框去除"></a>将Launcher中搜索框去除</h2><p>将FeatureFlags.java文件中的QSB_ON_FIRST_SCREEN变量修改为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">\system\vendor\mediatek\proprietary\packages\apps\Launcher3\src\com\android\launcher3\config\FeatureFlags.java<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Defines a set of flags used to control various launcher behaviors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;All the flags should be defined here with appropriate default values.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeatureFlags</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Enable moving the QSB on the 0th screen of the workspace. This is not a configuration feature</span><br><span class="hljs-comment">     * and should be modified at a project level.</span><br><span class="hljs-comment">     */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">QSB_ON_FIRST_SCREEN</span> <span class="hljs-operator">=</span> BuildConfig.QSB_ON_FIRST_SCREEN;<br>   <br></code></pre></td></tr></table></figure><p>在源码中是通过launcher3中的BuildConfig.java去获取变量（默认true），那么在这里将变量修改为false即可（自行添加系统变量进行灵活控制也行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">\system\vendor\mediatek\proprietary\packages\apps\Launcher3\src_build_config\com\android\launcher3\BuildConfig.java<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BuildConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">APPLICATION_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.android.launcher3&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">DEBUG</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Flag to state if the QSB is on the first screen and placed on the top,</span><br><span class="hljs-comment">     * this can be overwritten in other launchers with a different value, if needed.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">QSB_ON_FIRST_SCREEN</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最近在Android 13平台修改以上代码后，在Launcher中并不生效，后来发现，如果SearchLauncherQuickStep存在会默认使用，那么我们的修改就不会生效，因此在这里也需要把它注释掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">system\vendor\partner_gms\products\gms.mk<br><br>GMS_PRODUCT_PACKAGES += \<br>    #SearchLauncherQuickStep<br></code></pre></td></tr></table></figure><h2 id="如何将默认的Search替换为其他的？-比如项目是出货RU（俄罗斯）的，根据要求需要将Launcher中的默认Google-Search-要更换为-Chrome-Search"><a href="#如何将默认的Search替换为其他的？-比如项目是出货RU（俄罗斯）的，根据要求需要将Launcher中的默认Google-Search-要更换为-Chrome-Search" class="headerlink" title="如何将默认的Search替换为其他的？ 比如项目是出货RU（俄罗斯）的，根据要求需要将Launcher中的默认Google Search 要更换为 Chrome Search"></a>如何将默认的Search替换为其他的？ 比如项目是出货RU（俄罗斯）的，根据要求需要将Launcher中的默认Google Search 要更换为 Chrome Search</h2><p>String providerPkg 为 Chrome 浏览器应用的包名</p><p>String className 为 launcher中Chrome Search组件的名字</p><p>Boolean ruSupport 为了判断当前版本是否为RU版本（一般只有RU地区才需要这样替换Search）</p><p>在getSearchWidgetProviderInfo方法中进行修改判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">system\vendor\mediatek\proprietary\packages\apps\Launcher3\src\com\android\launcher3\qsb\QsbContainerView.java<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * returns it&#x27;s AppWidgetProviderInfo using package name from getSearchWidgetPackageName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> AppWidgetProviderInfo</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AppWidgetProviderInfo <span class="hljs-title function_">getSearchWidgetProviderInfo</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Context context)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">providerPkg</span> <span class="hljs-operator">=</span> getSearchWidgetPackageName(context);<br>        <span class="hljs-keyword">if</span> (providerPkg == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//add ---------------------------------------------------------</span><br>        <span class="hljs-type">String</span>  <span class="hljs-variable">providerPkg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.android.chrome&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org.chromium.chrome.browser.searchwidget.SearchWidgetProvider&quot;</span>;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">ruSupport</span> <span class="hljs-operator">=</span> SystemProperties.get(<span class="hljs-string">&quot;ro.product.name&quot;</span>);<br>        <span class="hljs-comment">//end ---------------------------------------------------------</span><br>        <br><br>        <span class="hljs-type">AppWidgetProviderInfo</span> <span class="hljs-variable">defaultWidgetForSearchPackage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">AppWidgetManager</span> <span class="hljs-variable">appWidgetManager</span> <span class="hljs-operator">=</span> AppWidgetManager.getInstance(context);<br>        <span class="hljs-keyword">for</span> (AppWidgetProviderInfo info :<br>                appWidgetManager.getInstalledProvidersForPackage(providerPkg, <span class="hljs-literal">null</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (info.provider.getPackageName().equals(providerPkg) &amp;&amp; info.configure == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> ((info.widgetCategory<br>                        &amp; AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX) != <span class="hljs-number">0</span>) &#123;<br>                             <span class="hljs-comment">//add ---------------------------------------------------------</span><br>                            <span class="hljs-keyword">if</span>(ruSupport)&#123;<br>                                <span class="hljs-keyword">if</span>(className.equals(info.provider.getClassName()))&#123;<br>                                    <span class="hljs-keyword">return</span> info;<br>                                &#125;<br>                            &#125;<span class="hljs-keyword">else</span>&#123;<br>                                <span class="hljs-keyword">return</span> info;<br>                            &#125;<br>                            <span class="hljs-comment">//end ---------------------------------------------------------</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (defaultWidgetForSearchPackage == <span class="hljs-literal">null</span>) &#123;<br>                    defaultWidgetForSearchPackage = info;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> defaultWidgetForSearchPackage;<br>    &#125;<br></code></pre></td></tr></table></figure><center>人的精神思想方面的优势越大，给无聊留下的空间就越小。</center>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GMS</tag>
      
      <tag>Launcher</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【PendingIntent FLAG_IMMUTABLE 和 FLAG_MUTABLE的区别】</title>
    <link href="/2023/09/20/%E3%80%90PendingIntent%20FLAG_IMMUTABLE%20%E5%92%8C%20FLAG_MUTABLE%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%91/"/>
    <url>/2023/09/20/%E3%80%90PendingIntent%20FLAG_IMMUTABLE%20%E5%92%8C%20FLAG_MUTABLE%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="【PendingIntent-FLAG-IMMUTABLE-和-FLAG-MUTABLE的区别】"><a href="#【PendingIntent-FLAG-IMMUTABLE-和-FLAG-MUTABLE的区别】" class="headerlink" title="【PendingIntent FLAG_IMMUTABLE 和 FLAG_MUTABLE的区别】"></a>【PendingIntent FLAG_IMMUTABLE 和 FLAG_MUTABLE的区别】</h1><p>最近在获通过NfcAdapter.aenableForegroundDispatch发现不能正确调度使用android.nfc，后来发现是Adnroid12以后PendingIntent的新特性导致。</p><p>在代码中使用的是PendingIntent.FLAG_IMMUTABLE，此标志创建的PendingIntent是不可变的，而FLAG_MUTABLE是可变的。<br>将FLAG_IMMUTABLE 替换为 FLAG_MUTABLE即可，在Android12以后需要主要PendingIntent的Flag细节和模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> NfcAdapter mNfcAdapter;<br><span class="hljs-keyword">private</span> PendingIntent mPendingIntent;   <br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initNfc</span><span class="hljs-params">()</span> &#123;<br>    mNfcAdapter = NfcAdapter.getDefaultAdapter(activity);<br>    mPendingIntent = PendingIntent.getActivity(activity, <span class="hljs-number">0</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(activity, activity.getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), PendingIntent.FLAG_MUTABLE);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nfcEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (mNfcAdapter != <span class="hljs-literal">null</span> &amp;&amp; mNfcAdapter.isEnabled()) &#123;<br>        mNfcAdapter.enableForegroundDispatch(activity, mPendingIntent, intentFilters, techLists);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是这两种Flag的区别：<br>Android官方文档：<a href="https://developer.android.com/reference/android/app/PendingIntent">https://developer.android.com/reference/android/app/PendingIntent</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FLAG_MUTABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">25</span>;<br></code></pre></td></tr></table></figure><p>标志，表示创建的PendingIntent应该是可变的。该标志不能与FLAG_IMMUTABLE组合使用。<br>直到Build.VERSION_CODES。R中，默认情况下PendingIntents是可变的，除非设置了FLAG_IMMUTABLE。从Build.VERSION_CODES开始。S，它需要在创建时显式指定PendingIntents的可变性(@link #FLAG_IMMUTABLE}或FLAG_MUTABLE。强烈建议在创建PendingIntent时使用FLAG_IMMUTABLE。FLAG_MUTABLE应该只在某些功能依赖于修改底层意图时使用，例如，任何PendingIntent需要与内联回复或气泡一起使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FLAG_IMMUTABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">26</span>;<br></code></pre></td></tr></table></figure><p>标志，表示创建的PendingIntent应该是不可变的。这意味着传递给send方法用来填充未填充属性的额外intent参数将被忽略。<br>FLAG_IMMUTABLE只限制了send()的调用者改变send()发送的意图语义的能力。PendingIntent的创建者总是可以通过FLAG_UPDATE_CURRENT来更新PendingIntent本身。</p><center>每个人都在自己的生命中频繁地抛弃着自己的过去</center>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 解决Camera在预览界面成像角度问题</title>
    <link href="/2023/09/16/Android%20%E8%A7%A3%E5%86%B3Camera%E5%9C%A8%E9%A2%84%E8%A7%88%E7%95%8C%E9%9D%A2%E6%88%90%E5%83%8F%E8%A7%92%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <url>/2023/09/16/Android%20%E8%A7%A3%E5%86%B3Camera%E5%9C%A8%E9%A2%84%E8%A7%88%E7%95%8C%E9%9D%A2%E6%88%90%E5%83%8F%E8%A7%92%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-解决Camera在预览界面成像角度问题"><a href="#Android-解决Camera在预览界面成像角度问题" class="headerlink" title="Android 解决Camera在预览界面成像角度问题"></a>Android 解决Camera在预览界面成像角度问题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">setCameraDisplayOrientation(mContext, CameraId, mCamera);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCameraDisplayOrientation</span><span class="hljs-params">(Context context,</span><br><span class="hljs-params">                                               <span class="hljs-type">int</span> cameraId, android.hardware.Camera camera)</span> &#123;<br>    android.hardware.Camera.<span class="hljs-type">CameraInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">android</span>.hardware.Camera.CameraInfo();<br>    android.hardware.Camera.getCameraInfo(cameraId, info);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rotation</span> <span class="hljs-operator">=</span> ((Activity) context).getWindowManager().getDefaultDisplay()<br>            .getRotation();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">degrees</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">switch</span> (rotation) &#123;<br>        <span class="hljs-keyword">case</span> Surface.ROTATION_0:<br>            degrees = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> Surface.ROTATION_90:<br>            degrees = <span class="hljs-number">90</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> Surface.ROTATION_180:<br>            degrees = <span class="hljs-number">180</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> Surface.ROTATION_270:<br>            degrees = <span class="hljs-number">270</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> result;<br>    <span class="hljs-keyword">if</span> (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;<br>        result = (info.orientation + degrees) % <span class="hljs-number">360</span>;<br>        result = (<span class="hljs-number">360</span> - result) % <span class="hljs-number">360</span>;  <span class="hljs-comment">// compensate the mirror</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// back-facing</span><br>        result = (info.orientation - degrees + <span class="hljs-number">360</span>) % <span class="hljs-number">360</span>;<br>    &#125;<br>    camera.setDisplayOrientation(result);<br>&#125;<br></code></pre></td></tr></table></figure><center>只有当不幸真的到来时，我们才会怀念和渴望那些逝去的美好时光。</center>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Camera</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GMS 测试项Fail解决</title>
    <link href="/2023/08/18/GMS%20%E6%B5%8B%E8%AF%95%E9%A1%B9Fail%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/08/18/GMS%20%E6%B5%8B%E8%AF%95%E9%A1%B9Fail%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="GMS-测试项Fail解决"><a href="#GMS-测试项Fail解决" class="headerlink" title="GMS 测试项Fail解决"></a>GMS 测试项Fail解决</h1><h2 id="1-CTS-Fail-项解决"><a href="#1-CTS-Fail-项解决" class="headerlink" title="1. CTS Fail 项解决"></a>1. CTS Fail 项解决</h2><table><tr>  <th colspan="2">CtsWindowManagerDeviceTestCases </th></tr><tr>  <td>Test </td>  <td>Details </td></tr><tr>  <td>android.server.wm.MultiDisplaySystemDecorationTests#testLaunchSecondaryHomeActivityOnDisplayWithDecorations</td>  <td>java.lang.AssertionError: Activity launched on secondary display must be resumed</td></tr></table>解决方案（android 13）：/system/frameworks/base/core/res/res/values/config.xml，将config_useSystemProvidedLauncherForSecondary修改为true<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- Force secondary home launcher specified in config_secondaryHomePackage always. If <span class="hljs-built_in">this</span> is<br>     not set, secondary home launcher can be replaced by user. --&gt;<br>&lt;<span class="hljs-type">bool</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;config_useSystemProvidedLauncherForSecondary&quot;</span>&gt;<span class="hljs-literal">true</span>&lt;/bool&gt;<br></code></pre></td></tr></table></figure><p>建议根据项目情况在system&#x2F;device&#x2F;mediatek&#x2F;system&#x2F;common&#x2F;overlay&#x2F;中做Overlay，并将路径加在device.mk文件中</p><h2 id="2-GTS-Fail-项解决"><a href="#2-GTS-Fail-项解决" class="headerlink" title="2. GTS Fail 项解决"></a>2. GTS Fail 项解决</h2><table><tr>  <th colspan="2">GtsSetupWizardHostTestCases</th></tr><tr>  <td>Test </td>  <td>Details </td></tr><tr>  <td>com.google.android.gts.setupwizard.SetupWizardZeroTouchTest#testZeroTouch_zeroTouchWrapperLaunched</td>  <td>java.lang.AssertionError: on-device tests failed:</td></tr></table>解决方案（android 13）：需要在开机向导连接wifi，登录Google账号多跑两次可以PASS<center>不快乐是一片需要英雄的大陆。</center>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio编译JNI项目，Cmake出错：Detecting C compiler ABI info - failed</title>
    <link href="/2023/08/16/Android%20Studio%E7%BC%96%E8%AF%91JNI%E9%A1%B9%E7%9B%AE(Cmake%E5%87%BA%E9%94%99)/"/>
    <url>/2023/08/16/Android%20Studio%E7%BC%96%E8%AF%91JNI%E9%A1%B9%E7%9B%AE(Cmake%E5%87%BA%E9%94%99)/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio编译JNI项目，Cmake出错：Detecting-C-compiler-ABI-info-failed"><a href="#Android-Studio编译JNI项目，Cmake出错：Detecting-C-compiler-ABI-info-failed" class="headerlink" title="Android Studio编译JNI项目，Cmake出错：Detecting C compiler ABI info - failed"></a>Android Studio编译JNI项目，Cmake出错：Detecting C compiler ABI info - failed</h1><p>   cmake的定义是什么 ？—–⾼级编译配置⼯具cmake就是将多个cpp、hpp文件组合构建为一个大工程的语言。他能够输出各种各样的makefile或者project文件，所有操作都是通过编译CMakeLists.txt来完成。</p><h2 id="在使用Android-Stodio编译JNI项目时出现Cmake错误，报错如下："><a href="#在使用Android-Stodio编译JNI项目时出现Cmake错误，报错如下：" class="headerlink" title="在使用Android Stodio编译JNI项目时出现Cmake错误，报错如下："></a>在使用Android Stodio编译JNI项目时出现Cmake错误，报错如下：</h2><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Execution failed <span class="hljs-keyword">for</span> task <span class="hljs-string">&#x27;:app:configureCMakeDebug[arm64-v8a]&#x27;</span>.<br>&gt; [CXX1429] <span class="hljs-built_in">error</span> <span class="hljs-keyword">when</span> building with cmake <span class="hljs-keyword">using</span> <span class="hljs-name">C</span>:\Users\Dell\AndroidStudioProjects\MyApplication2\app\src\main\cpp\CMakeLists.<span class="hljs-name">txt</span>: <span class="hljs-comment">-- Android: Targeting API &#x27;31&#x27; with architecture &#x27;arm64&#x27;, ABI &#x27;arm64-v8a&#x27;, and processor &#x27;aarch64&#x27;</span><br>  <span class="hljs-comment">-- Android: Selected unified Clang toolchain</span><br>  <span class="hljs-comment">-- The C compiler identification is unknown</span><br>  <span class="hljs-comment">-- The CXX compiler identification is Clang 12.0.8</span><br>  <span class="hljs-comment">-- Detecting C compiler ABI info</span><br>  <span class="hljs-comment">-- Detecting C compiler ABI info - failed</span><br>  <span class="hljs-comment">-- Check for working C compiler: D:/Sdk/ndk/23.1.7779620/toolchains/llvm/prebuilt/windows-x86_64/bin/clang.exe</span><br>  <span class="hljs-comment">-- Check for working C compiler: D:/Sdk/ndk/23.1.7779620/toolchains/llvm/prebuilt/windows-x86_64/bin/clang.exe - broken</span><br>  <span class="hljs-comment">-- Configuring incomplete, errors occurred!</span><br></code></pre></td></tr></table></figure><p><img src="/article_img/AndroidStudio%E7%BC%96%E8%AF%91JNI%E9%A1%B9%E7%9B%AE(Cmake%E5%87%BA%E9%94%99)/1.png"></p><h2 id="在cpp-CMakeLists-txt文件最上方添加后解决问题"><a href="#在cpp-CMakeLists-txt文件最上方添加后解决问题" class="headerlink" title="在cpp\CMakeLists.txt文件最上方添加后解决问题"></a>在cpp\CMakeLists.txt文件最上方添加后解决问题</h2><p>会在编译时跳过编译器检查，就不会再出现异常了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">set(CMAKE_C_COMPILER_WORKS TRUE)<br>set(CMAKE_CXX_COMPILER_WORKS TRUE)<br></code></pre></td></tr></table></figure><center>弱小不是逃避的借口，应是竭尽全力的理由。</center>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JNI</tag>
      
      <tag>Cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot之统一返回格式与统一异常处理</title>
    <link href="/2021/10/26/SpringBoot%E4%B9%8B%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F%E4%B8%8E%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2021/10/26/SpringBoot%E4%B9%8B%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F%E4%B8%8E%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot之统一返回格式与统一异常处理"><a href="#SpringBoot之统一返回格式与统一异常处理" class="headerlink" title="SpringBoot之统一返回格式与统一异常处理"></a>SpringBoot之统一返回格式与统一异常处理</h1><p>在任何接口返回数据时，正确的返回格式：<br>code：状态码 data：数据 message：接口响应信息，一般接口需要的就是这三个数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果在每一个接口都这样写一个Map返回，或者一个工具类返回，但是这样代码的重复量太复杂。<br>统一返回的好处：接口返回的东西直接返回，接口的中不用管状态码和响应信息</p><h2 id="导入Jar包"><a href="#导入Jar包" class="headerlink" title="导入Jar包"></a>导入Jar包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--Lombok--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>    &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.18</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;!--JSON--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.2</span><span class="hljs-number">.9</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ul><li><strong>统一返回结果工具类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 阿波</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 统一返回结果工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021-10-25 10:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ResultUtil</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultUtil</span><span class="hljs-params">(ResultCode resultCode, Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = resultCode.code();<br>        <span class="hljs-built_in">this</span>.message = resultCode.message();<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setResultCode</span><span class="hljs-params">(ResultCode resultCode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = resultCode.code();<br>        <span class="hljs-built_in">this</span>.message = resultCode.message();<br>    &#125;<br><br>    <span class="hljs-comment">// 返回成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultUtil <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ResultUtil</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultUtil</span>();<br>        result.setResultCode(ResultCode.SUCCESS);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultUtil <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-type">ResultUtil</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultUtil</span>();<br>        result.setResultCode(ResultCode.SUCCESS);<br>        result.setData(data);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultUtil <span class="hljs-title function_">fail</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        <span class="hljs-type">ResultUtil</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultUtil</span>();<br>        result.setCode(code);<br>        result.setMessage(message);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultUtil <span class="hljs-title function_">fail</span><span class="hljs-params">(ResultCode resultCode)</span> &#123;<br>        <span class="hljs-type">ResultUtil</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultUtil</span>();<br>        result.setResultCode(resultCode);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>状态枚举类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 阿波</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 返回状态码枚举</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Date</span> 2021-10-25 11:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ResultCode</span> &#123;<br><br><span class="hljs-comment">/* 成功状态码 */</span><br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;成功&quot;</span>),<br>    <span class="hljs-comment">/* 错误状态码 */</span><br>    PARAM_IS_INVALID(<span class="hljs-number">201</span>, <span class="hljs-string">&quot;参数无效&quot;</span>),<br>    PARAM_IS_BLANK(<span class="hljs-number">202</span>, <span class="hljs-string">&quot;参数为空&quot;</span>),<br>    PARAM_TYPE_BIND_ERROR(<span class="hljs-number">401</span>, <span class="hljs-string">&quot;参数类型错误&quot;</span>),<br>    PARAM_NOT_COMPLETE(<span class="hljs-number">402</span>, <span class="hljs-string">&quot;参数缺失&quot;</span>),<br>    USER_NOTLOGGED_IN(<span class="hljs-number">501</span>, <span class="hljs-string">&quot;用户未登录&quot;</span>),<br>    USER_LOGIN_ERROR(<span class="hljs-number">502</span>, <span class="hljs-string">&quot;账号不存在或密码错误&quot;</span>),<br>    SYSTEM_ERROR(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;系统异常，请稍后重试&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ResultCode</span><span class="hljs-params">(Integer code, String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">code</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置统一结果返回"><a href="#配置统一结果返回" class="headerlink" title="配置统一结果返回"></a>配置统一结果返回</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 阿波</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 统一返回结果处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021-10-25 10:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//只对com.demo.controller包下的接口生效</span><br><span class="hljs-meta">@RestControllerAdvice(basePackages = &#123;&quot;com.demo.controller&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultResponseAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResponseBodyAdvice</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(MethodParameter methodParameter, Class aClass)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">beforeBodyWrite</span><span class="hljs-params">(Object returnValue, MethodParameter returnType, MediaType selectedContentType, Class selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;<br>        ResultUtil result;<br>        <span class="hljs-comment">//获取返回值类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">returnClassType</span> <span class="hljs-operator">=</span> returnType.getParameterType().getSimpleName();<br><br>        <span class="hljs-comment">//如果返回值类型为void，则默认返回成功</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;void&quot;</span>.equals(returnClassType)) &#123;<br>            result = ResultUtil.success();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;Result&quot;</span>.equals(returnClassType)) &#123;<br>            result = (ResultUtil) returnValue;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;String&quot;</span>.equals(returnClassType)) &#123;<br>            <span class="hljs-comment">//json的转换会出问题</span><br>            result = ResultUtil.success(returnValue);<br>            <span class="hljs-keyword">return</span> JSON.toJSONString(result);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (Objects.isNull(returnValue)) &#123;<br>                result = ResultUtil.success();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result = ResultUtil.success(returnValue);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//一定要转换为String，否则会报错</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>排除NULL字段：在返回时字段为null则不返回 application.yaml文件中</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  jackson:<br>    <span class="hljs-keyword">default</span>-property-inclusion: NON_NULL<br></code></pre></td></tr></table></figure><h2 id="配置全局异常处理"><a href="#配置全局异常处理" class="headerlink" title="配置全局异常处理"></a>配置全局异常处理</h2><p>@ExceptionHandler 的参数可以是数组，可以有多个异常类。<br>注：处理异常是会判断异常的继承关系。<br>比如是 Exception.class 那么就会处理全部的异常，可以把全部异常统一在一个方法处理，也可以分开单独处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 阿波</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 统一异常处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021-10-26 10:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//只对com.demo.controller包下的接口生效</span><br><span class="hljs-meta">@RestControllerAdvice(basePackages = &#123;&quot;com.demo.controller&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(&#123;ArithmeticException.class&#125;)</span><br>    <span class="hljs-keyword">private</span> ResultUtil <span class="hljs-title function_">handlerNullPointException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ResultUtil.fail(<span class="hljs-number">500</span>, <span class="hljs-string">&quot; / by zero&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h2><ul><li><strong>定义测试接口</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 阿波</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> Controller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021-10-15 9:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(path = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(path = &quot;/testError&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">/*产生一个 / by zero 异常*/</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span> / <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>统一返回的封装</strong></li></ul><p><img src="/article_img/SpringBoot%E4%B9%8B%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F%E4%B8%8E%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/1.png"></p><ul><li><strong>异常的处理</strong></li></ul><p><img src="/article_img/SpringBoot%E4%B9%8B%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F%E4%B8%8E%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/2.png"></p><center>自责要短暂，不过要长久铭记。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基本知识与命令</title>
    <link href="/2021/07/11/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/07/11/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis基本知识与命令"><a href="#Redis基本知识与命令" class="headerlink" title="Redis基本知识与命令"></a>Redis基本知识与命令</h1><h2 id="Redis基本知识说明"><a href="#Redis基本知识说明" class="headerlink" title="Redis基本知识说明"></a>Redis基本知识说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Redis有<span class="hljs-number">16</span>个数据库，默认使用第<span class="hljs-number">0</span>个,可以在redis.conf配置文件中看到 databases <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/1.png"></p><h2 id="Redis基本命令"><a href="#Redis基本命令" class="headerlink" title="Redis基本命令"></a>Redis基本命令</h2><p>Redis中文官网：<a href="http://www.redis.cn/">http://www.redis.cn</a>如果遇到不懂的命令可以直接上官网查询<br><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/2.png"></p><ul><li><strong>select进行切换Redis数据库</strong></li><li><strong>DBSIZE命令查看数据库大小(当前数据库的条数)</strong></li></ul><p><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/3.png"></p><ul><li><strong>keys *查看数据库所有的Key</strong></li></ul><p><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/4.png"></p><ul><li><strong>flushdb 清空当前数据库key(证明redis可以分开操作不同数据库)</strong></li><li><strong>flushall 清空所有数据库key</strong></li></ul><p><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/5.png"></p><ul><li><strong>exists key 判断当前key是否存在</strong></li></ul><p><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/6.png"></p><ul><li><strong>type key判断key的类型</strong></li></ul><p><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/7.png"></p><ul><li><strong>move key redis数据库下标：移动key到另外的数据库</strong></li></ul><p><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/8.png"></p><ul><li><strong>expire key 60设置key的过期时间(单位：秒)</strong></li><li><strong>ttl key查看key的过期时间</strong></li><li><strong>返回剩余时间，如果key不存在或者已过期，返回 -2，如果key存在并且没有设置过期时间（永久有效），返回 -1</strong></li></ul><p><img src="/article_img/Redis%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%8E%E5%91%BD%E4%BB%A4/9.png"></p><center>莫对他人妄行揣测，是人能给予自己的最高尊严。</center>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统下安装Redis</title>
    <link href="/2021/07/09/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/"/>
    <url>/2021/07/09/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux系统下安装Redis"><a href="#Linux系统下安装Redis" class="headerlink" title="Linux系统下安装Redis"></a>Linux系统下安装Redis</h1><h2 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h2><ul><li><strong>下载地址：</strong><a href="https://redis.io/">https://redis.io</a><br> <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/1.png"></li></ul><h2 id="上传至Linux服务器"><a href="#上传至Linux服务器" class="headerlink" title="上传至Linux服务器"></a>上传至Linux服务器</h2><ul><li><strong>可借助任何一款ftp软件上传到Linux服务器，例如：Xftp(目录可自定义)</strong><br> <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/2.png"></li></ul><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><ul><li><strong>解压安装包</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">tar -zxvf redis-<span class="hljs-number">6.2</span><span class="hljs-number">.4</span>.tar.gz<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/3.png"></p><ul><li><strong>进入解压后的目录，可以看到redis.conf配置文件</strong></li></ul><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/4.png"></p><h2 id="基本环境安装"><a href="#基本环境安装" class="headerlink" title="基本环境安装"></a>基本环境安装</h2><ul><li><strong>安装gcc</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">yum install gcc-c++<br>gcc -v<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/5.png"></p><ul><li><strong>执行make命令，会帮我们把所有需要的文件给配置上(所需时间稍微长一点)</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">make完成之后会多出一个src目录<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/6.png"></p><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/7.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">make install 确保make命令成功<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/8.png"></p><h2 id="运行Redis"><a href="#运行Redis" class="headerlink" title="运行Redis"></a>运行Redis</h2><ul><li><strong>Redis的默认安装目录</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cd /usr/local/bin<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/9.png"></p><ul><li><strong>将Redis配置文件，复制一份到当前 &#x2F;usr&#x2F;local&#x2F;bin目录下</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">创建目录(名称可自定义)\<br>mkdir myRedisConfig<br>复制redis.conf文件<br>cp /usr/libo/environment/redis-<span class="hljs-number">6.2</span><span class="hljs-number">.4</span>/redis.conf myRedisConfig<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/10.png"></p><ul><li><strong>启动Redis</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Redis默认并不是后台启动的，需要先修改redis.conf配置文件<br>打开redis.conf文件 <br>vim redis.conf<br>按下i键进入insert模式进行修改<br>默认daemonize no 改为 yes<br>按下esc 输入 :wq 保存并退出<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/11.png"><br><font color=red>执行redis-server后应该是有信息打印的，我在测试时候并没有打印信息。但是redis的6379服务的确已经启动</font><br>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/12.png"></p><ul><li><strong>使用redis-cli 连接并测试Redis</strong></li></ul><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/13.png"></p><ul><li><strong>新建一个Linux服务器连接查看Redis进程是否开启</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">使用命令ps -ef|grep <span class="hljs-number">6379</span><br>可以看到redis-server 和 redis-cli 两个进程都是使用的<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/14.png"></p><ul><li><strong>如何关闭Redis服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">shutdown 关闭Redis<br>exit退出连接<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/15.png"></p><ul><li><strong>再次查询Redis进程是否存在</strong></li></ul><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/16.png"></p><h2 id="redis-benchmark性能测试"><a href="#redis-benchmark性能测试" class="headerlink" title="redis-benchmark性能测试"></a>redis-benchmark性能测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">redis-benchmark 是官方自带的性能测试工具<br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/17.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">测试：<span class="hljs-number">100</span>个并发连接 <span class="hljs-number">100000</span>个请求<br>redis-benchmark -h localhost -p <span class="hljs-number">6379</span> -c <span class="hljs-number">100</span> -n <span class="hljs-number">100000</span><br></code></pre></td></tr></table></figure><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/18.png"></p><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Redis/19.png"></p><ul><li><strong>通过redis-benchmark就可以感受到Redis的处理请求到底有多快了</strong></li></ul><center>不管你说再多的慌，只有自己的内心，是无法欺骗的啊。</center>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统下安装MySQL 8.0.x</title>
    <link href="/2021/07/08/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL%208.0.x/"/>
    <url>/2021/07/08/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL%208.0.x/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux系统下安装MySQL-8-0-x"><a href="#Linux系统下安装MySQL-8-0-x" class="headerlink" title="Linux系统下安装MySQL 8.0.x"></a>Linux系统下安装MySQL 8.0.x</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Linux系统版本：CentOS <span class="hljs-number">8.3</span> <span class="hljs-number">64</span>位<br>MySQL版本：mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>-linux-x86_64<br></code></pre></td></tr></table></figure><h2 id="1-下载MySQL安装包"><a href="#1-下载MySQL安装包" class="headerlink" title="1.下载MySQL安装包"></a>1.下载MySQL安装包</h2><ul><li><strong>下载地址：</strong> <a href="https://dev.mysql.com/downloads/mysql">https://dev.mysql.com/downloads/mysql</a></li></ul><p>  <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/1.png"></p><h2 id="2-将MySQL安装包上传到Linux服务器"><a href="#2-将MySQL安装包上传到Linux服务器" class="headerlink" title="2.将MySQL安装包上传到Linux服务器"></a>2.将MySQL安装包上传到Linux服务器</h2><ul><li><strong>使用 Xftp 上传文件 (其他ftp软件皆可) 这里存放路径是我自定义的(可直接上传到自定义的目录下)</strong></li><li><strong>注：MySQL默认的安装路径是 &#x2F;usr&#x2F;local&#x2F;mysql (路径发生改变，后续配置可能有一丝影响)</strong><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/2.png"></li></ul><h2 id="3-解压MySQL安装包"><a href="#3-解压MySQL安装包" class="headerlink" title="3.解压MySQL安装包"></a>3.解压MySQL安装包</h2><ul><li><strong>进入MySQL安装包存放路径</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">cd 路径cd<br>例： /usr/libo/environment<br>ll 查看路径下所有目录<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/3.png"></p><ul><li><strong>将.xz文件解压为.tar</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">xz -d .xz文件名称<br>例：xz -d mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>-linux-glibc2<span class="hljs-number">.12</span>-x86_64.tar.xz<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/4.png"></p><ul><li><strong>解压MySQL .tar 安装包</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">tar -xvf .tar文件名称<br>例：tar -xvf mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>-linux-glibc2<span class="hljs-number">.12</span>-x86_64.tar<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/5.png"></p><ul><li><strong>解压完成</strong></li></ul><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/6.png"></p><ul><li><strong>修改MySQL文件名称 (名称过长，建议修改)</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mv 原目录名称 新目录名称<br>例：mv mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>-linux-glibc2<span class="hljs-number">.12</span>-x86_64 mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span><br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/7.png"></p><h2 id="4-创建MySQL数据存放目录并授权"><a href="#4-创建MySQL数据存放目录并授权" class="headerlink" title="4.创建MySQL数据存放目录并授权"></a>4.创建MySQL数据存放目录并授权</h2><ul><li><strong>进入MySQL目录后,使用命令创建MySQL数据目录，名称可自取，比如：data</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mkdir 目录名<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/8.png"></p><ul><li><strong>给MySQL目录授权(包括MySQL数据存放目录)</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">chmod能改变权限，-R是目录下所有文件，<span class="hljs-number">777</span>就是高权限（读、写、执行）<br>chmod -R <span class="hljs-number">777</span> * 意思就是将当前目录下所有文件都给予<span class="hljs-number">777</span>权限<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/9.png"></p><h2 id="5-创建MySQL组：创建MySQL用户并设置密码"><a href="#5-创建MySQL组：创建MySQL用户并设置密码" class="headerlink" title="5.创建MySQL组：创建MySQL用户并设置密码"></a>5.创建MySQL组：创建MySQL用户并设置密码</h2><ul><li><strong>添加用户，设置密码</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">添加用户：useradd 用户名<br>设置密码：passwd 用户名<br></code></pre></td></tr></table></figure><ul><li><strong>将mysql目录的权限授给mysql用户和mysql组</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">chown -R mysql:mysql /usr/libo/environment/mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span><br></code></pre></td></tr></table></figure><ul><li><strong>注：在设置密码时，少于8位会出现提示，再次填写一遍即可，不影响</strong></li></ul><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/10.png"></p><h2 id="6-在系统根目录的-etc创建MySQL的安装初始化配置文件my-cnf"><a href="#6-在系统根目录的-etc创建MySQL的安装初始化配置文件my-cnf" class="headerlink" title="6.在系统根目录的&#x2F;etc创建MySQL的安装初始化配置文件my.cnf"></a>6.在系统根目录的&#x2F;etc创建MySQL的安装初始化配置文件my.cnf</h2><ul><li><strong>内容如下：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">[mysqld]<br># 设置<span class="hljs-number">3306</span>端口<br>port=<span class="hljs-number">3306</span><br># 设置mysql的安装目录<br>basedir=/usr/libo/environment/mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span><br># 设置mysql数据库的数据的存放目录<br>datadir=/usr/libo/environment/mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>/data<br># 允许最大连接数<br>max_connections=<span class="hljs-number">10000</span><br># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统<br>max_connect_errors=<span class="hljs-number">10</span><br># 服务端使用的字符集默认为UTF8<br>character-set-server=utf8<br># 创建新表时将使用的默认存储引擎<br><span class="hljs-keyword">default</span>-storage-engine=INNODB<br># 默认使用“mysql_native_password”插件认证<br>default_authentication_plugin=mysql_native_password<br>[mysql]<br># 设置mysql客户端默认字符集<br><span class="hljs-keyword">default</span>-character-set=utf8<br>[client]<br># 设置mysql客户端连接服务端时默认使用的端口<br>port=<span class="hljs-number">3306</span><br><span class="hljs-keyword">default</span>-character-set=utf8<br></code></pre></td></tr></table></figure><ul><li><strong>使用命令或者直接在ftp中修改my.cnf文件</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">vi /etc/my.cnf<br>按下i健进入 insert模式进行修改，完成后按下esc键再后输入 :wq 保存并退出(英文模式下,注意wq前面还有冒号:)<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/11.png"></p><h2 id="7-初始化MySQL"><a href="#7-初始化MySQL" class="headerlink" title="7.初始化MySQL"></a>7.初始化MySQL</h2><ul><li><strong>进入MySQL的bin目录下</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cd /usr/libo/environment/mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>/bin<br></code></pre></td></tr></table></figure><ul><li><strong>执行命令，记住生产的随机密码(后面修改密码时会用到)</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">./mysqld --initialize --console<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/12.png"></p><h2 id="8-启动MySQL服务"><a href="#8-启动MySQL服务" class="headerlink" title="8.启动MySQL服务"></a>8.启动MySQL服务</h2><ul><li><strong>运行MySQL服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cd /usr/libo/environment/mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>/support-files<br>./mysql.server start<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/13.png"></p><ul><li><strong>启动时可能出现的问题和解决方式：</strong></li></ul><p> <strong>1. 启动MySQL服务时报 updating PID file 错误</strong></font ><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/14.png"></p><p><strong>解决：在安装目录下重新授权，然后再启动MySQL</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">chmod -R <span class="hljs-number">777</span> /usr/libo/environment/mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span><br>chmod -R <span class="hljs-number">777</span> /usr/libo/environment/mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>/data<br></code></pre></td></tr></table></figure><p><strong>2. 启动MySQL服务时报 my_print_defaults：未找到命令错误</strong></font ><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/15.png"><br>   <strong>解决：检查并修改 &#x2F;etc&#x2F;my.cnf 中的 MySQL的安装目录</strong><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/16.png"><br>   <strong>3. 如果确认MySQL安装路径没有问题，很有可能是没有读取到我们的my.cnf配置文件</strong></font ></p><p>在mysql.server文件中可以看到，MySQL默认路径为&#x2F;usr&#x2F;local&#x2F;mysql，因为我们是自定义路径。所以需要建立my.cnf文件的连接<br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/17.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">将mysql目录下的bin/my_print_defaults链接到/usr/bin目录下。<br><br>cd /usr/bin<br>sudo ln -s /usr/libo/environment/mysql-<span class="hljs-number">8.0</span><span class="hljs-number">.25</span>/bin/my_print_defaults<br>为什么需要my_print_defaults呢？这是因为mysql.server执行时就是通过my_print_defaults来读取my.cnf配置变量的。<br></code></pre></td></tr></table></figure><p> 参考博客：<a href="https://blog.csdn.net/u012794845/article/details/86577399">https://blog.csdn.net/u012794845/article/details/86577399</a></p><ul><li><strong>将MySQL加入系统进程中</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">将MySQL加入系统进程中<br>cp mysql.server /etc/init.d/mysql<br>然后重启MySQL服务<br>service mysql restart<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/18.png"></p><ul><li><strong>修改登录密码</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">进入MySQL 密码是之前自动生成的密码 <br>./mysql -u root -p<br>ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;新密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/19.png"></p><ul><li><strong>设置允许远程登录</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">use mysql切换数据库<br>update user set user.Host=<span class="hljs-string">&#x27;%&#x27;</span> where user.User=<span class="hljs-string">&#x27;root&#x27;</span>;修改HOST为%<br>flush privileges;修改成功后刷新权限<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/20.png"></p><ul><li><strong>退出MySQL</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">quit;<br></code></pre></td></tr></table></figure><ul><li><strong>重启MySQL服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">service mysql restart<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/21.png"></p><ul><li><strong>测试远程连接</strong></li></ul><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/22.png"></p><center>如果你热爱生活就不要浪费时间，因为时间组成了生活。</center>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统下配置Java环境</title>
    <link href="/2021/07/01/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/07/01/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux系统下配置Java环境"><a href="#Linux系统下配置Java环境" class="headerlink" title="Linux系统下配置Java环境"></a>Linux系统下配置Java环境</h1><h2 id="1-软件工具与JDK安装包准备"><a href="#1-软件工具与JDK安装包准备" class="headerlink" title="1.软件工具与JDK安装包准备"></a>1.软件工具与JDK安装包准备</h2><ul><li><em><strong>Linux系统版本：CentOS 8.3 64位</strong></em></li><li><em><strong>远程连接软件：Xshell 7文件传输软件：Xftp 7</strong></em></li><li><em><strong>两者的下载地址：</strong></em> <a href="https://www.netsarang.com/">https://www.netsarang.com</a></li></ul><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/1.png"><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/2.png"></p><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/3.png"></p><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/4.png"></p><ul><li><p><em><strong>Java版本：jdk-16.0.1_linux-x64</strong></em></p></li><li><p><em><strong>JDK下载：</strong></em> <a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/5.png"><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/6.png"></p></li></ul><h2 id="2-解压JDK安装包"><a href="#2-解压JDK安装包" class="headerlink" title="2.解压JDK安装包"></a>2.解压JDK安装包</h2><ul><li><p><em><strong>打开xshell连接上远程 Linux服务器</strong></em><br> <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/7.png"></p></li><li><p><em><strong>使用 xftp将JDK安装包上传到服务器  存放路径 ：&#x2F;usr&#x2F;java(不需要固定，可自行选择)</strong></em><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/8.png"></p></li><li><p><em><strong>使用命令进入安装目录</strong></em></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">进入目录 cd 路径<br>cd /usr/java<br>ll 或者 ls 查看当前目录下的文件<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/9.png"></p><ul><li><em><strong>命令解压安装包</strong></em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">tar -zxvf jdk-<span class="hljs-number">16.0</span>.1_linux-x64_bin.tar<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/10.png"></p><ul><li><em><strong>解压完成</strong></em></li></ul><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/11.png"></p><ul><li><em><strong>解压后的目录</strong></em></li></ul><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/12.png"></p><h2 id="3-环境配置"><a href="#3-环境配置" class="headerlink" title="3.环境配置"></a>3.环境配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">回到/目录 cd /<br>进入etc目录 cd etc<br></code></pre></td></tr></table></figure><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/13.png"></p><ul><li><em><strong>修改配置文件 vi profile，按下 i 健、代表进入insert输入编辑模式、左下角会出现 INSERT字样、来到文件的最下方</strong></em></li><li><em><strong>按下esc退出编辑模式，输入：wq保存关闭后，执行</strong></em></li></ul><p><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/14.png"></p><ul><li><em><strong>使用命令：source  profile 让配置生效</strong></em><br> <img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/15.png"></li></ul><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><ul><li><em><strong>使用 java -version查看是否配置成功</strong></em><br><img src="/article_img/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83/16.png"></li></ul><center>古人学问无遗力，少壮工夫老始成。</center>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot文件上传与下载</title>
    <link href="/2021/06/10/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
    <url>/2021/06/10/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot文件上传与下载"><a href="#SpringBoot文件上传与下载" class="headerlink" title="SpringBoot文件上传与下载"></a>SpringBoot文件上传与下载</h1><h2 id="上传文件代码"><a href="#上传文件代码" class="headerlink" title="上传文件代码"></a>上传文件代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(path = &quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;<br><br>    <span class="hljs-comment">/*上传文件的路径*/</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\picture&quot;</span>;<br><br>    <span class="hljs-meta">@RequestMapping(path = &quot;/fileUpload&quot;)</span><br><span class="hljs-comment">//    public String fileUpload(MultipartFile[] file) &#123;</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">newFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-comment">/*生成UUID*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>        <span class="hljs-comment">/*获取上传文件的全名*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br><br>        <span class="hljs-comment">/*截取文件后缀名*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">/*根据path路径创建file对象*/</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">realPathFolder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(PATH);<br><br>        <span class="hljs-comment">/*判断此路径下的目录是否存在,不存在就创建*/</span><br>        <span class="hljs-keyword">if</span> (!realPathFolder.exists()) &#123;<br>            realPathFolder.mkdirs();<br>        &#125;<br><br>        <span class="hljs-comment">/*生成新的文件名称*/</span><br>        newFileName = uuid + suffix;<br><br>        <span class="hljs-comment">/*根据路径和新的文件名创建file对象*/</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">newFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPathFolder, newFileName);<br><br>        <span class="hljs-comment">/*上传图片到指定路径*/</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.transferTo(newFile);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;上传文件失败！&quot;</span> + e);<br>        &#125;<br>        <span class="hljs-comment">/*返回访问路径*/</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;localhost:8080/files/&quot;</span> + newFileName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置文件大小限制"><a href="#设置文件大小限制" class="headerlink" title="设置文件大小限制"></a>设置文件大小限制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  servlet:<br>    multipart:<br>      max-request-size: 100MB<br>      max-file-size: 10MB<br>#     maxFileSize 是单个文件大小<br>#     maxRequestSize是设置总上传的数据大小<br></code></pre></td></tr></table></figure><h2 id="配置静态资源访问"><a href="#配置静态资源访问" class="headerlink" title="配置静态资源访问"></a>配置静态资源访问</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry<br>                <span class="hljs-comment">/*访问时的虚拟路径*/</span><br>                .addResourceHandler(<span class="hljs-string">&quot;/files/**&quot;</span>)<br>                <span class="hljs-comment">/*资源真实路径*/</span><br>                .addResourceLocations(<span class="hljs-string">&quot;file:D:\\picture\\&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="/article_img/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/1.png"><br><img src="/article_img/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/2.png"></p><center>不畏浮云遮望眼，只缘身在最高层。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch入门环境搭建（一）</title>
    <link href="/2021/01/16/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/01/16/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch入门环境搭建（一）"><a href="#ElasticSearch入门环境搭建（一）" class="headerlink" title="ElasticSearch入门环境搭建（一）"></a>ElasticSearch入门环境搭建（一）</h1><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>Elasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。<br>Elasticsearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。官方客户端在Java、.NET（C#）、PHP、Python、Apache Groovy、Ruby和许多其他语言中都是可用的。根据DB-Engines的排名显示，Elasticsearch是最受欢迎的企业搜索引擎，其次是Apache Solr，也是基于Lucene。</p><ul><li><strong>ElasticSearch版本7.9.3</strong></li><li><strong>kibana版本7.9.3</strong></li><li><strong>ik分词器版本7.9.3</strong></li></ul><h2 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h2><p> <strong>1. 下面有两种下载方式：</strong>（官网下载堪比蜗牛，推荐大家使用第二种镜像的方式下载）</p><ul><li><p><strong>ElasticSearch官网下载：</strong> <a href="https://www.elastic.co/cn/elasticsearch">https://www.elastic.co/cn/elasticsearch</a><br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.png"></p></li><li><p><strong>有不同的系统版本根据自己的情况下载就可以了</strong><br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.png"></p></li><li><p><strong>ElasticSearch华为云镜像下载：</strong><a href="https://mirrors.huaweicloud.com/elasticsearch">https://mirrors.huaweicloud.com/elasticsearch</a>最新的ElasticSearch版本在页面最下方<br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.png"></p></li><li><p><strong>不同的版本，比如我们在windows下学习ElasticSearch选择windows64位版本就行了</strong><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.png"></p></li></ul><p> <strong>2. 解将压缩包解压</strong><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/5.png"></p><ul><li>来熟悉下目录</li></ul><p>bin：二进制脚本，包含启动命令和安装插件命令等<br>comfig：配置文件（里面包含ElasticSearch、jvm、log4j等多个配置文件）<br>data：数据储存目录<br>lib：相关Jar依赖包<br>logs：日志文件<br>modules：功能模块<br>plugins：插件目录</p><p> <strong>3. 启动ElasticSearch</strong></p><p> 进入ElasticSearch的 bin 目录双击运行 elasticsearch.bat<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/6.png"></p><p><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/7.png"><br> <strong>4. 测试访问ElasticSearch</strong></p><ul><li>ElasticSearch的默认端口为9200，启动完成后直接在浏览器中访问 127.0.0.1:9200</li><li>随后ElasticSearch就会返回JSON格式的一些基本信息</li><li>最后一个属性挺有意思：”tagline” : “You Know, for Search” 你知道的，为了搜索<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/8.png"></li></ul><h2 id="安装可视化界面"><a href="#安装可视化界面" class="headerlink" title="安装可视化界面"></a>安装可视化界面</h2><ul><li><p><strong>下载elasticsearch-head：github地址</strong> <a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p></li><li><p><strong>1. 可以使用git命令下载：git clone <a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></strong></p></li><li><p><strong>2. 或者直接点击下载ZIP的压缩包</strong>（不会真有人没安装git吧？百度自己去下载吧）<br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/9.png"></p></li><li><p><strong>这里需要使用node.js进行项目初始化和导入依赖</strong>（如果没安装node.js的话，去官网下载安装即可，无需配置）</p></li><li><p><a href="https://nodejs.org/zh-cn">node.js官网：https://nodejs.org/zh-cn</a></p></li><li><p><strong>安装完后查看node以及npm是否安装成功</strong></p></li><li><p><strong>查看node.js版本：node -v 查看npm版本：npm -v</strong><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/10.png"></p></li><li><p><strong>安装cnpm国内淘宝镜像</strong>（因为使用npm非常的慢）</p></li><li><p><strong>命令：npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></strong></p></li><li><p><strong>安装完成cnpm后使用 cnpm -v 检查是否安装成功</strong>（如下图）<br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/11.png"></p></li><li><p><strong>使用cmd或者git进入elasticsearch-head的目录下执行</strong>（文件名太长了这里使用git） </p></li><li><p><strong>初始化elasticsearch-head这个项目模块命令：cnpm install</strong><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/12.png"></p></li><li><p><strong>运行此项目命令：npm run start</strong><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/13.png"></p></li><li><p><strong>成功之后让我们去访问<a href="http://localhost:9100/">http://localhost:9100</a></strong>（elasticsearch是9200，elasticsearch-head是9100）<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/14.png"></p></li><li><p><strong>我们安装好可视化界面后尝试连接下elasticsearch看看是否成功</strong></p></li><li><p><strong>无法连接到elasticsearch服务其实一个是跨域的问题</strong><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/15.png"></p></li><li><p><strong>解决跨域问题</strong></p></li></ul><ol><li>进入elasticsearch的config目录并打开elasticsearch.yml配置文件<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/16.png"></li><li>在后面加上此内容即可解决跨域问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">http.cors.enabled: <span class="hljs-literal">true</span><br>http.cors.allow-origin: <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/17.png"></p><ul><li>重启elasticsearch运行elasticsearch下bin目录的可执行文件elasticsearch.bat（在windows系统下直接双击即可）</li><li>再次使用elasticsearch-head尝试连接elasticsearch服务成功 </li><li><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/18.png"></li><li><strong>可以简单了解下elasticsearch-head的界面，后面再使用</strong></li></ul><h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><p>  kibana和elasticsearch都是拆箱即用，同样的下载分官方下载和华为云镜像下载。kibana也是如此（因为官方非常的慢）</p><ul><li><p><strong>kibana华为云镜像下载：</strong><a href="https://mirrors.huaweicloud.com/kibana">https://mirrors.huaweicloud.com/kibana</a> <strong>kibana官方地址：</strong><a href="https://www.elastic.co/cn/kibana"> https://www.elastic.co/cn/kibana</a></p></li><li><p><strong><font color=red>注：kibana的版本一定要和elasticsearch版本一致 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载完成后解压需要一小段时间</font></strong></p></li><li><p><strong>访问kibana</strong><br> kibana解压完成后进入bin目录双击kibana.bat运行<br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/19.png"><br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20.png"></p></li><li><p><strong>访问：<a href="http://localhost:5601/">http://localhost:5601</a></strong>（不同的kibana版本可能界面有所不同）<br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/21.png"></p></li></ul><p>访问kibana后发现全是English，如果是中文看起来肯定最舒服，如何让kibana变成中文？我们接下来汉化kibana</p><ul><li><strong>汉化kibana</strong></li><li>进入kibana的bin目录打开 kibana.yml文件<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/22.png"></li><li>在最后一行加上：i18n.locale: “zh-CN”<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/23.png"></li><li>关闭kibana窗口重新运行bin目录下kibana.bat文件再访问：<a href="http://localhost:5601/">http://localhost:5601</a>汉化成功<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/24.png"></li></ul><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><ul><li><strong>什么是IK分词器?</strong></li></ul><p>分词:即把一段中文或者别的划分成一个个的关键字,我们在搜索时候会把自己的信息进行分词,会把数据库中或者索引库中的数据进行分词,然后进行一个匹配操作,默认的中文分词器是将每个字看成一个词,比如”我爱技术”会被分为”我”,”爱”,”技”,”术”,这显然不符合要求,所以我们需要安装中文分词器IK来解决这个问题</p><p>IK提供了两个分词算法:ik_smart和ik_max_word<br>其中ik_smart为最少切分，ik_max_word为最细粒度划分</p><ul><li><strong>安装IK分词器</strong></li></ul><p>  **1. 下载IK分词器<a href="https://github.com/medcl/elasticsearch-analysis-ik">github地址：https://github.com/medcl/elasticsearch-analysis-ik</a>**（注意和elasticsearch版本对应）</p><p>  <strong>2. 在elasticsearch的plugins目录下新建一个名为ik的文件夹，并将ik分词器压缩包解压到文件夹下面</strong><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/25.png"><br><strong>3. 重启elasticsearch，让它去加载ik分词器插件</strong><br>在启动时就可以明确的看到加载了ik分词器插件<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/26.png"><br>也可以在elasticsearch的bin目录下通过cmd+命令查看加载的插件：elasticsearch-plugin list<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/27.png"><br> <strong>- 使用kibana进行测试</strong><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/28.png"><br><strong>上面说到ik分词器中的 ik_smart 为最少切分， ik_max_word 为最细粒度划分。用一个字符串来试试两者具体的区别</strong><br>比如说我要搜索<em><strong>刘亦菲真的很美</strong></em>，两种不同的方式会怎样进行分词</p><ul><li><p>ik_smart 最少切分<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/29.png"></p></li><li><p>ik_max_word 最细粒度划分<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/30.png"><br>ik_smart  将 <em><strong>刘亦菲真的很美</strong></em> 分为了：刘、亦、菲、真的、很美。五个词<br>ik_max_word  将 <em><strong>刘亦菲真的很美</strong></em> 分为了：刘、亦、菲、真的、真的很、很美。六个词</p></li><li><p><strong>自定义分词</strong></p></li></ul><p>经过上面的两种测试，我们发现不管以什么方式进行分词，始终把某些我们认为的词组给分成了单个的字<br>例如上面的词，我想要的是 <em><strong>刘亦菲</strong></em> ，而不是：<em><strong>刘、亦、菲</strong></em> 三个单独的字。这时候就需要把我们自定义的词组加到ik词典中去</p><ol><li><p>首先进入到elasticsearch-7.9.3\plugins\ik\config 新建一个我们自己的 dic 文件比如我这里取名为my.dic </p></li><li><p>打开我们自己的 .dic 文件，并加入我们想要的词语<br> <img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/31.png"></p></li><li><p>打开config下的 IKAnalyzer.cfg.xml 配置文件并配置我们刚刚的扩展词组<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/32.png"><br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/33.png"></p></li><li><p>重启elasticsearch和kibana</p></li></ol><ul><li>关闭elasticsearch和kibana的服务窗口</li><li>分别先运行elasticsearch下bin目录中的 elasticsearch.bat </li><li>以及kibana的bin目录下 kibana.bat</li></ul><ol start="5"><li>再次打开 <a href="http://localhost:5601/">http://localhost:5601</a> 进行测试</li></ol><ul><li>ik_smart<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/34.png"></li><li>ik_max_word<br><img src="/article_img/ElasticSearch%E5%85%A5%E9%97%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/35.png"></li><li><strong>这样就成功啦，就可以按照我们的方式进行分词了</strong></li></ul><center>只有懦弱和失败者才会四处寻找借口</center>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus代码生成器</title>
    <link href="/2020/12/28/MyBatis-Plus%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2020/12/28/MyBatis-Plus%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus代码生成器"><a href="#MyBatis-Plus代码生成器" class="headerlink" title="MyBatis-Plus代码生成器"></a>MyBatis-Plus代码生成器</h1><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><h2 id="1-在SpringBoot项目中导入Maven依赖"><a href="#1-在SpringBoot项目中导入Maven依赖" class="headerlink" title="1.在SpringBoot项目中导入Maven依赖"></a>1.在SpringBoot项目中导入Maven依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--mybatis-plus--&gt;<br>    &lt;dependency&gt;<br>    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!--代码生成器--&gt;<br>    &lt;dependency&gt;<br>    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!--Velocity--&gt;<br>    &lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;<br>    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.2</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="2-编写配置"><a href="#2-编写配置" class="headerlink" title="2.编写配置"></a>2.编写配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">code</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">/*创建代码生成器对象*/</span><br>        <span class="hljs-type">AutoGenerator</span> <span class="hljs-variable">autoGenerator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoGenerator</span>();<br><br>        <span class="hljs-comment">/*1.全局配置*/</span><br>        <span class="hljs-type">GlobalConfig</span> <span class="hljs-variable">gc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>();<br>        <span class="hljs-comment">/*获取当前项目路径*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        <span class="hljs-comment">/*生成文件的输出目录*/</span><br>        gc.setOutputDir(property + <span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>        <span class="hljs-comment">/*开发人员*/</span><br>        gc.setAuthor(<span class="hljs-string">&quot;阿波&quot;</span>);<br>        <span class="hljs-comment">/*是否打开输出目录*/</span><br>        gc.setOpen(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">/*是否覆盖已有文件*/</span><br>        gc.setFileOverride(<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">/*指定生成的主键的ID类型*/</span><br>        gc.setIdType(IdType.ID_WORKER);<br>        <span class="hljs-comment">/*去除Service的I前缀*/</span><br>        gc.setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>);<br>        <span class="hljs-comment">/*时间类型对应策略*/</span><br>        gc.setDateType(DateType.ONLY_DATE);<br>        <span class="hljs-comment">/*开启swagger2模式*/</span><br>        gc.setSwagger2(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">/*是否在xml中添加二级缓存配置*/</span><br>        gc.setEnableCache(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">/*将配置添加进代码生成器对象*/</span><br>        autoGenerator.setGlobalConfig(gc);<br><br>        <span class="hljs-comment">/*2.配置数据源*/</span><br>        <span class="hljs-type">DataSourceConfig</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConfig</span>();<br>        <span class="hljs-comment">/*驱动连接的URL*/</span><br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=Asia/Shanghai&quot;</span>);<br>        <span class="hljs-comment">/*驱动名称*/</span><br>        dataSource.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">/*数据库连接用户名*/</span><br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-comment">/*数据库连接密码*/</span><br>        dataSource.setPassword(<span class="hljs-string">&quot;libo&quot;</span>);<br>        <span class="hljs-comment">/*数据类型*/</span><br>        dataSource.setDbType(DbType.MYSQL);<br><br>        <span class="hljs-comment">/*将配置添加进代码生成器对象*/</span><br>        autoGenerator.setDataSource(dataSource);<br><br>        <span class="hljs-comment">/*3.包的配置*/</span><br>        <span class="hljs-type">PackageConfig</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageConfig</span>();<br>        <span class="hljs-comment">/*父包模块名*/</span><br>        pc.setModuleName(<span class="hljs-string">&quot;codeTest&quot;</span>);<br>        <span class="hljs-comment">/*父包名*/</span><br>        pc.setParent(<span class="hljs-string">&quot;com.libo&quot;</span>);<br>        <span class="hljs-comment">/*Controller包名*/</span><br>        pc.setController(<span class="hljs-string">&quot;controller&quot;</span>);<br>        <span class="hljs-comment">/**Entity包名/</span><br><span class="hljs-comment">         pc.setEntity(&quot;entity&quot;);</span><br><span class="hljs-comment">         /*Mapper包名*/</span><br>        pc.setMapper(<span class="hljs-string">&quot;mapper&quot;</span>);<br>        <span class="hljs-comment">/*Service包名*/</span><br>        pc.setService(<span class="hljs-string">&quot;service&quot;</span>);<br><br>        <span class="hljs-comment">/*将配置添加进代码生成器对象*/</span><br>        autoGenerator.setPackageInfo(pc);<br><br>        <span class="hljs-comment">/*4.策略配置*/</span><br>        <span class="hljs-type">StrategyConfig</span> <span class="hljs-variable">strategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyConfig</span>();<br>        <span class="hljs-comment">/*设置映射的表名*/</span><br>        strategy.setInclude(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">/*数据库表映射到实体的命名策略*/</span><br>        strategy.setNaming(NamingStrategy.underline_to_camel);<br>        <span class="hljs-comment">/*数据库表字段映射到实体的命名策略*/</span><br>        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<br><span class="hljs-comment">//        strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);</span><br>        <span class="hljs-comment">/*是否为lombok模型*/</span><br>        strategy.setEntityLombokModel(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">/*逻辑删除属性名称*/</span><br>        strategy.setLogicDeleteFieldName(<span class="hljs-string">&quot;deleted&quot;</span>);<br>        <span class="hljs-comment">/*乐观锁属性名称*/</span><br>        strategy.setVersionFieldName(<span class="hljs-string">&quot;version&quot;</span>);<br>        <span class="hljs-comment">/*自动填充*/</span><br>        <span class="hljs-type">TableFill</span> <span class="hljs-variable">cteateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableFill</span>(<span class="hljs-string">&quot;cteate_time&quot;</span>, FieldFill.INSERT_UPDATE);<br>        <span class="hljs-type">TableFill</span> <span class="hljs-variable">updateTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableFill</span>(<span class="hljs-string">&quot;update_time&quot;</span>, FieldFill.UPDATE);<br>        ArrayList&lt;TableFill&gt; tableFills = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        tableFills.add(cteateTime);<br>        tableFills.add(updateTime);<br>        strategy.setTableFillList(tableFills);<br>        strategy.setRestControllerStyle(<span class="hljs-literal">true</span>);<br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">/*将配置添加进代码生成器对象*/</span><br>        autoGenerator.setStrategy(strategy);<br><br><br>        <span class="hljs-comment">/*执行*/</span><br>        autoGenerator.execute();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-运行后的效果"><a href="#3-运行后的效果" class="headerlink" title="3.运行后的效果"></a>3.运行后的效果</h2><p><img src="/article_img/MyBatis-Plus%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/1.png"></p><center>如果不能忠于自己的心，胜负又有什么价值呢？</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>MyBatis-Plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus的基本使用</title>
    <link href="/2020/12/25/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/12/25/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus的基本使用"><a href="#MyBatis-Plus的基本使用" class="headerlink" title="MyBatis-Plus的基本使用"></a>MyBatis-Plus的基本使用</h1><h2 id="使用MyBatis-Plus能够带来的好处是什么呢？MyBatis-Plus和MyBatis是一个怎样的关系？"><a href="#使用MyBatis-Plus能够带来的好处是什么呢？MyBatis-Plus和MyBatis是一个怎样的关系？" class="headerlink" title="使用MyBatis-Plus能够带来的好处是什么呢？MyBatis-Plus和MyBatis是一个怎样的关系？"></a>使用MyBatis-Plus能够带来的好处是什么呢？MyBatis-Plus和MyBatis是一个怎样的关系？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">使用MyBatis-Plus好处是可以节省非常多代码量，少写SQL、还可以代码生成、从而加快我们在开发中的效率（拒绝加班、拒绝<span class="hljs-number">996</span>）<br>MyBatis-Plus是对MyBatis框架进行了更强的封装，核心当然还是MyBatis。相当于在MyBatis的基础上新增了许多在实际开发中经常被使用到的功能<br>并且完全的简化了这些功能的实现代码，比如：分页、代码生成、乐观锁、逻辑删除等等...更好的帮助像我这种CRUD工程师进行高效率的项目开发<br></code></pre></td></tr></table></figure><p>以上描述完全是个人理解，为了小伙伴们更好的学习MyBati-Plus可参考官方文档：<a href="https://baomidou.com/">https://baomidou.com</a></p><p>继续往下将带大家从Mybati-Plus的入门到常用的核心功能</p><h2 id="1-mybatis-Plus快速入门体验"><a href="#1-mybatis-Plus快速入门体验" class="headerlink" title="1.mybatis-Plus快速入门体验"></a>1.mybatis-Plus快速入门体验</h2><p>开发环境：SpringBoot 2.3.4+Mybatis-Plus 3.4.1+MySQL 8.0</p><p>注：不同的MyBatis-Plus版本可能在某些功能的配置上有所不同</p><ol><li>创建数据库表并插入测试数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--创建表--&gt;<br>CREATE TABLE <span class="hljs-title function_">user</span><br><span class="hljs-params">(</span><br><span class="hljs-params">id BIGINT(<span class="hljs-number">20</span>)</span> NOT NULL COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>name <span class="hljs-title function_">VARCHAR</span><span class="hljs-params">(<span class="hljs-number">30</span>)</span> NULL DEFAULT NULL COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>age <span class="hljs-title function_">INT</span><span class="hljs-params">(<span class="hljs-number">11</span>)</span> NULL DEFAULT NULL COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>email <span class="hljs-title function_">VARCHAR</span><span class="hljs-params">(<span class="hljs-number">50</span>)</span> NULL DEFAULT NULL COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(id)</span><br>);<br>&lt;!--添加数据--&gt;<br>INSERT INTO <span class="hljs-title function_">user</span> <span class="hljs-params">(id, name, age, email)</span> VALUES<br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jone&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;test1@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;test2@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;test3@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Sandy&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;test4@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;Billie&#x27;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;test5@baomidou.com&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>新建一个SpringBoot项目并在pom.xml文件中导入所需的Maven依赖</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>       &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;<br>   &lt;/dependency&gt;<br>   &lt;dependency&gt;<br>       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>       &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>       &lt;scope&gt;test&lt;/scope&gt;<br>   &lt;/dependency&gt;<br>   <br>   &lt;!--lombok--&gt;<br>   &lt;dependency&gt;<br>       &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>       &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>       &lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>   &lt;/dependency&gt;<br>   <br>   &lt;!--mybatis-plus--&gt;<br>   &lt;dependency&gt;<br>       &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>       &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>       &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>   &lt;/dependency&gt;<br>   <br>    &lt;!--mysql--&gt;<br>   &lt;dependency&gt;<br>       &lt;groupId&gt;mysql&lt;/groupId&gt;<br>       &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>       &lt;version&gt;<span class="hljs-number">8.0</span><span class="hljs-number">.22</span>&lt;/version&gt;<br>   &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>在application.yaml文件中配置数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  datasource:<br>    driver-class-name: com.mysql.cj.jdbc.Driver<br>    url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatis_plus?serverTimezone=Asia/Shanghai</span><br>    username: root<br>    password: libo<br></code></pre></td></tr></table></figure></li><li><p>创建User实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-comment">/*全部参数的构造方法*/</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-comment">/*无参构造*/</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-comment">/*指定数据库表名*/</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-comment">/*实体类*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>创建userMapper接口并继承BaseMapper接口<br> 别忘了在启动类上加入@MapperScan(value &#x3D; “com.mybatiPlus.mapper”)   &#x2F;&#x2F;扫描mapper文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-comment">/*Mapper接口*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">userMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用MyBatis-Plus操作数据(这里就测试下查询user表的所有数据)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-comment">/*测试类*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mybatisPlusTest</span> &#123;<br><br>    <span class="hljs-comment">/*注入持久层userMapper接口*/</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> userMapper userMapper;<br><br>    <span class="hljs-comment">/*查询user表中所有数据*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seleteByList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*Wrapper是一个条件构造器,这里暂且先不适用*/</span><br>        List&lt;User&gt; userList = userMapper.selectList(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">/*打印List*/</span><br>        userList.forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><p>控制台打印的结果：<br>的确是把user表中的所有数据查询出来了，然而我们并没有编写SQL语句对吧，这就是MyBatis-Plus的强大之处。<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/1.png"></p></li></ol><blockquote><p><strong>这里就有两个问题：1.userMapper下的方法哪里来的？2.SQL是谁写的？</strong><br><strong>方法来自BaseMapper，因为我们继承了他并且传入了泛型。SQL语句当然是MyBatis-Plus中封装的啦，这只是MyBatis-Plus强大功能中的其中之一</strong></p></blockquote><h2 id="2-配置日志输出"><a href="#2-配置日志输出" class="headerlink" title="2.配置日志输出"></a>2.配置日志输出</h2><ol><li>在application.yaml中加入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">mybatis-plus:<br>  configuration:<br>    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<br></code></pre></td></tr></table></figure></li><li>再次测试查询所有方法，然后观察控制台与之前多了哪些东西？<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/2.png"></li></ol><h2 id="3-主键生成策略"><a href="#3-主键生成策略" class="headerlink" title="3.主键生成策略"></a>3.主键生成策略</h2><p>什么是主键生成策略呢？在数据库中一张表的主键一般就是我们的id字段，但是主键字段的值就有很多种了。<br>比如常见的id自增，或者说是insert into插入数据的时候手动填入，那在MyBatis-Plus中又给我们带来哪些不同的生成策略呢？</p><ol><li>插入一条数据到user表<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*添加数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-comment">/*名字*/</span><br>    user.setName(<span class="hljs-string">&quot;周杰伦&quot;</span>);<br>    <span class="hljs-comment">/*年龄*/</span><br>    user.setAge(<span class="hljs-number">18</span>);<br>    <span class="hljs-comment">/*email*/</span><br>    user.setEmail(<span class="hljs-string">&quot;abc@163.com&quot;</span>);<br>    <span class="hljs-comment">/*添加数据*/</span><br>    userMapper.insert(user);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>查看日志输出，看MyBabtis-Plus默认给我们生成的id是什么？<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/3.png"></li><li>查看数据库<br> <img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/4.jpg"></li></ol><blockquote><p><strong>问题：为什么会生成这么长一串id呢？或者说这个id是根据什么生成的呢？下面就介绍MyBatis的主键生成策略</strong></p></blockquote><p><strong>MyBatis-Plus中不同的主键生成策略：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> IdType.AUTO：数据库自增id(数据库表也必须设置为自增id)<br><span class="hljs-number">2.</span> IdType.NONE：该类型为未设置主键类型(和下面这个差不多)<br><span class="hljs-number">3.</span> IdType.INPUT：用户输入ID(自定义id)<br><span class="hljs-number">4.</span> IdType.ASSIGN_UUID：生成全局唯一UUID 注：主键字段为字符串<br><span class="hljs-number">5.</span> IdType.ID_WORKER：默认的全局唯一id (雪花算法)MyBatis-Plus默认策略<br><span class="hljs-number">6.</span> IdType.ID_WORKER_STR：是ID_WORKER的字符串表示法 (雪花算法)<br></code></pre></td></tr></table></figure><p>注：IdType是一个枚举类</p><p>所以我们刚刚插入的数据生成的id就是使用MyBatis-Plus默认的生成策略IdType.ID_WORKER，其中采用了雪花算法。<br>主键生成策略的详细介绍可参考：<a href="https://www.cnblogs.com/captainad/p/10954331.html">分布式系统主键id生成策略</a></p><p>如果想要使用不同的策略需要在实体类的主键字段上加上注解 @TableId(type &#x3D; IdType.ASSIGN_UUID)<br>比如我们再测试一个自动生成的UUID，因为UUID包含字母那就要把主键id字段改为String类型，数据库主键字段类型为varchar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.ASSIGN_UUID)</span><br><span class="hljs-keyword">private</span> String id;<br><br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-keyword">private</span> Integer age;<br><br><span class="hljs-keyword">private</span> String email;<br></code></pre></td></tr></table></figure><p><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/5.png"><br>    再次执行我们之前的添加数据方法，查看结果<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/6.png"><br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/7.png"><br>记得将实体类主键类型和数据库表主键字段类型改回来，上面只做一个测试。</p><h2 id="4-单表删除操作"><a href="#4-单表删除操作" class="headerlink" title="4.单表删除操作"></a>4.单表删除操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*根据id删除数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*根据id删除*/</span><br>    userMapper.deleteById(<span class="hljs-number">1342413749983252482L</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/8.png"><br>另外再补充两个不同的删除方式：</p><p>根据id批量删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*根据id批量删除*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*批量删除id为1、2的数据*/</span><br>    List&lt;Long&gt; longs = Arrays.asList(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>);<br>    userMapper.deleteBatchIds(longs);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据Map条件删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*根据Map条件删除*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByMap</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-comment">/*删除name为周杰伦的数据*/</span><br>    map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;周杰伦&quot;</span>);<br>    userMapper.deleteByMap(map);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-单表逻辑删除"><a href="#5-单表逻辑删除" class="headerlink" title="5.单表逻辑删除"></a>5.单表逻辑删除</h2><p>我们之前删除数据是直接从数据库表中删除的，删除之后表里面这条数据就没有了，对吧<br>那么逻辑删除就是：要删除的数据并不是真正的从表中删除，只是在查询时不展示这条数据即可。<br>例如就相当于回收站：被删除的数据在回收站，但是回收站并没有清空，我们只是判断它没有作用了，放到一边而已</p><p>如何实现：</p><ol><li>数据库表新增一个字段并且给一个默认值<br>假设我们设置逻辑删除字段的值默认为0<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/9.png"></li><li>实体类增加逻辑删除字段配上注解<br> 加上注解：@TableLogic<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-comment">/*全部参数的构造方法*/</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-comment">/*无参构造*/</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-comment">/*指定数据库表名*/</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@TableId(type = IdType.ID_WORKER)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">/*逻辑删除*/</span><br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-keyword">private</span> Integer delete;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在application.yaml文件中配置MyBatisPlus逻辑删除组件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">mybatis-plus:<br>  #逻辑删除<br>  global-config:<br>    db-config:<br>      logic-delete-field: deleted  # 全局逻辑删除的实体字段名(since <span class="hljs-number">3.3</span><span class="hljs-number">.0</span>,配置后可以忽略不配置步骤<span class="hljs-number">2</span>)<br>      logic-delete-value: <span class="hljs-number">1</span> # 逻辑已删除值(默认为 <span class="hljs-number">1</span>)<br>      logic-not-delete-value: <span class="hljs-number">0</span> # 逻辑未删除值(默认为 <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></li><li>配置完成之后让我们来测试一个删除方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*根据id删除数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*根据id删除*/</span><br>    userMapper.deleteById(<span class="hljs-number">3L</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/10.png"><br>逻辑删除其实走的是update方法，把逻辑删除字段的值给修改了，我们设置的是未删除时字段默认为0，逻辑删除后字段为1<br>然后在查询时加上条件deleted &#x3D; 0，所以在查询时deleted字段为1的值我们并没有查询出来，只查询了值为0的数据<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/11.png"></li></ol><h2 id="6-单表更新操作"><a href="#6-单表更新操作" class="headerlink" title="6.单表更新操作"></a>6.单表更新操作</h2><p> 现在想把id为1的数据中name改为刘德华，看看应该如何操作？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*更新数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-comment">/*id*/</span><br>    user.setId(<span class="hljs-number">1L</span>);<br>    <span class="hljs-comment">/*修改名字*/</span><br>    user.setName(<span class="hljs-string">&quot;刘德华&quot;</span>);<br>    <span class="hljs-comment">/*根据id修改*/</span><br>   userMapper.updateById(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看日志执行的SQL：<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/12.png"><br>查看数据库表：<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/13.png"><br>上面只是修改了一个name字段，如果修改多个字段呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*更新数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-comment">/*id*/</span><br>    user.setId(<span class="hljs-number">1L</span>);<br>    <span class="hljs-comment">/*修改名字*/</span><br>    user.setName(<span class="hljs-string">&quot;刘德华&quot;</span>);<br>    <span class="hljs-comment">/*修改年龄*/</span><br>    user.setAge(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">/*修改邮箱*/</span><br>    user.setEmail(<span class="hljs-string">&quot;123@qq.com&quot;</span>);<br>    <span class="hljs-comment">/*根据id修改*/</span><br>   userMapper.updateById(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意看执行的SQL语句，和上面修改一个字段相比较，相当于在修改数据时MyBatis-Plus会做一个实体类字段的的非空验证<br>实体类中不为空的字段就视为要修改的属性。<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/14.png"></p><h2 id="7-单表查询操作"><a href="#7-单表查询操作" class="headerlink" title="7.单表查询操作"></a>7.单表查询操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*查询user表中所有数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seleteByTest</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*Wrapper是一个条件构造器,这里暂且先不使用*/</span><br>    List&lt;User&gt; userList = userMapper.selectList(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">/*打印List*/</span><br>    userList.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-comment">/*根据id查询一个*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seleteByid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*查询id为5的数据*/</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">/*输出*/</span><br>    System.out.println(user);<br>&#125;<br><br><br><span class="hljs-comment">/*根据id批量查询*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectBatchIds</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">/*查询多个id*/</span><br>    List&lt;User&gt; users = userMapper.selectBatchIds(list);<br>    <span class="hljs-comment">/*输出所有*/</span><br>    users.forEach(System.out::println);<br>&#125;<br><br><br><span class="hljs-comment">/*条件查询*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectByMap</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-comment">/*查询name为周杰伦的数据*/</span><br>    map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;周杰伦&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectByMap(map);<br>    <span class="hljs-comment">/*输出所有*/</span><br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-分页查询"><a href="#8-分页查询" class="headerlink" title="8.分页查询"></a>8.分页查询</h2><p>一般分页的几种方式：</p><ol><li>自己创建分页类，然后limit查询进行分页</li><li>PageHelper插件分页</li></ol><p>MyBatis-Plus这么强大当然也提供了分页插件，那我们就看看在MyBatis-Plus中如何使用分页？</p><p>首先在SpringBoot中创建一个配置类，然后添加方法注册一个Bean对象。这个配置类还会配置其他关于MyBatis-Plus的插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*配置类*/</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">myBatisPlusConfig</span> &#123;<br><br>    <span class="hljs-comment">/*MyBatis-Plus分页插件*/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInterceptor</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在测试类中新建一个方法进行对分页的测试：<br>注：Page 对象中有很多方法，比如：数据总数，总页数等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*分页查询*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*参数一：多少页(页码) 参数二：多少条数据(页面大小)*/</span><br>    <span class="hljs-type">Page</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    page = userMapper.selectPage(page, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">/*输出数据*/</span><br>    page.getRecords().forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-自动填充功能"><a href="#9-自动填充功能" class="headerlink" title="9.自动填充功能"></a>9.自动填充功能</h2><p><strong>在开发中一张表起码有这样的两个字段吧，一个是数据的插入时间，还有一个就是数据的修改时间。<br>所谓自动填充就是数据在插入、修改的时候给具体的字段设置值。例如设置当前时间</strong></p><p>其实这种实现有两种方式：<br>注：不管采用什么样的方式实现都必须有这两个字段</p><ol><li>数据库级别（不推荐使用）</li></ol><p> 数据的创建时间字段默认一栏写入CURRENT_TIMESTAMP，该字段就会在新增数据时自动填入当前时间（创建数据时填入该字段）<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/15.png"></p><p>只需要勾选根据当前时间戳更新，该数据在修改时，updateTime字段就会自动填入当前时间（修改数据时更新该字段）</p><p><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/16.png"></p><ol start="2"><li>代码级别</li></ol><p>如果使用第一种方法，我们在开发中不一定能有权限去修改数据库，非专业数据库工程师去操作也不太好<br>MyBatis-Plus给我们提供了代码级别的填充。</p><ul><li>可以先看下这个枚举类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">FieldFill</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认不处理</span><br><span class="hljs-comment">     */</span><br>    DEFAULT,<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入时填充字段</span><br><span class="hljs-comment">     */</span><br>    INSERT,<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新时填充字段</span><br><span class="hljs-comment">     */</span><br>    UPDATE,<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入和更新时填充字段</span><br><span class="hljs-comment">     */</span><br>    INSERT_UPDATE<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>在实体类种创建两个字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*创建时间*/</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Date cteateTime;<br><br><span class="hljs-comment">/*修改时间*/</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Date updateTime;<br></code></pre></td></tr></table></figure></li><li><p>创建一个类来继承 MetaObjectHandler，该类作为MyBatis-Plus的自动填充处理类：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">/*自动填充处理类*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br><br>    <span class="hljs-comment">/*在插入数据时填充时间,两个字段都填充cteateTime和updateTime*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;start insert fill ....&quot;</span>);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;cteateTime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), metaObject);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), metaObject);<br>    &#125;<br><br>    <span class="hljs-comment">/*在插入数据时填充时间,只填充updateTime*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;start update fill ....&quot;</span>);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>至此在数据的插入时cteateTime和updateTime两个字段都会被填充，在数据修改时updateTime字段会被填充。<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/17.png"></li></ul><h2 id="10-乐观锁"><a href="#10-乐观锁" class="headerlink" title="10.乐观锁"></a>10.乐观锁</h2><p>乐观锁的实现方式：这里需要多增加一个字段，这里取名为version(版本)</p><ol><li>先查询出当前数据的version字段</li><li>修改时带上这个version字段</li><li>执行修改的SQL语句时：set version &#x3D; 新version where version &#x3D; 旧version</li><li>如果第一次取出的version和修改时的version不同，那么就修改失败。修改成功那么就在旧version的值上+1</li></ol><p>其实这里就是线程并发的问题：<br>那我们假设现在有AB两个线程，两个线程都要去执行修改同一条数据的操作，并且该数据的version字段为0，A线程执行时去查询值为0，B线程执行时查询值也为0。但是A线程先执行，那么version字段+1，那么现在version已经为1了，线程B去执行修改时发现 两次的version不一样，查询时为0，执行时为1，那么B线程就修改失败<br><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/18.png"></p><p>看看MyBatis-Plus如何实现乐观锁：<br>数据库表和实体类都要新增一个version字段，并且在实体类字段上加上@Version注解，数据库字段给一个默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure><p><img src="/article_img/MyBatis-Plus%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/19.jpg"></p><p>在SpringBoot的代码中注入一个Bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title function_">optimisticLockerInterceptor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInterceptor</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-wrapper-条件构造器"><a href="#11-wrapper-条件构造器" class="headerlink" title="11.wrapper 条件构造器"></a>11.wrapper 条件构造器</h2><p>上面的SQL案例都是些比较简单的数据库操作，但是如何有很复杂的条件查询应该在MyBatis-Plus中如何使用？<br>这里就需要用到wrapper条件构造器，下面给大家举几个复杂条件的例子，wrapper 的功能远不止这些，参考官方文档进行编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*wrapper构造器*/</span><br><span class="hljs-meta">@SpringBootTest(classes = MyBatisPlusApplication.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">wrapperTest</span> &#123;<br><br>    <span class="hljs-comment">/*注入持久层userMapper接口*/</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> userMapper userMapper;<br><br><br>    <span class="hljs-comment">/*查询name和email不为null并且age大于等于18的数据*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        wrapper<br>                .isNotNull(<span class="hljs-string">&quot;name&quot;</span>)<br>                .isNotNull(<span class="hljs-string">&quot;email&quot;</span>)<br>                .ge(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<br>        userMapper.selectList(wrapper).forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*查询name等于周杰伦的数据*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        wrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;周杰伦&quot;</span>);<br>        userMapper.selectList(wrapper).forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*查询age在20到30之间的数据*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        wrapper.between(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<span class="hljs-comment">//区间</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> userMapper.selectCount(wrapper);<span class="hljs-comment">//查询结果数</span><br>        System.out.println(integer);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*模糊查询*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        wrapper.<br>                notLike(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;李&quot;</span>)<span class="hljs-comment">//not like</span><br>                .likeLeft(<span class="hljs-string">&quot;email&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-comment">//%123</span><br><br>        List&lt;Map&lt;String, Object&gt;&gt; map = userMapper.selectMaps(wrapper);<br>        map.forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*子查询*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        wrapper.inSql(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;select id from user where id &lt; 5&quot;</span>);<br><br>        List&lt;Object&gt; list = userMapper.selectObjs(wrapper);<br>        list.forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*根据id倒叙*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>        QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>        wrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br><br>        List&lt;User&gt; users = userMapper.selectList(wrapper);<br>        users.forEach(System.out::println);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><center>在不同的遭遇里我发现你的瞬间，有种不可言说的温柔直觉。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>MyBatis-Plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信扫码登录</title>
    <link href="/2020/11/21/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <url>/2020/11/21/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="微信扫码登录"><a href="#微信扫码登录" class="headerlink" title="微信扫码登录"></a>微信扫码登录</h1><p>小伙伴们有各种疑问可以去参考官方文档进行详细的学习下 <a href="https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html">微信开发文档</a> ，此次介绍的将是前后端不分离的微信扫码登录</p><p>微信登录开发流程：</p><ol><li>申请微信接入</li><li>生成登录二维码</li><li>用户扫码并授权</li><li>调用回调方法</li><li>通过code去获取用户信息带到页面展示</li></ol><p> 官方流程图：<br><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/1.png"></p><h2 id="1-申请微信接入："><a href="#1-申请微信接入：" class="headerlink" title="1. 申请微信接入："></a>1. 申请微信接入：</h2><blockquote><p><strong>先提醒下各位：申请微信接入很麻烦，本人因为公司业务需要，用的是公司申请好的。还没自己去申请过。</strong></p></blockquote><p>先去到 <a href="https://open.weixin.qq.com/">微信开放平台 https://open.weixin.qq.com</a> </p><p><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/2.png"><br>申请一个网站应用 (要审核通过之后才能用)</p><p><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/3.png"><br>注：</p><ol><li>appid和appSecret就是调用微信接口的凭证</li><li>授权回调域：调用微信接口生成的二维码地址，用户扫码并授权后，会重定向到回调地址</li><li>因为在本地localhost进行测试，如果回调地址为localhost第三方微信将无法进行跳转。原因是外网访问不到本地，怎么办?解决办法：那就使用 ngrok 内网穿透把本地项目服务映射到公网，所以在测试时填写的回调地址是内网穿透时的访问域名</li><li>如果不知道内网穿透的小伙伴，建议先看看 <a href="https://blog.csdn.net/weixin_45377770/article/details/109841211">Sunny-Ngrok 内网穿透的使用</a></li></ol><p><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/4.png"></p><p>如果不知道内网穿透的小伙伴，建议先看看 <a href="https://blog.csdn.net/weixin_45377770/article/details/109841211">Sunny-Ngrok 内网穿透的使用</a></p><p>启动 Sunny-Ngrok 内网穿透的客户端，先将本地服务映射到公网。</p><p><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/5.png"></p><h2 id="2-项目环境搭建："><a href="#2-项目环境搭建：" class="headerlink" title="2. 项目环境搭建："></a>2. 项目环境搭建：</h2><p>下面正式开始代码部分，创建SpringBoot项目并导入所需Jar包：<br>环境：JDK1.8，SpringBoot2.3.5.RELEASE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br><br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;<br>           &lt;artifactId&gt;httpclient&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">4.5</span><span class="hljs-number">.13</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>       <br>       &lt;dependency&gt;<br>           &lt;groupId&gt;org.json&lt;/groupId&gt;<br>           &lt;artifactId&gt;json&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">20200518</span>&lt;/version&gt;<br>       &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><p>yaml文件：<br>因为所需要这4个参数，所以直接配置在yaml文件中，使用时直接在类中直接通过@Value注解引入即可</p><ol><li>appid：</li><li>appsecret：</li><li>scope: snsapi_login</li><li>callBack：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">80</span><br><br>spring:<br>  thymeleaf:<br>    prefix: classpath:/templates/<br>    suffix: .html<br>  mvc:<br>    <span class="hljs-keyword">static</span>-path-pattern: classpath:/<span class="hljs-keyword">static</span>/<br><br>wechat:<br>  #微信接口的AppID：<br>  appid: <br>  #微信接口的AppSecret：<br>  appsecret: <br>  #应用授权作用域(网站应用目前的固定写法就是snsapi_login)<br>  scope: snsapi_login<br>  #扫码之后的回调地址：<br>  callBack: http:<span class="hljs-comment">//wechatlogin.free.idcfengye.com/callBack</span><br></code></pre></td></tr></table></figure><p>这里需要一个工具类HttpRequestUtils ，用于发起http请求。可以将代码直接复制过去用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.login.utils;<br><br><span class="hljs-keyword">import</span> org.apache.http.client.config.RequestConfig;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpGet;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/11/21  20:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpRequestUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CloseableHttpClient httpClient;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">PoolingHttpClientConnectionManager</span> <span class="hljs-variable">cm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolingHttpClientConnectionManager</span>();<br>        cm.setMaxTotal(<span class="hljs-number">100</span>);<br>        cm.setDefaultMaxPerRoute(<span class="hljs-number">20</span>);<br>        cm.setDefaultMaxPerRoute(<span class="hljs-number">50</span>);<br>        httpClient = HttpClients.custom().setConnectionManager(cm).build();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">httpGet</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br>            <span class="hljs-type">RequestConfig</span> <span class="hljs-variable">requestConfig</span> <span class="hljs-operator">=</span> RequestConfig.custom().setConnectTimeout(<span class="hljs-number">30000</span>).setConnectionRequestTimeout(<span class="hljs-number">30000</span>).setSocketTimeout(<span class="hljs-number">30000</span>).build();<br>            httpGet.setConfig(requestConfig);<br>            httpGet.setConfig(requestConfig);<br>            httpGet.addHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span>);<br>            httpGet.setHeader(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>            response = httpClient.execute(httpGet);<br>            in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(response.getEntity().getContent()));<br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">NL</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>);<br>            <span class="hljs-keyword">while</span> ((line = in.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                sb.append(line + NL);<br>            &#125;<br>            in.close();<br>            result = sb.toString();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != response) &#123;<br>                    response.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-后端Controller接口："><a href="#3-后端Controller接口：" class="headerlink" title="3.后端Controller接口："></a>3.后端Controller接口：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.login.controller;<br><br><span class="hljs-keyword">import</span> com.login.utils.HttpRequestUtils;<br><span class="hljs-keyword">import</span> org.json.JSONObject;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/11/21  21:32</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">weChatController</span> &#123;<br><br>    <span class="hljs-meta">@Value(value = &quot;$&#123;wechat.appid&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appid;<br><br>    <span class="hljs-meta">@Value(value = &quot;$&#123;wechat.appsecret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appsecret;<br><br>    <span class="hljs-meta">@Value(value = &quot;$&#123;wechat.scope&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String scope;<br><br>    <span class="hljs-meta">@Value(value = &quot;$&#123;wechat.callback&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String callBack;<br><br><br>    <span class="hljs-comment">/*生产二维码链接进行扫码登录*/</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(Model model)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">oauthUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://open.weixin.qq.com/connect/qrconnect?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">redirect_uri</span> <span class="hljs-operator">=</span> URLEncoder.encode(callBack, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        oauthUrl = oauthUrl.replace(<span class="hljs-string">&quot;APPID&quot;</span>, appid).replace(<span class="hljs-string">&quot;REDIRECT_URI&quot;</span>, redirect_uri).replace(<span class="hljs-string">&quot;SCOPE&quot;</span>, scope);<br>        model.addAttribute(<span class="hljs-string">&quot;oauthUrl&quot;</span>, oauthUrl);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/*生成自定义二维码*/</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/custom&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">custom</span><span class="hljs-params">(Model model)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">redirect_uri</span> <span class="hljs-operator">=</span> URLEncoder.encode(callBack, <span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>        model.addAttribute(<span class="hljs-string">&quot;appid&quot;</span>, appid);<br>        model.addAttribute(<span class="hljs-string">&quot;scope&quot;</span>, scope);<br>        model.addAttribute(<span class="hljs-string">&quot;redirect_uri&quot;</span>, redirect_uri);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;custom&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/*回调方法*/</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/callBack&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">callBack</span><span class="hljs-params">(String code,Map&lt;String,Object&gt; map)</span> &#123;<br><br>        <span class="hljs-comment">//1.通过code获取access_token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code&quot;</span>;<br>        url = url.replace(<span class="hljs-string">&quot;APPID&quot;</span>, appid).replace(<span class="hljs-string">&quot;SECRET&quot;</span>, appsecret).replace(<span class="hljs-string">&quot;CODE&quot;</span>, code);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tokenInfoStr</span> <span class="hljs-operator">=</span> HttpRequestUtils.httpGet(url);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">tokenInfoObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(tokenInfoStr);<br><br>        <span class="hljs-comment">//2.通过access_token和openid获取用户信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userInfoUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&quot;</span>;<br>        userInfoUrl = userInfoUrl.replace(<span class="hljs-string">&quot;ACCESS_TOKEN&quot;</span>, tokenInfoObject.getString(<span class="hljs-string">&quot;access_token&quot;</span>)).replace(<span class="hljs-string">&quot;OPENID&quot;</span>, tokenInfoObject.getString(<span class="hljs-string">&quot;openid&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userInfoStr</span> <span class="hljs-operator">=</span> HttpRequestUtils.httpGet(userInfoUrl);<br><br>        map.put(<span class="hljs-string">&quot;token&quot;</span>, tokenInfoStr);<br><br>        <span class="hljs-comment">/*转为JSON*/</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(userInfoStr);<br><br>        <span class="hljs-comment">/*只获取openid并返回,openid是微信用户的唯一标识,userInfoStr里面有用户的全部信息*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">openid</span> <span class="hljs-operator">=</span> user.getString(<span class="hljs-string">&quot;openid&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;openid&quot;</span>, openid);<br><br>        <span class="hljs-comment">/*获取用户头像url*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">headimgurl</span> <span class="hljs-operator">=</span> user.getString(<span class="hljs-string">&quot;headimgurl&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;headimgurl&quot;</span>, headimgurl);<br><br>        <span class="hljs-comment">/*获取用户昵称*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nickname</span> <span class="hljs-operator">=</span> user.getString(<span class="hljs-string">&quot;nickname&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;nickname&quot;</span>, nickname);<br><br>        <span class="hljs-comment">/*获取用户性别*/</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> user.getInt(<span class="hljs-string">&quot;sex&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;sex&quot;</span>, sex);<br><br>        <span class="hljs-comment">/*获取用户国家*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">country</span> <span class="hljs-operator">=</span> user.getString(<span class="hljs-string">&quot;country&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;country&quot;</span>, country);<br><br>        <span class="hljs-comment">/*获取用户省份*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">province</span> <span class="hljs-operator">=</span> user.getString(<span class="hljs-string">&quot;province&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;province&quot;</span>, province);<br><br>        <span class="hljs-comment">/*获取用户城市*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> user.getString(<span class="hljs-string">&quot;city&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;city&quot;</span>, city);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;callBack&quot;</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-HTML页面代码："><a href="#4-HTML页面代码：" class="headerlink" title="4.HTML页面代码："></a>4.HTML页面代码：</h2><p>1.点击生成二维码页面：我这里是嵌入了一张微信的Logo图片，点击a标签跳转   weChatLogin.html</p><p><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> xmlns:th=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;wechat登录&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;a th:href=<span class="hljs-string">&quot;$&#123;oauthUrl&#125;&quot;</span>&gt;<br>        &lt;img src=<span class="hljs-string">&quot;../static/wechat_logo.png&quot;</span> alt=<span class="hljs-string">&quot;微信登录&quot;</span>&gt;<br>    &lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>2.回调方法后返回用户信息页面 callBack.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> xmlns:th=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;授权结果页&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>        &lt;h2&gt;用戶,授权成功!&lt;/h2&gt;&lt;br&gt;<br>        &lt;h3&gt;通过code获取access_token 结果:&lt;/h3&gt;<br>        &lt;p th:text=<span class="hljs-string">&quot;$&#123;token&#125;&quot;</span>&gt;&lt;/p&gt;<br><br>        &lt;h3&gt;通过access_token获取用户信息 结果:&lt;/h3&gt;<br>        头像：&lt;img th:src=<span class="hljs-string">&quot;$&#123;headimgurl&#125;&quot;</span> alt=<span class="hljs-string">&quot;用户头像&quot;</span>&gt;&lt;br/&gt;<br>        openid：&lt;span th:text=<span class="hljs-string">&quot;$&#123;openid&#125;&quot;</span>&gt;&lt;/span&gt;&lt;br/&gt;<br>        昵称：&lt;span th:text=<span class="hljs-string">&quot;$&#123;nickname&#125;&quot;</span>&gt;&lt;/span&gt;&lt;br/&gt;<br>        性别：&lt;span th:text=<span class="hljs-string">&quot;$&#123;sex&#125;&quot;</span>&gt;&lt;/span&gt;&lt;br/&gt;<br>        国家：&lt;span th:text=<span class="hljs-string">&quot;$&#123;country&#125;&quot;</span>&gt;&lt;/span&gt;&lt;br/&gt;<br>        省份：&lt;span th:text=<span class="hljs-string">&quot;$&#123;province&#125;&quot;</span>&gt;&lt;/span&gt;&lt;br/&gt;<br>        城市：&lt;span th:text=<span class="hljs-string">&quot;$&#123;city&#125;&quot;</span>&gt;&lt;/span&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>3.内嵌(自定义二维码)custom.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> xmlns:th=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;内嵌(自定义二维码)&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;script src=<span class="hljs-string">&quot;http://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;body&gt;<br><br>&lt;center&gt;&lt;div id=<span class="hljs-string">&quot;login_container&quot;</span>&gt;&lt;/div&gt;&lt;/center&gt;<br>&lt;script th:inline=<span class="hljs-string">&quot;javascript&quot;</span>&gt;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WxLogin</span>(&#123;<br>        self_redirect:<span class="hljs-literal">true</span>,<br>        id:<span class="hljs-string">&quot;login_container&quot;</span>,<br>        appid: [[$&#123;appid&#125;]],<br>        scope: [[$&#123;scope&#125;]],<br>        redirect_uri: [[$&#123;redirect_uri&#125;]],<br>        state: <span class="hljs-string">&quot;&quot;</span>,<br>        style: <span class="hljs-string">&quot;&quot;</span>,<br>        href: <span class="hljs-string">&quot;&quot;</span><br>    &#125;);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="5-测试结果："><a href="#5-测试结果：" class="headerlink" title="5.测试结果："></a>5.测试结果：</h2><p>使用内网穿透的域名来访问接口哦，因为已经在公网映射到本地项目了</p><ol><li><p>访问login接口，点击logo图标<br><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/7.png"></p></li><li><p>扫码测试</p></li></ol><p><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/8.png"></p><ol start="4"><li>授权后调用回调方法，拿到用户信息放到页面展示<br>注：openid是微信用户的唯一id</li></ol><p><img src="/article_img/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/9.png"></p><h2 id="6-补充说明："><a href="#6-补充说明：" class="headerlink" title="6.补充说明："></a>6.补充说明：</h2><p>到这里呢微信登录SpringBoot前后端不分离就差不多了，在这里想给大家提一下如果是前后端分离怎么做？</p><p>1.回调地址一般是网站的主页对吧，例如：<a href="http://www.abc.com/">www.abc.com</a><br>2.前端按钮通过appid和回调地址生成二维码<br>3.用户扫码授权之后，微信接口会再通过回调地址重定向回主页 <a href="http://www.abc.com.在这是会有一个名为code的参数/">www.abc.com。在这是会有一个名为code的参数</a><br>4.此时前端拥有code之后，传到后端接口方法中去，后端通过code获取用户信息。再返回前端</p><p>总结为一句话：1.<a href="http://www.adc.com主页生成二维码,2.扫码授权登录,3.拿code参数去获取用户信息/">www.adc.com主页生成二维码，2.扫码授权登录，3.拿code参数去获取用户信息</a></p><center>如果我们有再三思考的机会，几乎没有一件事情是不能被简化的。</center>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信</tag>
      
      <tag>扫码登录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Sunny-Ngrok进行内网穿透</title>
    <link href="/2020/11/20/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2020/11/20/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Sunny-Ngrok进行内网穿透"><a href="#使用Sunny-Ngrok进行内网穿透" class="headerlink" title="使用Sunny-Ngrok进行内网穿透"></a>使用Sunny-Ngrok进行内网穿透</h1><p>为什么使用Sunny-Ngrok？</p><p>提供免费内网穿透服务，免费服务器支持绑定自定义域名<br>管理内网服务器，内网web进行演示<br>快速开发微信程序和第三方支付平台调试<br>本地WEB外网访问、本地开发微信、TCP端口转发<br>本站新增FRP服务器，基于 FRP 实现https、udp转发<br>无需任何配置，下载客户端之后直接一条命令让外网访问您的内网不再是距离！</p><p>简单来说：就是在外网可以直接访问本地的项目。在开发时各种调试会更方便，在测试功能时就不需要经过服务器去麻烦了。</p><h2 id="1-进入-Ngrok官网-先注册账号并登录："><a href="#1-进入-Ngrok官网-先注册账号并登录：" class="headerlink" title="1.进入 Ngrok官网 先注册账号并登录："></a>1.进入 <a href="http://www.ngrok.cc/">Ngrok官网</a> 先注册账号并登录：</h2><p><strong>这里注册登录就不用多说了吧。</strong></p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/1.png"></p><p><strong>登录成功过后在页面上点击 1.隧道管理、2.开通隧道、3.选择购买的服务器(选择一个免费的就可以了，不过访问速度可能会很慢)</strong></p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/2.png"></p><p><strong>选择服务器之后就要填4个必要信息：</strong></p><ol><li>隧道协议：比如常用的http与https，一般选http就行了哈，https需要绑定域名和ssl证书</li><li>隧道名称：给隧道取个名字</li><li>前置域名：比如<a href="http://www.xxx.com,这个www就是前置域名.相当于给域名设置一个前缀/">www.xxx.com，这个www就是前置域名。相当于给域名设置一个前缀</a></li><li>本地端口：决定需要映射的本地服务端口，比如 tomcat 的8080</li></ol><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/3.png"></p><p><strong>订单成功后，来到隧道管理就可以看到我们刚刚所填写的所有信息了，并且代表隧道购买成功。</strong><br><strong>这里有几个信息是非常重要的(后面马上会用到)</strong></p><ol><li>隧道id：在本地打开Sunny-Ngrok 客户端就需要此 id 去进行映射</li><li>赠送域名：映射成功后，外网访问本地服务的地址</li></ol><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/4.png"></p><h2 id="2-下载-Sunny-Ngrok-客户端-有不同的系统版本"><a href="#2-下载-Sunny-Ngrok-客户端-有不同的系统版本" class="headerlink" title="2.下载 Sunny-Ngrok 客户端(有不同的系统版本)"></a>2.下载 Sunny-Ngrok 客户端(有不同的系统版本)</h2><p>在刚刚的隧道管理下点击下载Sunny-Ngrok客户端，在官网主页 <a href="http://www.ngrok.cc/">Ngrok官网</a> 也有提供下载哈。</p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/5.png"></p><p><strong>本次演示使用win10，所以就下载win10的版本(对应32还是64自行选择)</strong></p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/6.png"></p><p><strong>找到下载的客户端压缩包，1.找个地方解压出来。2.进入windows_amd64 文件夹 3.选择 Sunny-Ngrok启动工具.bat 打开</strong></p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/7.png"></p><p><strong>打开客户端后，填入隧道id</strong></p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/8.png"></p><p><strong>连接成功后的界面：成功后可直接输入Ngrok赠送的域名在外网直接访问本地的服务了 (关闭后是无法访问的哦)</strong></p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/9.png"></p><h2 id="3-编写SpringBoot项目进行测试"><a href="#3-编写SpringBoot项目进行测试" class="headerlink" title="3.编写SpringBoot项目进行测试"></a>3.编写SpringBoot项目进行测试</h2><p><strong>可以使用SpringBoot + thymeleaf 编写一个访问路径和成功页面进行测试</strong></p><p>Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(path = &quot;/ngrok&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ngrok&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>yaml文件：</p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/10.png"></p><p>成功页面：</p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/11.png"></p><h2 id="4-外网访问本地服务"><a href="#4-外网访问本地服务" class="headerlink" title="4.外网访问本地服务"></a>4.外网访问本地服务</h2><p><strong>启动SpringBoot项目</strong></p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/12.png"></p><p><strong>在浏览器中输入 Ngrok 赠送域名外网直接访问本地服务接口</strong><br><strong>注：此域名是开通隧道后Ngrok赠送的域名，前面已经提到过了</strong><br><strong>注：在使用内网穿透时本地的 Ngrok 客户端是不能关闭的</strong></p><p><img src="/article_img/%E4%BD%BF%E7%94%A8Sunny-Ngrok%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/13.png"></p><center>但俗话说，笨人想事情，跟休息没两样。</center>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ngrok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>银行家舍入法（四舍六入）</title>
    <link href="/2020/11/19/%E9%93%B6%E8%A1%8C%E5%AE%B6%E8%88%8D%E5%85%A5%E6%B3%95%EF%BC%88%E5%9B%9B%E8%88%8D%E5%85%AD%E5%85%A5%EF%BC%89/"/>
    <url>/2020/11/19/%E9%93%B6%E8%A1%8C%E5%AE%B6%E8%88%8D%E5%85%A5%E6%B3%95%EF%BC%88%E5%9B%9B%E8%88%8D%E5%85%AD%E5%85%A5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="银行家舍入法："><a href="#银行家舍入法：" class="headerlink" title="银行家舍入法："></a>银行家舍入法：</h1><p>生活中常见的计算方法就是四舍五入，但是银行家舍入法是四舍六入。五后面有非0的数字将直接向前进位，没有数字的情况下还要看前一位是偶数还是奇数。偶数舍去，奇数进位。</p><p>总结为一句话就是：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一</p><p>如图所示：<br><img src="/article_img/%E9%93%B6%E8%A1%8C%E5%AE%B6%E8%88%8D%E5%85%A5%E6%B3%95/1.png"><br>其实大多数编程语言在浮点数的运算上或者保留小数位上都是使用的银行家舍入法，例如：Java</p><center>  即使你改变了过程，也改不了结果 </center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于DecimalFormat类的数字格式化</title>
    <link href="/2020/11/18/%E5%85%B3%E4%BA%8EDecimalFormat%E7%B1%BB%E7%9A%84%E6%95%B0%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/2020/11/18/%E5%85%B3%E4%BA%8EDecimalFormat%E7%B1%BB%E7%9A%84%E6%95%B0%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="关于DecimalFormat类的数字格式化"><a href="#关于DecimalFormat类的数字格式化" class="headerlink" title="关于DecimalFormat类的数字格式化"></a>关于DecimalFormat类的数字格式化</h1><p>当我们遇到小数时，必定会设置保留小数的位数，也可能会涉及数字的格式转换<br>那么在Java中肯定也有这样的一个类，就是DecimalFormat类能帮助我们方便快捷的解决此类小数格式的问题</p><blockquote><p><strong>DecimalFormat 类路径 java.text.DecimalFormat</strong><br><strong>DecimalFormat 的父类也是抽象类NumberFormat 类路径 java.text.NumberFormat 很有意思的是 NumberFormat 的父类是 Format</strong><br><strong>Format应该很熟悉吧，说熟悉的原因是因为他的子类 DateFormat 与 SimpleDateFormat 在日期格式的转换上经常使用到的</strong><br><strong>DecimalFormat ：用于格式化十进制数字</strong></p></blockquote><p>先大概了解下 DecimalFormat 是如何进行格式化的？</p><h2 id="基本格式化："><a href="#基本格式化：" class="headerlink" title="基本格式化："></a>基本格式化：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*定义一个浮点型变量 Π*/</span><br><span class="hljs-type">double</span> <span class="hljs-variable">pai</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926535</span>;<span class="hljs-comment">//圆周率</span><br><br><span class="hljs-comment">/*1.创建DecimalFormat对象</span><br><span class="hljs-comment">(在创建对象时就可以填入特殊符号格式,也可以使用applyPattern(String pattern)方法填入)</span><br><span class="hljs-comment">DecimalFormat decimalFormat = new DecimalFormat(&quot;0.00&quot;);就可以直接省去第二步的代码*/</span><br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">decimalFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>();<br><br><span class="hljs-comment">/*2.定制格式</span><br><span class="hljs-comment">(参数就是根据DecimalFormat中的多种特殊符号来进行格式化)*/</span><br>decimalFormat.applyPattern(<span class="hljs-string">&quot;0.00&quot;</span>);<span class="hljs-comment">//比如这里的 格式：&quot;0&quot; 就代表只取整数部分</span><br><br><span class="hljs-comment">/*3.传入值并转换数字(format是个重载方法)单个参数返回String,多个参数返回StringBuffer*/</span><br><span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> decimalFormat.format(pai);<br><br><span class="hljs-comment">/*4.打印输出(保留两位小数 = 3.14)*/</span><br>System.out.println(format);<br><br><br><span class="hljs-comment">/*一行代码搞定：链式编程(节省代码量) 格式：&quot;0.00&quot; 代表取整数并保留两位小数*/</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0.00&quot;</span>).format(pai));<br></code></pre></td></tr></table></figure><p><font color= red>上面介绍了如何对数字进行简单的格式化，下面了解 DecimalFormat 类中的几种特殊符号，不同符号代表不同的格式</font></p><h2 id="不同特殊符号代码的格式："><a href="#不同特殊符号代码的格式：" class="headerlink" title="不同特殊符号代码的格式："></a>不同特殊符号代码的格式：</h2><p>先了解下在格式化中会用到的特殊符号（可以参考Java官方文档）<a href="https://download.oracle.com/technetwork/java/javase/6/docs/zh/api/java/text/DecimalFormat.html">DecimalFormat 类官方中文API</a> 下图是从官方文档截的图：</p><p><img src="/article_img/%E5%85%B3%E4%BA%8EDecimalFormat%E7%B1%BB%E7%9A%84%E6%95%B0%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%8C%96/1.png"></p><h2 id="不同符号的使用："><a href="#不同符号的使用：" class="headerlink" title="不同符号的使用："></a>不同符号的使用：</h2><p>注：下面为了方便测试多种格式，这里就直接链式编程简化为一行代码后输出结果<br>给大家举一些不同格式的例子：</p><ol><li>#和0配合使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment">0</span><br><span class="hljs-comment">整数位的0：取所有整数位,多余位数填充0</span><br><span class="hljs-comment">   小数位的0：保留小数的位数,是几个0就保留几位,多余位数也会填充0</span><br><span class="hljs-comment">#.##</span><br><span class="hljs-comment">整数位的#：取全部整数部分,多余的#不会填充0(所以写一个#就行了)</span><br><span class="hljs-comment">小数位的#：代表保留小数多少位,多余的#也不会填充0</span><br><span class="hljs-comment">作用与0相同,但是多余位数不会填充0</span><br><span class="hljs-comment">#.##%</span><br><span class="hljs-comment">将数字 * 100 然后取整数部分并保留两位小数</span><br><span class="hljs-comment">3.1415926 * 100 = 314.15926 格式化后为 314.16(舍入的小数部分会四舍五入)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">double</span> <span class="hljs-variable">pai</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<span class="hljs-comment">//圆周率</span><br><br><span class="hljs-comment">//取一位整数</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0&quot;</span>).format(pai));<span class="hljs-comment">//3</span><br><span class="hljs-comment">//取一位整数和两位小数</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0.00&quot;</span>).format(pai));<span class="hljs-comment">//3.14</span><br><span class="hljs-comment">//取两位整数和三位小数，整数不足部分以0填补。</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;00.000&quot;</span>).format(pai));<span class="hljs-comment">// 03.142</span><br><span class="hljs-comment">//取所有整数部分</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;#&quot;</span>).format(pai));<span class="hljs-comment">//3</span><br><span class="hljs-comment">//以百分比方式计数，并取两位小数</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;#.##%&quot;</span>).format(pai));<span class="hljs-comment">//314.16%</span><br></code></pre></td></tr></table></figure><ol start="2"><li>科学计数法 E<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456789.1234</span>;<br><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0E0&quot;</span>).format(number));<span class="hljs-comment">//1E8</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0E00&quot;</span>).format(number));<span class="hljs-comment">//1E08</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;#E0&quot;</span>).format(number));<span class="hljs-comment">//.1E9</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;##E0&quot;</span>).format(number));<span class="hljs-comment">//1.2E8</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;###E0&quot;</span>).format(number));<span class="hljs-comment">//123E6</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;####E0&quot;</span>).format(number));<span class="hljs-comment">//1.235E8</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;#####E0&quot;</span>).format(number));<span class="hljs-comment">//1234.6E5</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;######E0&quot;</span>).format(number));<span class="hljs-comment">//123.457E6</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;#######E0&quot;</span>).format(number));<span class="hljs-comment">//12.34568E7</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;########E0&quot;</span>).format(number));<span class="hljs-comment">//1.2345679E8</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;#########E0&quot;</span>).format(number));<span class="hljs-comment">//123456789E0</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;##########E0&quot;</span>).format(number));<span class="hljs-comment">//123456789.1E0</span><br></code></pre></td></tr></table></figure></li><li>分组分隔符和减号</li></ol><ul><li>分隔符 ，<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456789</span>;<br><br><span class="hljs-comment">//每两位以逗号,进行分隔</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;,##&quot;</span>).format(number));<span class="hljs-comment">//1,23,45,67,89        </span><br><br><span class="hljs-comment">//每三位以逗号,进行分隔</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;,###&quot;</span>).format(number));<span class="hljs-comment">//123,,456,789</span><br><br><span class="hljs-comment">//每四位以逗号进行分隔</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;,####&quot;</span>).format(number));<span class="hljs-comment">//1,2345,6789</span><br><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0,00&quot;</span>).format(number));<span class="hljs-comment">//12,99,79,24,58</span><br></code></pre></td></tr></table></figure></li><li>减号 -<br>代表输出负数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<br><br><span class="hljs-comment">/*多余的整数位填充0，并保留两位小数点*/</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;-00.00&quot;</span>).format(number));<span class="hljs-comment">//结果：-03.14</span><br></code></pre></td></tr></table></figure><p>4.关于前缀、后缀</p><ul><li>% 将数字乘以100（放大100倍）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.05731</span>;<br><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0.00%&quot;</span>).format(number));<span class="hljs-comment">//5.73%</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0%.00&quot;</span>).format(number));<span class="hljs-comment">//5.73%</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;%0.00&quot;</span>).format(number));<span class="hljs-comment">//%5.73</span><br><br><span class="hljs-comment">/*0.05731 乘以 100 = 5.731 取一位整数并保留两位小数,但是如果有多余的整数位或小数位会被填充为0, % 可作为前缀 %5.73 也可做为后缀 5.73%*/</span><br></code></pre></td></tr></table></figure><ul><li>\u2030 将数字乘以1000（放大1000倍）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.05731</span>;<br><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0.00\u2030&quot;</span>).format(number));<span class="hljs-comment">//57.31‰</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0.0\u20300&quot;</span>).format(number));<span class="hljs-comment">//57.31‰</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;\u20300.00&quot;</span>).format(number));<span class="hljs-comment">//‰57.31</span><br><br><span class="hljs-comment">/*0.05731 乘以 1000 = 57.31 取一位整数并保留两位小数,如果有多余的整数位或小数位会被填充为0, ‰ 可作为前缀 ‰57.71 也可做为后缀 57.31‰*/</span><br></code></pre></td></tr></table></figure><ul><li>¤(\u00A4) 本地化货币符号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">8361.123</span>;<br><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;,000.00¤&quot;</span>).format(number));<span class="hljs-comment">//8,361.12￥</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;,000.¤00&quot;</span>).format(number));<span class="hljs-comment">//8,361.12￥</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;¤,000.00&quot;</span>).format(number));<span class="hljs-comment">//￥8,361.12</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;,00¤0.¤00&quot;</span>).format(number));<span class="hljs-comment">//8,361.12￥￥</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;¤,000.¤00&quot;</span>).format(number));<span class="hljs-comment">//￥8,361.12￥</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;,000.00¤¤&quot;</span>).format(number));<span class="hljs-comment">//8,361.12CNY</span><br><br><span class="hljs-comment">/*CNY： 人民币*/</span><br></code></pre></td></tr></table></figure><ul><li>用于引用特殊的字符(自定义字符)，作为前缀或后缀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.73</span>;<br><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;&#x27;#&#x27;0.00&quot;</span>).format(number));<span class="hljs-comment">//#9.73</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;&amp;0.00&quot;</span>).format(number));<span class="hljs-comment">//&amp;9.73</span><br><span class="hljs-comment">//使用&#x27;本身作为前缀或后缀 注意是两个 &#x27;</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;&#x27;&#x27;0.00&quot;</span>).format(number));<span class="hljs-comment">//&#x27;9.73</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;&#x27;^ _ ^&#x27;0.00&quot;</span>).format(number));<span class="hljs-comment">//^ _ ^9.73</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注：DecimalFormat 提供 RoundingMode 中定义的舍入方式进行四舍五入然后格式。默认情况下，它使用 RoundingMode.HALF_EVEN</strong><br>舍入方式在上一篇中已经讲到 <a href="https://blog.csdn.net/weixin_45377770/article/details/109747186">关于BigDecimal类的常用方法与的舍入方式</a> 其中 RoundingMode.HALF_EVEN 方式使用的是银行家舍入法<br>银行家舍入法：即四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一(可以去网上了解下)</p></blockquote><center>  大多数人如果能给更多事情一个机会的话，他们的问题都能解决 </center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于BigDecimal类的常用方法与的舍入方式</title>
    <link href="/2020/11/17/%E5%85%B3%E4%BA%8EBigDecimal%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B8%8E%E7%9A%84%E8%88%8D%E5%85%A5%E6%96%B9%E5%BC%8F(%E7%94%A8%E4%BA%8E%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%9A%84%E6%B5%AE%E7%82%B9%E8%BF%90%E7%AE%97)/"/>
    <url>/2020/11/17/%E5%85%B3%E4%BA%8EBigDecimal%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B8%8E%E7%9A%84%E8%88%8D%E5%85%A5%E6%96%B9%E5%BC%8F(%E7%94%A8%E4%BA%8E%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%9A%84%E6%B5%AE%E7%82%B9%E8%BF%90%E7%AE%97)/</url>
    
    <content type="html"><![CDATA[<h1 id="关于BigDecimal类的常用方法与的舍入方式-用于高精度的浮点运算"><a href="#关于BigDecimal类的常用方法与的舍入方式-用于高精度的浮点运算" class="headerlink" title="关于BigDecimal类的常用方法与的舍入方式(用于高精度的浮点运算)"></a>关于BigDecimal类的常用方法与的舍入方式(用于高精度的浮点运算)</h1><blockquote><p><strong>在实际开发中，难免会遇到数据值的计算，关于小数的两种浮点型(float，double)，也就是单精度与双精度。</strong><br><strong>那么就需要一个类帮我们解决一些问题，下面介绍两种浮点型的区别和BigDecimal类的使用</strong></p></blockquote><h2 id="两种类型的区别："><a href="#两种类型的区别：" class="headerlink" title="两种类型的区别："></a>两种类型的区别：</h2><p> 1.在内存中占有的字节数：单精度是4字节，而双精度是8字节<br> 2. 有效数字位数：单精度有效位是8位，双精度是16位<br> 3. 数值取值范围：单精度表示范围 -3.40E+38<del>3.40E+38，双精度表示范围 -1.79E+308</del>-1.79E+308<br> 4. 在程序中处理速度不同：一般来说，CPU处理单精度浮点数的速度比处理双精度浮点数快（网上是这样说，还没有感受过）<br> 5. 两者在使用定义时：如果定义是不声明，默认的小数类型就是double，如果要使用float就必须进行强制转换<br> 6. 例如：float  a&#x3D;1.5; 会编译报错，正确的写法 float a &#x3D; (float)1.5;或者float a &#x3D; 1.5f;（f或F都可以不区分大小写）</p><h2 id="BigDecimal类："><a href="#BigDecimal类：" class="headerlink" title="BigDecimal类："></a>BigDecimal类：</h2><blockquote><p><strong>先介绍下 BigDecimal 类的常用方法</strong><br><strong>BigDecimal 类路径：java.math.BigDecimal，BigDecimal 的父类是一个抽象类Number  类路径 java.lang.Number</strong><br><strong>比如很多熟悉的基本类型包装类：Byte、Long、Integer都来继承自此类</strong><br><strong>作用：用于高精度的浮点运算</strong></p></blockquote><ol><li><p>创建 BigDecimal类（构造方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-type">int</span>)        创建一个具有参数所指定整数值的对象。<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-type">double</span>)     创建一个具有参数所指定双精度值的对象。<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-type">long</span>)       创建一个具有参数所指定长整数值的对象。<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(String)     创建一个具有参数所指定以字符串表示的数值的对象。<br>注：在创建BigDecimal对象时,如果直接传入的是小数类型的值,有可能会造成精度损失,推荐传入String类型<br></code></pre></td></tr></table></figure></li><li><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>BigDecimal <span class="hljs-title function_">add</span><span class="hljs-params">(BigDecimal value)</span>;加法，求两个BigDecimal类型数据的和。<br><span class="hljs-number">2.</span>BigDecimal <span class="hljs-title function_">subtract</span><span class="hljs-params">(BigDecimal value)</span>;减法，求两个BigDecimal类型数据的差。<br><span class="hljs-number">3.</span>BigDecimal <span class="hljs-title function_">multiply</span><span class="hljs-params">(BigDecimal value)</span>;乘法，求两个BigDecimal类型数据的积。<br><span class="hljs-number">4.</span>BigDecimal <span class="hljs-title function_">divide</span><span class="hljs-params">(BigDecimal divisor)</span>;除法，求两个BigDecimal类型数据的商。<br><span class="hljs-number">5.</span>BigDecimal <span class="hljs-title function_">remainder</span><span class="hljs-params">(BigDecimal divisor)</span>;求余数，求BigDecimal类型数据除以divisor的余数。<br><span class="hljs-number">6.</span>BigDecimal <span class="hljs-title function_">max</span><span class="hljs-params">(BigDecimal value)</span>;最大数，求两个BigDecimal类型数据的最大值。<br><span class="hljs-number">7.</span>BigDecimal <span class="hljs-title function_">min</span><span class="hljs-params">(BigDecimal value)</span>;最小数，求两个BigDecimal类型数据的最小值。<br><span class="hljs-number">8.</span>BigDecimal <span class="hljs-title function_">abs</span><span class="hljs-params">()</span>;绝对值，求BigDecimal类型数据的绝对值。<br><span class="hljs-number">9.</span>BigDecimal <span class="hljs-title function_">negate</span><span class="hljs-params">()</span>;相反数，求BigDecimal类型数据的相反数。<br><span class="hljs-number">10.</span>BigDecimal <span class="hljs-title function_">setScale</span><span class="hljs-params">(<span class="hljs-type">int</span> newScale, <span class="hljs-type">int</span> roundingMode)</span>; 按指定舍入模式保留小数位数<br></code></pre></td></tr></table></figure></li></ol><p>怎么用？下面给大家举个加法的例子 BigDecimal add(BigDecimal value);：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decimal</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">/*1.第一个BigDecimal的小数值 1.57361*/</span><br>     <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.57361&quot;</span>);<br><br>     <span class="hljs-comment">/*2.第二个BigDecimal的小数值 1.5*/</span><br>     <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.5&quot;</span>);<br><br>     <span class="hljs-comment">/*使用第一个BigDecimal下的add(BigDecimal value)方法 去加上bigDecimal2的数值</span><br><span class="hljs-comment">      * 这里就相当于 1.5361 + 1.5*/</span><br>     <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> bigDecimal.add(bigDecimal2);<br><br>     <span class="hljs-comment">/*结果：3.07361*/</span><br>     System.out.println(add);<br><br>     <span class="hljs-comment">/*如果还要舍弃后面的多余小数,比如说：只保留两位小数点</span><br><span class="hljs-comment">     * 参数一：设置需要保留小数的位数</span><br><span class="hljs-comment">     参数二：舍入模式(8种舍入方式下面有详细介绍)*/</span><br>     <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">decimal</span> <span class="hljs-operator">=</span> add.setScale(<span class="hljs-number">2</span>, BigDecimal.ROUND_UP);<br><br>     <span class="hljs-comment">/*输出舍入后的值：3.08 (舍入模式会间接影响结果)</span><br><span class="hljs-comment">     比如这里结果其实是3.07,使用的舍入方式向前进了一位*/</span><br>     System.out.println(decimal);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>获取 BigDecimal 对象中不同返回值类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>      将BigDecimal对象的数值转换成字符串。<br><span class="hljs-type">double</span> <span class="hljs-title function_">doubleValue</span><span class="hljs-params">()</span>   将BigDecimal对象中的值以双精度数返回。<br><span class="hljs-type">float</span> <span class="hljs-title function_">floatValue</span><span class="hljs-params">()</span>     将BigDecimal对象中的值以单精度数返回。<br><span class="hljs-type">long</span> <span class="hljs-title function_">longValue</span><span class="hljs-params">()</span>       将BigDecimal对象中的值以长整数返回。<br><span class="hljs-type">int</span> <span class="hljs-title function_">intValue</span><span class="hljs-params">()</span>         将BigDecimal对象中的值以整数返回。<br></code></pre></td></tr></table></figure></li></ol><h2 id="BigDecimal类的8中不同的舍入方式："><a href="#BigDecimal类的8中不同的舍入方式：" class="headerlink" title="BigDecimal类的8中不同的舍入方式："></a>BigDecimal类的8中不同的舍入方式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">假设现在有一个浮点型小数：<span class="hljs-number">1.375411</span> 看看使用下面不同的舍入方式会有什么样的结果？<br><br><span class="hljs-number">1.</span>BigDecimal.ROUND_UP       常量值 = <span class="hljs-number">0</span> (作用：在保留小数后直接去掉多余的位数)<br>案例：<span class="hljs-number">1.376411</span> ➡ <span class="hljs-number">1.376</span><br><br><span class="hljs-number">2.</span>BigDecimal.ROUND_DOWN     常量值 = <span class="hljs-number">1</span> (作用：在保留小数后向前进一位)<br>案例：<span class="hljs-number">1.376411</span> ➡ <span class="hljs-number">1.377</span><br><br><span class="hljs-number">3.</span>BigDecimal.ROUND_CEILING  常量值 = <span class="hljs-number">2</span> (作用：如果是正数相当于ROUND_DOWN,负数相当于ROUND_UP)<br><br><span class="hljs-number">4.</span>BigDecimal.ROUND_FLOOR    常量值 = <span class="hljs-number">3</span> (作用：如果是正数相当于ROUND_DOWN,ROUND_HALF_UP)<br><br><span class="hljs-number">5.</span>BigDecimal.ROUND_HALF_UP  常量值 = <span class="hljs-number">4</span> (作用：在舍弃部分左边的数字四舍五入(若舍入部分&gt;=<span class="hljs-number">5</span>，就进位))<br>案例：<span class="hljs-number">1.376411</span> ➡ <span class="hljs-number">1.376</span> 如果 <span class="hljs-number">1.376511</span> 变为 <span class="hljs-number">1.377</span><br><br><span class="hljs-number">6.</span>BigDecimal.ROUND_HALF_DOWN   常量值 = <span class="hljs-number">5</span> (作用：在保留小数后的后一位四舍五入(若舍入部分&gt;<span class="hljs-number">5</span>，就进位) 和ROUND_HALF_UP非常相似)<br>案例：<span class="hljs-number">1.376411</span> ➡ <span class="hljs-number">1.376</span>,如果是<span class="hljs-number">1.376511</span> ➡ <span class="hljs-number">1.377</span><br>注意 ROUND_HALF_UP与ROUND_HALF_DOWN的作用都相同,区别在前者是舍入部分大于或等于&gt;=<span class="hljs-number">5</span>都进位,后者只有舍入部分大于&gt;<span class="hljs-number">5</span>才进位<br><br><span class="hljs-number">7.</span>BigDecimal.ROUND_HALF_EVEN   常量值 = <span class="hljs-number">6</span> (作用：如果舍入部分左边的数字为偶数情况下作用与ROUND_HALF_DOWN相同,为奇数与ROUND_HALF_UP相同)<br>案例：<span class="hljs-number">1.376411</span> ➡ <span class="hljs-number">1.376</span> 舍入部分左边数字为<span class="hljs-number">6</span>(偶数),再使用ROUND_HALF_DOWN,舍入部分为<span class="hljs-number">411</span> 没有大于&gt;<span class="hljs-number">5</span> 那么不进位(相反之)<br>再比如：<span class="hljs-number">1.375511</span> ➡ <span class="hljs-number">1.376</span> 舍入部分左边数字为<span class="hljs-number">5</span>(奇数),再使用ROUND_HALF_UP,舍入部分为<span class="hljs-number">511</span> 大于&gt;=<span class="hljs-number">5</span> 那么进位(相反之) <span class="hljs-number">1.375</span> ➡ <span class="hljs-number">1.376</span><br>逻辑： <span class="hljs-number">1.</span>先判断舍入部分左边数字为偶数还是奇数<br>  <span class="hljs-number">2.</span>再选择使用ROUND_HALF_DOWN(偶数)还是 ROUND_HALF_UP(奇数)<br>使用的方式是银行家舍入：即四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一(可以去了解下)<br><br><span class="hljs-number">8.</span>BigDecimal.ROUND_UNNECESSARY   常量值 = <span class="hljs-number">7</span> (作用：断言该小数已经具有精确的结果,因此不需要舍入。否则抛出ArithmeticException异常)<br>例子：<span class="hljs-number">1.376</span> 只要小数位不超过规定的位数(我们这里是<span class="hljs-number">3</span>位),超过抛出异常<br><br>注：该方法是一个重载方法  java.math.RoundingMode枚举类中就包含上面<span class="hljs-number">8</span>个常量<br></code></pre></td></tr></table></figure><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><p>假设现在有一个浮点型小数我们需要按照我们的要求进行保留小数位：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decimal</span><span class="hljs-params">()</span> &#123;<br><br>      <span class="hljs-comment">/*1.创建 BigDecimal类</span><br><span class="hljs-comment">      注：在创建BigDecimal对象时,如果直接传入的是小数类型的值,有可能会造成精度损失,推荐传入String类型*/</span><br>      <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">Decimal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.376411&quot;</span>);<br><br>      <span class="hljs-comment">/*2.使用BigDecimal.setScale(int newScale, int roundingMode)方法进行小数位的保留</span><br><span class="hljs-comment">      参数一：设置需要保留3位小数 </span><br><span class="hljs-comment">      参数二：舍入模式(8种舍入方式上面已经介绍了)</span><br><span class="hljs-comment">      这里就保留3位小数，使用BigDecimal.ROUND_UP方式：在保留小数后直接去掉多余的位数(这里写对应的常量值也行)*/</span><br>      Decimal = Decimal.setScale(<span class="hljs-number">3</span>, BigDecimal.ROUND_UP);<br><br>      <span class="hljs-comment">/*3.获取返回类型(可以获得不同的返回值类型：long,int,String,double)*/</span><br>      <span class="hljs-type">double</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Decimal.doubleValue();<br><br>   <span class="hljs-comment">/*打印输出*/</span><br>      System.out.println(value);<br><br> <span class="hljs-comment">/*不同的舍入方式大家可以参照这上面的关于舍入方式详细介绍都试一试*/</span><br>&#125;<br></code></pre></td></tr></table></figure><center>   找不到路，就自己走一条出来。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Date类型与字符串的相互转换</title>
    <link href="/2020/11/16/Date%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/11/16/Date%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Date类型与字符串的相互转换"><a href="#Date类型与字符串的相互转换" class="headerlink" title="Date类型与字符串的相互转换"></a>Date类型与字符串的相互转换</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*Date时间类型与字符串的相互转换*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br><br>    <span class="hljs-comment">/*一、Date时间类型转字符串*/</span><br><br>    <span class="hljs-comment">/*1.获取当前时间*/</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>    <span class="hljs-comment">/*2.设定时间格式*/</span><br>    <span class="hljs-comment">/*下面两行可以简写为一行代码：</span><br><span class="hljs-comment">            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm&quot;);*/</span><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>    <span class="hljs-comment">/*注意：24小时制与12小时制的区别在于时间日期个格式不同：24小时使用大写HH,12小时使用小写hh*/</span><br>    sdf.applyPattern(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm&quot;</span>);<br><br>    <span class="hljs-comment">/*3.Date时间类型转为字符串*/</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> sdf.format(date);<br><br>    <span class="hljs-comment">/*4.输出字符串日期时间*/</span><br>    System.out.println(<span class="hljs-string">&quot;字符串类型：&quot;</span> + time);<br><br><br>    <span class="hljs-comment">/*二、字符串日期转Date类型*/</span><br><br>    <span class="hljs-comment">/*1.填入一个字符串日期转为Date类型</span><br><span class="hljs-comment">             * Date parse = sdf.parse(&quot;2020-11-16 18:34&quot;);*/</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> sdf.parse(time);<br><br>    <span class="hljs-comment">/*注：在字符串转换为Date的过程中,传入的字符串日期时间一定要与SimpleDateFormat设置的日期格式相同*/</span><br><br>    <span class="hljs-comment">/*2.输出Date类型日期时间*/</span><br>    System.out.println(<span class="hljs-string">&quot;Date类型：&quot;</span> + parse);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/article_img/Date%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/1.png"></p><center>不幸才是生活的常态。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获得String字符串中某个字符出现的次数</title>
    <link href="/2020/11/16/%E8%8E%B7%E5%BE%97String%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <url>/2020/11/16/%E8%8E%B7%E5%BE%97String%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="获得String字符串中某个字符出现的次数"><a href="#获得String字符串中某个字符出现的次数" class="headerlink" title="获得String字符串中某个字符出现的次数"></a>获得String字符串中某个字符出现的次数</h1><p>实现逻辑非常简单：<br>1.首先记录下来字符串的总长度<br>2.将想要判断的字符在字符串中替换为””<br>3.用总长度减去替换后的长度结果就等于该字符出现的次数。</p><blockquote><p><strong>假设下面的字符串，我想知道字符a出现的次数</strong><br><strong>String str &#x3D; “aaabbbccc”;  <strong>不多说，直接看代码</strong></strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*判断某字符串中某字符出现的次数*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charNumber</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aaabbbccc&quot;</span>;<br><br>    <span class="hljs-comment">/*获取初始字符串长度*/</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> str.length();<br><br>    <span class="hljs-comment">/*String.replace(s1,s2)方法作用：将字符串中s1替换为s2</span><br><span class="hljs-comment">        将其中字符a替换为”“*/</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> str.replace(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">/*替换后的字符串长度*/</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> s.length();<br><br>    System.out.println(<span class="hljs-string">&quot;原字符串：&quot;</span>+str);<br>    System.out.println(<span class="hljs-string">&quot;替换后字符串：&quot;</span>+s);<br>    System.out.println(<span class="hljs-string">&quot;字符a出现的次数：&quot;</span>+(a - b));<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>执行结果：</strong></p></blockquote><p><img src="/article_img/String%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/1.png"></p><center>知识有两种，一种是你知道的，一种是你知道在哪里能找到的。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用代码操作Excel文件(easyExcel)</title>
    <link href="/2020/10/12/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(easyExcel)/"/>
    <url>/2020/10/12/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(easyExcel)/</url>
    
    <content type="html"><![CDATA[<h1 id="使用代码操作Excel文件-easyExcel"><a href="#使用代码操作Excel文件-easyExcel" class="headerlink" title="使用代码操作Excel文件(easyExcel)"></a>使用代码操作Excel文件(easyExcel)</h1><p><a href="https://www.yuque.com/easyexcel/doc/easyexcel">EasyExcel文档：https://www.yuque.com/easyexcel/doc/easyexcel</a></p><h2 id="1-Maven导入easyExcel包"><a href="#1-Maven导入easyExcel包" class="headerlink" title="1.Maven导入easyExcel包"></a>1.Maven导入easyExcel包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>        &lt;!--easyExcel--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>            &lt;artifactId&gt;easyexcel&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.2</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--日期格式化工具--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;joda-time&lt;/groupId&gt;<br>            &lt;artifactId&gt;joda-time&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.10</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--lombok--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.18</span><span class="hljs-number">.12</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--fastjson--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.2</span><span class="hljs-number">.71</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--测试--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;junit&lt;/groupId&gt;<br>            &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">4.12</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><h2 id="2-easyExcel进行基本的写入"><a href="#2-easyExcel进行基本的写入" class="headerlink" title="2.easyExcel进行基本的写入"></a>2.easyExcel进行基本的写入</h2><blockquote><p><strong>1. 创建对应的实体类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.domain;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelIgnore;<br><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/10/12  11:36</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoData</span> &#123;<br><br>    <span class="hljs-comment">/*@ExcelProperty value = 标题(字段) index = 列数(可以直接选择第几列)*/</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;字符串标题&quot;, index = 0)</span><br>    <span class="hljs-keyword">private</span> String stringName;<br><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;日期标题&quot;, index = 1)</span><br>    <span class="hljs-keyword">private</span> Date dateName;<br><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;数字标题&quot;, index = 3)</span><br>    <span class="hljs-keyword">private</span> Double doubleName;<br><br>    <span class="hljs-comment">/*@ExcelIgnore在操作时忽略此字段*/</span><br>    <span class="hljs-meta">@ExcelIgnore</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> money;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>2. easyExcel用到的监听器 (下面代码是复制官方的过来用的)</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.context.AnalysisContext;<br><span class="hljs-keyword">import</span> com.alibaba.excel.event.AnalysisEventListener;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.dao.DemoDAO;<br><span class="hljs-keyword">import</span> com.domain.DemoData;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/10/12  16:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoDataListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;DemoData&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(DemoDataListener.class);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BATCH_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    List&lt;DemoData&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;DemoData&gt;();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> DemoDAO demoDAO;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DemoDataListener</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span><br>        demoDAO = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DemoDAO</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/*如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span><br><span class="hljs-comment">     * @param demoDAO*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DemoDataListener</span><span class="hljs-params">(DemoDAO demoDAO)</span> &#123;<br>        <span class="hljs-built_in">this</span>.demoDAO = demoDAO;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这个每一条数据解析都会来调用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data    one row value. Is is same as &#123;<span class="hljs-doctag">@link</span> AnalysisContext#readRowHolder()&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     */</span><br><br><br>    <span class="hljs-comment">/*读取数据会执行 invoke 方法</span><br><span class="hljs-comment">    * DemoData 数据的Beanl类</span><br><span class="hljs-comment">    * AnalysisContext 分析上下文*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(DemoData data, AnalysisContext context)</span> &#123;<br><br>        <span class="hljs-comment">/*输出到控制台*/</span><br>        System.out.println(JSON.toJSONString(data));<br><br>        LOGGER.info(<span class="hljs-string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));<br>        list.add(data);<br>        <span class="hljs-comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span><br>        <span class="hljs-keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;<br>            saveData();<br>            <span class="hljs-comment">// 存储完成清理 list</span><br>            list.clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*所有数据解析完成了 都会来调用</span><br><span class="hljs-comment">     * @param context*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext context)</span> &#123;<br>        <span class="hljs-comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span><br>        saveData();<br>        LOGGER.info(<span class="hljs-string">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*加上存储数据库*/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveData</span><span class="hljs-params">()</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, list.size());<br>        demoDAO.save(list);<br>        LOGGER.info(<span class="hljs-string">&quot;存储数据库成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>如果需要存入数据库(添加Dao类和方法) 监听器会调用</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoDAO</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(List&lt;DemoData&gt; list)</span> &#123;<br>        <span class="hljs-comment">// 如果是mybatis,尽量别直接调用多次insert,自己写一个mapper里面新增一个方法batchInsert,所有数据一次性插入</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-编写代码：读和写"><a href="#3-编写代码：读和写" class="headerlink" title="3. 编写代码：读和写"></a>3. 编写代码：读和写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.EasyExcel;<br><span class="hljs-keyword">import</span> com.alibaba.excel.ExcelReader;<br><span class="hljs-keyword">import</span> com.alibaba.excel.ExcelWriter;<br><span class="hljs-keyword">import</span> com.alibaba.excel.read.metadata.ReadSheet;<br><span class="hljs-keyword">import</span> com.alibaba.excel.write.metadata.WriteSheet;<br><span class="hljs-keyword">import</span> com.domain.DemoData;<br><span class="hljs-keyword">import</span> com.utils.DemoDataListener;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/10/12  11:31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">easyTest</span> &#123;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\IntelliJ IDEA 2019.1_File\\POIandEasyExcel\\easyExcel\\&quot;</span>;<br><br>    <span class="hljs-comment">/*模拟数据来源*/</span><br>    <span class="hljs-keyword">public</span> List&lt;DemoData&gt; <span class="hljs-title function_">data</span><span class="hljs-params">()</span> &#123;<br><br>        List&lt;DemoData&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;DemoData&gt;();<br><br>        <span class="hljs-comment">/*循环10次,在Excel中就是10行数据*/</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; x &lt; <span class="hljs-number">11</span>; x++) &#123;<br>            <span class="hljs-type">DemoData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DemoData</span>();<br>            <span class="hljs-comment">/*字符串标题*/</span><br>            data.setStringName(<span class="hljs-string">&quot;字符串&quot;</span> + x);<br>            <span class="hljs-comment">/*日期标题*/</span><br>            data.setDateName(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            <span class="hljs-comment">/*数字标题*/</span><br>            data.setDoubleName((<span class="hljs-type">double</span>) x);<br>            <span class="hljs-comment">/*查看被忽略字段(标题)是否会被写入*/</span><br>            data.setMoney(x);<br><br>            <span class="hljs-comment">/*添加进集合*/</span><br>            list.add(data);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br><br>    <span class="hljs-comment">/*easyExcel写入数据*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">easyExcelWrite</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">/*写出文件路径*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> PATH + <span class="hljs-string">&quot;easyExcelTest.xlsx&quot;</span>;<br><br>        <span class="hljs-comment">// 写法1(只需一行代码搞定)</span><br>        <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>        <span class="hljs-comment">// 如果这里想使用03 则 传入excelType参数即可</span><br><br>        <span class="hljs-comment">/* 几个方法的参数解释：</span><br><span class="hljs-comment">            write(1.路径,2.格式类)</span><br><span class="hljs-comment">            sheet(Excel中的模板名称)</span><br><span class="hljs-comment">            doWrite(数据)*/</span><br>        EasyExcel.write(fileName, DemoData.class).sheet(<span class="hljs-string">&quot;easyExcel模板&quot;</span>).doWrite(data());<br><br><br>        <span class="hljs-comment">// 写法2</span><br>        <span class="hljs-comment">// 这里 需要指定写用哪个class去写</span><br>        <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            excelWriter = EasyExcel.write(fileName, DemoData.class).build();<br>            <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-string">&quot;easyExcel模板&quot;</span>).build();<br>            excelWriter.write(data(), writeSheet);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 千万别忘记finish 会帮忙关闭流</span><br>            <span class="hljs-keyword">if</span> (excelWriter != <span class="hljs-literal">null</span>) &#123;<br>                excelWriter.finish();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/*easyExcel读取数据*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">easyExcelRead</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">/*写出文件路径*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> PATH + <span class="hljs-string">&quot;easyExcelTest.xlsx&quot;</span>;<br><br><span class="hljs-comment">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span><br>        <span class="hljs-comment">// 写法1：</span><br>        <span class="hljs-comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span><br><span class="hljs-comment">//        EasyExcel.read(fileName, DemoData.class, new DemoDataListener()).sheet().doRead();</span><br><br><br>        <span class="hljs-comment">// 写法2：</span><br>        <span class="hljs-type">ExcelReader</span> <span class="hljs-variable">excelReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            excelReader = EasyExcel.read(fileName, DemoData.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DemoDataListener</span>()).build();<br>            <span class="hljs-type">ReadSheet</span> <span class="hljs-variable">readSheet</span> <span class="hljs-operator">=</span> EasyExcel.readSheet(<span class="hljs-number">0</span>).build();<br>            excelReader.read(readSheet);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (excelReader != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span><br>                excelReader.finish();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>easyExcel就不过多介绍了，因为文档里面非常清楚，已经有写好的demo。相比POI，easyExcel操作更简单，代码量更少<br>easyExcel内部还是会使用 POI</p><center>看似美好的东西，往往藏着陷阱。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Excel</tag>
      
      <tag>easyExcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用代码操作Excel文件(POI)</title>
    <link href="/2020/10/10/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/"/>
    <url>/2020/10/10/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/</url>
    
    <content type="html"><![CDATA[<h1 id="本篇文章将讲述使用POI如何去对Excel文件进行读写"><a href="#本篇文章将讲述使用POI如何去对Excel文件进行读写" class="headerlink" title="本篇文章将讲述使用POI如何去对Excel文件进行读写"></a>本篇文章将讲述使用POI如何去对Excel文件进行读写</h1><p>  <a href="https://poi.apache.org/">apache的POI文档：https://poi.apache.org </a></p><h2 id="1-Maven导入poi包"><a href="#1-Maven导入poi包" class="headerlink" title="1.Maven导入poi包"></a>1.Maven导入poi包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--导入依赖--&gt;<br>    &lt;dependencies&gt;<br>        &lt;!--xls(<span class="hljs-number">03</span>版本)--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">3.9</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--xlsx(<span class="hljs-number">07</span>版本)--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">3.9</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--日期格式化工具--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;joda-time&lt;/groupId&gt;<br>            &lt;artifactId&gt;joda-time&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.10</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!--junit测试--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;junit&lt;/groupId&gt;<br>            &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">4.12</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><blockquote><p><strong><font color = #FF6666>这里解释下为什么有两个版本(03版，07版) ？</font></strong><br><strong><font color = #FF6666>1. 两者的文件后缀不同，03版本是.xls，07版本是.xlsx</font></strong><br><strong><font color = #FF6666>2. 03版的最多只能有65536行 (03版本如果写入数据超过65536行，则会出现异常)，而07版行数可以无限制 (代表07版可以存放的数据更多)</font></strong></p></blockquote><blockquote><p><strong><font color = #FF6666>在开始代码之前，先认识下Excel表结构直接看下图</font></strong></p></blockquote><p><img src="/article_img/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/1.png"></p><h2 id="2-POI进行基本的写入"><a href="#2-POI进行基本的写入" class="headerlink" title="2.POI进行基本的写入"></a>2.POI进行基本的写入</h2><blockquote><p><strong><font color = #FF6666>注：03版本使用 HSSFWorkbook，07版本使用 XSSFWorkbook (07版本大量数据写入使用SXSSFWorkbook)<br>07版本的XSSFWorkbook 与 SXSSFWorkbook的区别 ？这个疑问下面会讲到。<br></font></strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Cell;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Row;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Sheet;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Workbook;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/10/8  15:22</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br><br>    <span class="hljs-comment">/*文件生成路径*/</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\IntelliJ IDEA 2019.1_File\\POIandEasyExcel\\poi\\&quot;</span>;<br><br>    <span class="hljs-comment">/*03版本Excel*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">poi03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">/*1.创建工作簿*/</span><br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>        <span class="hljs-comment">/*2.创建工作表*/</span><br>        <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet(<span class="hljs-string">&quot;03版本&quot;</span>);<br>        <span class="hljs-comment">/*3.创建第一行(0就是第一行,以此类推 就像数组下标一样)*/</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">/*4.创建一列(单元格)(0就是第一列)*/</span><br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.createCell(<span class="hljs-number">0</span>);<br>        cell.setCellValue(<span class="hljs-string">&quot;第一行第一列&quot;</span>);<br>        <span class="hljs-comment">/*4.创建一列(单元格)(1就是第二列)*/</span><br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell2</span> <span class="hljs-operator">=</span> row.createCell(<span class="hljs-number">1</span>);<br>        cell2.setCellValue(<span class="hljs-string">&quot;第一行第二列&quot;</span>);<br>        <span class="hljs-comment">/*创建第二行(1就是第二行)*/</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row2</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/*创建(单元格)*/</span><br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell21</span> <span class="hljs-operator">=</span> row2.createCell(<span class="hljs-number">0</span>);<br>        cell21.setCellValue(<span class="hljs-string">&quot;第二行第一列&quot;</span>);<br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell22</span> <span class="hljs-operator">=</span> row2.createCell(<span class="hljs-number">1</span>);<br>        cell22.setCellValue(<span class="hljs-string">&quot;第二行第二列&quot;</span>);<br><br>        <span class="hljs-comment">/*5.创建输出流(IO流)  03版本文件后缀为：.xls*/</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(PATH + <span class="hljs-string">&quot;03Excel.xls&quot;</span>);<br>        <span class="hljs-comment">/*6.生成文件*/</span><br>        workbook.write(fileOutputStream);<br>        <span class="hljs-comment">/*7.关闭流*/</span><br>        fileOutputStream.close();<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/*07版本Excel*/</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">poi07</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">/*1.创建工作簿*/</span><br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br>        <span class="hljs-comment">/*2.创建工作表*/</span><br>        <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet(<span class="hljs-string">&quot;07版本&quot;</span>);<br>        <span class="hljs-comment">/*3.创建第一行*/</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">/*4.创建一列(单元格)*/</span><br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.createCell(<span class="hljs-number">0</span>);<br>        cell.setCellValue(<span class="hljs-string">&quot;第一行第一列&quot;</span>);<br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell2</span> <span class="hljs-operator">=</span> row.createCell(<span class="hljs-number">1</span>);<br>        cell2.setCellValue(<span class="hljs-string">&quot;第一行第二列&quot;</span>);<br>        <span class="hljs-comment">/*创建第二行*/</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row2</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/*创建(单元格)*/</span><br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell21</span> <span class="hljs-operator">=</span> row2.createCell(<span class="hljs-number">0</span>);<br>        cell21.setCellValue(<span class="hljs-string">&quot;第二行第一列&quot;</span>);<br>        <span class="hljs-type">Cell</span> <span class="hljs-variable">cell22</span> <span class="hljs-operator">=</span> row2.createCell(<span class="hljs-number">1</span>);<br>        cell22.setCellValue(<span class="hljs-string">&quot;第二行第二列&quot;</span>);<br><br>        <span class="hljs-comment">/*5.创建输出流(IO流)  07版本文件后缀为：.xlsx*/</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(PATH + <span class="hljs-string">&quot;07Excel.xlsx&quot;</span>);<br>        <span class="hljs-comment">/*6.生成文件*/</span><br>        workbook.write(fileOutputStream);<br>        <span class="hljs-comment">/*7.关闭流*/</span><br>        fileOutputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-POI进行大量数据的写入"><a href="#3-POI进行大量数据的写入" class="headerlink" title="3.POI进行大量数据的写入"></a>3.POI进行大量数据的写入</h2><blockquote><p><strong>模拟下大量数据的写入，写入65536行，10列(每行10个单元格)的数据</strong><br><strong>并且记录程序所耗费的时间</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*大量数据写入03版本Excel*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">poi03BigDate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-comment">/*记录程序开始时间*/</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-comment">/*1.创建工作簿*/</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>    <span class="hljs-comment">/*2.创建工作表*/</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet(<span class="hljs-string">&quot;03版本大量数据写入&quot;</span>);<br><br>    <span class="hljs-comment">/*x:行 y:列(单元格)*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">65536</span>; x++) &#123;<br>        <span class="hljs-comment">/*3.创建行*/</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(x);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; <span class="hljs-number">10</span>; y++) &#123;<br>            <span class="hljs-comment">/*4.创建列(单元格)*/</span><br>            <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.createCell(y);<br>            cell.setCellValue(y);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*5.创建输出流(IO流)  03版本文件后缀为：.xls*/</span><br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(PATH + <span class="hljs-string">&quot;03BIgDate.xls&quot;</span>);<br>    <span class="hljs-comment">/*6.生成文件*/</span><br>    workbook.write(fileOutputStream);<br>    <span class="hljs-comment">/*7.关闭流*/</span><br>    fileOutputStream.close();<br><br>    <span class="hljs-comment">/*记录程序结束时间*/</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-comment">/*耗时 = 结束时间 - 开始时间 / 1000(毫秒值)*/</span><br>    System.out.println(<span class="hljs-string">&quot;HSSF_03版耗时：&quot;</span> + (<span class="hljs-type">double</span>) (end - begin) / <span class="hljs-number">1000</span>);<br>&#125;<br><br><br><span class="hljs-comment">/*大量数据写入07版本Excel*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">poi07BigDate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-comment">/*记录程序开始时间*/</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-comment">/*1.创建工作簿*/</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br>    <span class="hljs-comment">//Workbook workbook = new SXSSFWorkbook();</span><br>    <br>    <span class="hljs-comment">/*2.创建工作表*/</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet(<span class="hljs-string">&quot;07版本大量数据写入&quot;</span>);<br><br>    <span class="hljs-comment">/*x:行 y:列(单元格)*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">65536</span>; x++) &#123;<br>        <span class="hljs-comment">/*3.创建行*/</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(x);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; <span class="hljs-number">10</span>; y++) &#123;<br>            <span class="hljs-comment">/*4.创建列(单元格)*/</span><br>            <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.createCell(y);<br>            cell.setCellValue(y);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*5.创建输出流(IO流)  07版本文件后缀为：.xlsx*/</span><br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(PATH + <span class="hljs-string">&quot;07BIgDate.xlsx&quot;</span>);<br>    <span class="hljs-comment">/*6.生成文件*/</span><br>    workbook.write(fileOutputStream);<br>    <span class="hljs-comment">/*7.关闭流*/</span><br>    fileOutputStream.close();<br><br>    <span class="hljs-comment">/*记录程序结束时间*/</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>    <span class="hljs-comment">/*耗时 = 结束时间 - 开始时间 / 1000(毫秒值)*/</span><br>    System.out.println(<span class="hljs-string">&quot;XSSF_07版耗时：&quot;</span> + (<span class="hljs-type">double</span>) (end - begin) / <span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong><font color = #FF6666>03版如果写入超过65536行数据则会出现异常(这就是03版与07版很大的区别，还有就是后缀名不同，03版本是 .xls，07版本是 .xlsx)：</font></strong></p></blockquote><p><img src="/article_img/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/2.png"></p><blockquote><p><strong>03版HSSF耗时：</strong><br><strong>优点：过程中写入缓存，不操作磁盘，最后一次性写入磁盘，速度快</strong><br><strong>缺点：只能操作65536行数据，否则会抛出异常</strong><br><strong>(java.lang.IllegalArgumentException: Invalid row number (65536) outside allowable range (0..65535))</strong></p></blockquote><p><img src="/article_img/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/3.png"></p><blockquote><p><strong>07版XSSF耗时：</strong><br><strong>优点：可以写非常大的数据量，比如几十万</strong><br><strong>缺点：写数据时非常慢，很耗内存，所有很有可能发生内存溢出(OOM)</strong></p></blockquote><p><img src="/article_img/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/4.png"></p><blockquote><p><strong>07版SXSSF耗时(07版本将 XSSFWorkbook对象 替换为 SXSSFWorkbook 对象)：</strong><br><strong>优点：在写入庞大数据量时，耗时更少，占用更少的内存</strong><br><strong>注意：在写入数据时，有一部分会被先写到临时文件，执行完之后需要清理临时文件。如果想自定义内存中的数量可以 new SXSSFWorkbook(传入数量)</strong></p></blockquote><p><img src="/article_img/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/5.png"></p><p>Excel写入总结：</p><h2 id="4-POI读取数据-模拟两个案例"><a href="#4-POI读取数据-模拟两个案例" class="headerlink" title="4. POI读取数据 (模拟两个案例)"></a>4. POI读取数据 (模拟两个案例)</h2><blockquote><p><strong>注：</strong><br><strong>1. 此案例只是03版本的Excel (如果是07版的Excel 换掉工作簿的对象即可，将HSSFWorkbook 变为XSSFWorkbook)</strong><br>** 2. 读取数据最复杂得点在于 转换Excel表中数据。比如日期、数字、小数、字符串、Excel中得函数公式、空单元格**<br>** 3. 所以可以使用 switch case 对不同类型进行判断 匹配**</p></blockquote><p><strong>案例一：</strong></p><blockquote><p><strong>下面有一个Excel表，把其中数据取出来，到控制台输出(都到控制台了，还不能存入数据库吗？)：</strong></p></blockquote><p><img src="/article_img/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*读取03版本Excel中多个类型数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">poi03read</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-comment">/*获得文件流*/</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">FileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(PATH + <span class="hljs-string">&quot;会员消费商品明细表.xls&quot;</span>);<br><br>    <span class="hljs-comment">/*1.创建工作簿*/</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(FileInputStream);<br><br>    <span class="hljs-comment">/*2.得到工作表(一个文件中可能有多个工作表,参数为 索引)*/</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheetAt</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/*3.获得工作表中所有行*/</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rowCount</span> <span class="hljs-operator">=</span> sheetAt.getPhysicalNumberOfRows();<br><br>    <span class="hljs-comment">/*循环所有行*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; rowNum &lt; rowCount; rowNum++) &#123;<br>        <span class="hljs-comment">/*读取行*/</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheetAt.getRow(rowNum);<br><br>        <span class="hljs-keyword">if</span> (row != <span class="hljs-literal">null</span>) &#123;<br><br>            <span class="hljs-comment">/*4.获得所有列*/</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">cellCount</span> <span class="hljs-operator">=</span> row.getPhysicalNumberOfCells();<br><br>            <span class="hljs-comment">/*循环所有列*/</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cellNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;<br><br>                <span class="hljs-comment">/*获得列(单元格)*/</span><br>                <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.getCell(cellNum);<br><br>                <span class="hljs-comment">/*判断列不为null*/</span><br>                <span class="hljs-keyword">if</span> (cell != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">/*获得单元格内容的类型*/</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">cellType</span> <span class="hljs-operator">=</span> cell.getCellType();<br><br>                    <span class="hljs-comment">/*内容变量*/</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">cellValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>                    <span class="hljs-comment">/*先判断类型,再输出*/</span><br>                    <span class="hljs-keyword">switch</span> (cellType) &#123;<br>                            <span class="hljs-comment">/*String类型*/</span><br>                        <span class="hljs-keyword">case</span> Cell.CELL_TYPE_STRING:<br>                            cellValue = cell.getStringCellValue();<br>                            System.out.print(cellValue + <span class="hljs-string">&quot; &quot;</span>);<br>                            <span class="hljs-keyword">break</span>;<br><br>                            <span class="hljs-comment">/*boolean类型*/</span><br>                        <span class="hljs-keyword">case</span> Cell.CELL_TYPE_BOOLEAN:<br>                            cellValue = String.valueOf(cell.getBooleanCellValue());<br>                            System.out.print(cellValue + <span class="hljs-string">&quot; &quot;</span>);<br>                            <span class="hljs-keyword">break</span>;<br><br>                            <span class="hljs-comment">/*数字类型(包括日期,数字)*/</span><br>                        <span class="hljs-keyword">case</span> Cell.CELL_TYPE_NUMERIC:<br>                            <span class="hljs-comment">/*HSSF工具类判断是否为日期*/</span><br>                            <span class="hljs-keyword">if</span> (HSSFDateUtil.isCellDateFormatted(cell)) &#123;<br>                                <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> cell.getDateCellValue();<br>                                <span class="hljs-comment">/*将日期时间转为字符串*/</span><br>                                cellValue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(date).toString(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>                                System.out.print(cellValue);<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-comment">/*不是日期类型 代表是数字,再将它转为字符串*/</span><br>                                cell.setCellType(Cell.CELL_TYPE_STRING);<br>                                cellValue = cell.getStringCellValue();<br>                                System.out.print(cellValue + <span class="hljs-string">&quot; &quot;</span>);<br>                            &#125;<br>                            <span class="hljs-keyword">break</span>;<br><br>                            <span class="hljs-comment">/*类型错误*/</span><br>                        <span class="hljs-keyword">case</span> Cell.CELL_TYPE_ERROR:<br>                            <span class="hljs-keyword">break</span>;<br><br>                            <span class="hljs-comment">/*空*/</span><br>                        <span class="hljs-keyword">case</span> Cell.CELL_TYPE_BLANK:<br>                            <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/*换行*/</span><br>        System.out.println();<br>    &#125;<br>    <span class="hljs-comment">/*5.关闭流*/</span><br>    FileInputStream.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例二：</strong></p><blockquote><p><strong>下面有一个Excel表，把它读取出来，到控制台输出(获得总和值和单元格中得函数公式)：</strong></p></blockquote><p><img src="/article_img/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6(POI)/7.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*读取03版本Excel中的函数公式(包括结果)*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">poi03readFormula</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-comment">/*获得文件流*/</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">FileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(PATH + <span class="hljs-string">&quot;计算公式.xls&quot;</span>);<br><br>    <span class="hljs-comment">/*1.创建工作簿*/</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(FileInputStream);<br><br>    <span class="hljs-comment">/*2.得到工作表(一个文件中可能有多个工作表,参数为 索引)*/</span><br>    <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheetAt</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/*3.获得工作表中所有行*/</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rowCount</span> <span class="hljs-operator">=</span> sheetAt.getPhysicalNumberOfRows();<br><br>    <span class="hljs-comment">/*循环所有行*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; rowNum &lt; rowCount; rowNum++) &#123;<br>        <span class="hljs-comment">/*读取行*/</span><br>        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheetAt.getRow(rowNum);<br>        <span class="hljs-keyword">if</span> (row != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">/*4.获得所有列*/</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">cellCount</span> <span class="hljs-operator">=</span> row.getPhysicalNumberOfCells();<br>            <span class="hljs-comment">/*循环所有列*/</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">cellNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;<br>                <span class="hljs-comment">/*获得列(单元格)*/</span><br>                <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.getCell(cellNum);<br>                <span class="hljs-comment">/*判断列不为null*/</span><br>                <span class="hljs-keyword">if</span> (cell != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">/*获得单元格内容的类型*/</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">cellType</span> <span class="hljs-operator">=</span> cell.getCellType();<br>                    <span class="hljs-comment">/*内容变量*/</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">cellValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                    <span class="hljs-comment">/*先判断类型,再输出*/</span><br>                    <span class="hljs-keyword">switch</span> (cellType) &#123;<br>                            <span class="hljs-comment">/*函数公式*/</span><br>                        <span class="hljs-keyword">case</span> Cell.CELL_TYPE_FORMULA:<br><br>                            cell.setCellType(Cell.CELL_TYPE_FORMULA);<br><br>                            <span class="hljs-comment">/*获得函数公式*/</span><br>                            <span class="hljs-type">String</span> <span class="hljs-variable">formula</span> <span class="hljs-operator">=</span> cell.getCellFormula();<br><br>                            System.out.println(formula);<br><br>                            <span class="hljs-comment">/*获得函数公式结果*/</span><br>                            <span class="hljs-comment">/*创建*HSSFFormulaEvaluator对象*/</span><br>                            <span class="hljs-type">FormulaEvaluator</span> <span class="hljs-variable">formulaEvaluator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFFormulaEvaluator</span>((HSSFWorkbook) workbook);<br><br>                            <span class="hljs-type">CellValue</span> <span class="hljs-variable">evaluate</span> <span class="hljs-operator">=</span> formulaEvaluator.evaluate(cell);<br><br>                            cellValue = evaluate.formatAsString();<br><br>                            System.out.println(cellValue);<br>                            <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*5.关闭流*/</span><br>    FileInputStream.close();<br>&#125;<br></code></pre></td></tr></table></figure><center>因为回忆太痛苦，所有我们要一直往前走。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Excel</tag>
      
      <tag>POI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java.util.Date系列之(获取过去或未来的日期)</title>
    <link href="/2020/10/04/java.util.Date%E7%B3%BB%E5%88%97%E4%B9%8B(%E8%8E%B7%E5%8F%96%E8%BF%87%E5%8E%BB%E6%88%96%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%97%A5%E6%9C%9F)/"/>
    <url>/2020/10/04/java.util.Date%E7%B3%BB%E5%88%97%E4%B9%8B(%E8%8E%B7%E5%8F%96%E8%BF%87%E5%8E%BB%E6%88%96%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%97%A5%E6%9C%9F)/</url>
    
    <content type="html"><![CDATA[<h2 id="以当前日期为坐标，获得过去或者未来的日期"><a href="#以当前日期为坐标，获得过去或者未来的日期" class="headerlink" title="以当前日期为坐标，获得过去或者未来的日期"></a>以当前日期为坐标，获得过去或者未来的日期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.date.test;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/9/22  18:02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">/*返回今天及未来七天的日期(格式：yyyy-MM-dd)*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">7</span>; x++) &#123;<br>            <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>            <span class="hljs-comment">//如果是 + x 代表获取的是未来的日期,相反之 - x 则是获取过去的日期</span><br>            calendar.set(Calendar.DAY_OF_YEAR, calendar.get(Calendar.DAY_OF_YEAR) + x);<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> calendar.getTime();<br><br>            <span class="hljs-comment">/*设置日期格式*/</span><br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>            <span class="hljs-comment">/*将Data转为String*/</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> format.format(date);<br><br>            <span class="hljs-comment">/*输出*/</span><br>            System.out.println(today);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><center>心血来潮的时候，总会有那么几人要顿悟的。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java.util.Date系列之(依次获取每个时间段的日期时间)</title>
    <link href="/2020/10/02/java.util.Date%E7%B3%BB%E5%88%97%E4%B9%8B(%E4%BE%9D%E6%AC%A1%E8%8E%B7%E5%8F%96%E6%AF%8F%E4%B8%AA%E6%97%B6%E9%97%B4%E6%AE%B5%E7%9A%84%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4)/"/>
    <url>/2020/10/02/java.util.Date%E7%B3%BB%E5%88%97%E4%B9%8B(%E4%BE%9D%E6%AC%A1%E8%8E%B7%E5%8F%96%E6%AF%8F%E4%B8%AA%E6%97%B6%E9%97%B4%E6%AE%B5%E7%9A%84%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4)/</url>
    
    <content type="html"><![CDATA[<h1 id="在开发中，如果我们想查询数据库中某一天所有某个或所有时间点的数据，那么就要先获得当天的所有想查询的时间点"><a href="#在开发中，如果我们想查询数据库中某一天所有某个或所有时间点的数据，那么就要先获得当天的所有想查询的时间点" class="headerlink" title="在开发中，如果我们想查询数据库中某一天所有某个或所有时间点的数据，那么就要先获得当天的所有想查询的时间点"></a>在开发中，如果我们想查询数据库中某一天所有某个或所有时间点的数据，那么就要先获得当天的所有想查询的时间点</h1><blockquote><p>本人开发中的真实案例： 需要把当天从00:00开始到第二天的00:00(半小时(30分钟)为间隔)的数据全部查询出来展示**<br>相当于就是00:00，00:30，01:00，01:30，02:00，02:30……….<br>获得我们想要的所有时间点之后，可使用sql模糊或精确查询数据库日期时间字段</p></blockquote><blockquote><p> <strong>小伙伴们很好奇为什么要以30分钟为间隔，解释下哈：本人项目中的数据库日期时间字段都是间隔30分钟的哈，意思是要么是整点比如12:00，要么就是:12:30，所有不存在其他时间哈</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.date.test;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/9/22  18:02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br><br>        <span class="hljs-comment">/*获取当天日期*/</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-comment">/*设置日期格式*/</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-comment">/*将日期转为字符串*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> df.format(date);<br><br>        <span class="hljs-comment">/*将字符串转为Date类型*/</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>);<br>        <span class="hljs-comment">/*从当前日期的00:00开始*/</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> simpleDateFormat.parse(today + <span class="hljs-string">&quot; 00:00&quot;</span>);<br><br>        <span class="hljs-comment">/*输出开始日期时间*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> simpleDateFormat.format(parse);<br>        System.out.println(format);<br><br>        <span class="hljs-comment">/*循环47次(24*2-1获得每半个小时的时间    第一天00:00到第二天00:00)*/</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; y &lt; <span class="hljs-number">48</span>; y++) &#123;<br><br>            <span class="hljs-comment">/*将指定时间依次加30分钟,循环到23:30为止(以此类推,如果是获取按小时划分, +60分钟)*/</span><br>            <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>            <span class="hljs-comment">/*设置指定时间*/</span><br>            c.setTime(parse);<br>            <span class="hljs-comment">/*将设置的时间加上30分钟*/</span><br>            c.add(Calendar.MINUTE, <span class="hljs-number">30</span>);<br>            <span class="hljs-comment">/*获得加上30分钟后的时间*/</span><br>            <span class="hljs-type">Date</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> c.getTime();<br>            <span class="hljs-comment">/*将新时间赋值后再循环*/</span><br>            parse = dateTime;<br><br>            <span class="hljs-comment">/*将date转为字符串*/</span><br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">format2</span> <span class="hljs-operator">=</span> sdf.format(dateTime);<br><br>            System.out.println(format2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><center>当人们做不到一些事情的时候，他们会对你说你也同样不能。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java.util.Date系列之(判断当前时间是否在指定范围内)</title>
    <link href="/2020/10/02/java.util.Date%E7%B3%BB%E5%88%97%E4%B9%8B(%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%98%AF%E5%90%A6%E5%9C%A8%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85)/"/>
    <url>/2020/10/02/java.util.Date%E7%B3%BB%E5%88%97%E4%B9%8B(%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%98%AF%E5%90%A6%E5%9C%A8%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85)/</url>
    
    <content type="html"><![CDATA[<h1 id="业务需求：判断当前日期时间是否在某个指定范围之内，给用户展示不同的东西-数据"><a href="#业务需求：判断当前日期时间是否在某个指定范围之内，给用户展示不同的东西-数据" class="headerlink" title="业务需求：判断当前日期时间是否在某个指定范围之内，给用户展示不同的东西(数据)"></a>业务需求：判断当前日期时间是否在某个指定范围之内，给用户展示不同的东西(数据)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.date.utils;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: libo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/9/27  15:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@motto</span>: 即使再小的帆也能远航</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">judgeDate</span> &#123;<br><br>    <span class="hljs-comment">/*判断当前时间是否在某个时间段范围之内*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEffectiveDate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br><br>        <span class="hljs-comment">/*获取当天日期*/</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-comment">/*设置日期格式*/</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-comment">/*将日期转为字符串*/</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> df.format(date);<br><br><br>        <span class="hljs-comment">/*设置日期格式*/</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm&quot;</span>);<br><br>        <span class="hljs-comment">/*设置时间范围  判断当前时间是否在00点以后到08点之间*/</span><br>        <span class="hljs-comment">/*将字符串日期转为Date*/</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> ft.parse(today + <span class="hljs-string">&quot; 00:00&quot;</span>);<span class="hljs-comment">//startTime：开始时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> ft.parse(today + <span class="hljs-string">&quot; 08:00&quot;</span>);<span class="hljs-comment">//endTime：结束时间</span><br><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-comment">/*返回結果为true：当前时间在范围内fales：当前时间不在范围内*/</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">effectiveDate</span> <span class="hljs-operator">=</span> isEffectiveDate2(nowTime, startTime, endTime);<br><br>        <span class="hljs-keyword">return</span> effectiveDate;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEffectiveDate2</span><span class="hljs-params">(Date nowTime, Date startTime, Date endTime)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nowTime.getTime() == startTime.getTime()<br>                || nowTime.getTime() == endTime.getTime()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        date.setTime(nowTime);<br><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        begin.setTime(startTime);<br><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        end.setTime(endTime);<br><br>        <span class="hljs-keyword">if</span> (date.after(begin) &amp;&amp; date.before(end)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><center>希望只在一瞬之间，而黑暗，永恒。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是RestFul风格？</title>
    <link href="/2020/06/23/%E4%BB%80%E4%B9%88%E6%98%AFRestFul%E9%A3%8E%E6%A0%BC%EF%BC%9F/"/>
    <url>/2020/06/23/%E4%BB%80%E4%B9%88%E6%98%AFRestFul%E9%A3%8E%E6%A0%BC%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是RestFul风格？"><a href="#什么是RestFul风格？" class="headerlink" title="什么是RestFul风格？"></a>什么是RestFul风格？</h1><h2 id="什么是RestFul风格？-1"><a href="#什么是RestFul风格？-1" class="headerlink" title="什么是RestFul风格？"></a>什么是RestFul风格？</h2><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>REST即Representational State Transfer的缩写，可译为”表现层状态转化”。REST最大的几个特点为：资源、统一接口、URI和无状态。</p><h2 id="RestFul特点包括："><a href="#RestFul特点包括：" class="headerlink" title="RestFul特点包括："></a>RestFul特点包括：</h2><p>1、每一个URI代表1种资源；<br>2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；<br>3、通过操作资源的表现形式来操作资源；<br>4、资源的表现形式是XML或者HTML；<br>5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫URL（Uniform Resource Locator,统一资源定位符），它是WWW的统一资源定位标志，就是指网络地址。<br>URL由三部分组成：资源类型、存放资源的主机域名、资源文件名。也可认为由4部分组成：协议、主机、端口、路径</p><h2 id="传统方式的资源访问"><a href="#传统方式的资源访问" class="headerlink" title="传统方式的资源访问"></a>传统方式的资源访问</h2><p><a href="http://localhot:8080/item/select?id=1">http://localhot:8080/item/select?id=1</a>   查询 GET<br><a href="http://localhot:8080/item/insert">http://localhot:8080/item/insert</a>             新增 POST<br><a href="http://localhot:8080/item/update">http://localhot:8080/item/update</a>          更新 POST<br><a href="http://localhot:8080/item/delete?id=1">http://localhot:8080/item/delete?id=1</a>  删除 DELETE</p><p><strong>得出结论：传统方式请求地址都不同。</strong></p><h2 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h2><p><strong>下面有两种不同请求URL方式(请求路径上参数的不同)</strong><br><strong>@PathVariable：将URL请求路径参数映射到方法参数中<br>@GetMapping(path &#x3D; “&#x2F;add&#x2F;{a}&#x2F;{b}”) 等价于 @RequestMapping(path &#x3D; “&#x2F;add&#x2F;{a}&#x2F;{b}”,method &#x3D; RequestMethod.GET)<br>不同的方式都用对应的注解：@GetMapping、@PostMapping、@PutMapping、@DeleteMapping相当于简写了代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testController</span> &#123;<br><br><span class="hljs-comment">//  @RequestMapping(path = &quot;/add&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@GetMapping(path = &quot;/add&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> a+b;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;add1结果为：&quot;</span>+add;<br>    &#125;<br><br><span class="hljs-comment">//  @RequestMapping(path = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@GetMapping(path = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> a, <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> a+b;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;add2结果为：&quot;</span>+add;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/article_img/%E4%BB%80%E4%B9%88%E6%98%AFRestFul%E9%A3%8E%E6%A0%BC/1.png"></p><p><img src="/article_img/%E4%BB%80%E4%B9%88%E6%98%AFRestFul%E9%A3%8E%E6%A0%BC/2.png"><br>简单来理解的话RestFul风格就是请求路径相同，但根据不同的参数、请求方式不同而执行不同的方法，产生的结果也不同。<br>如果是传统方式有两个相同路径会直接报错<br>RestFul主要是保护了我们请求头的数据，如果是传统方式，两个相同的请求路径，请求方式不同也可以实现<br><strong>传统方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    @RequestMapping(path = &quot;/add&quot;,method = RequestMethod.GET)</span><br>        <span class="hljs-meta">@GetMapping(path = &quot;/add&quot;)</span><br>        <span class="hljs-meta">@ResponseBody</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add1</span><span class="hljs-params">(String a, String b)</span>&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> a+b;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GET结果为：&quot;</span>+add;<br>        &#125;<br>        <br><br><span class="hljs-comment">//     @RequestMapping(path = &quot;/add&quot;,method = RequestMethod.POST)</span><br>        <span class="hljs-meta">@PostMapping(path = &quot;/add&quot;)</span><br>        <span class="hljs-meta">@ResponseBody</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add2</span><span class="hljs-params">(String a, String b)</span>&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> a+b;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;POST结果为：&quot;</span>+add;<br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>创建一个表单模拟传统方式POST请求：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>&lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>        &lt;form action=<span class="hljs-string">&quot;http://127.0.0.1:8080/add&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> &gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;a&quot;</span>&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;b&quot;</span>&gt;<br>            &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>        &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="/article_img/%E4%BB%80%E4%B9%88%E6%98%AFRestFul%E9%A3%8E%E6%A0%BC/3.png"></p><p><img src="/article_img/%E4%BB%80%E4%B9%88%E6%98%AFRestFul%E9%A3%8E%E6%A0%BC/4.png"></p><p><img src="/article_img/%E4%BB%80%E4%B9%88%E6%98%AFRestFul%E9%A3%8E%E6%A0%BC/5.png"></p><center>今日的余晖和你最后那天给我的拥抱，同一个温度。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RestFul风格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swagger介绍及使用</title>
    <link href="/2020/06/23/Swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/06/23/Swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Swagger-概述"><a href="#Swagger-概述" class="headerlink" title="Swagger-概述"></a>Swagger-概述</h1><blockquote><p><strong>Swagger 是一款RESTFUL接口的文档在线自动生成+功能测试功能软件。</strong><br><strong>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。Swagger让部署管理和使用功能强大的API从未如此简单。</strong></p></blockquote><p><strong>本篇将使用SpringBoot进行搭建Swagger</strong></p><h2 id="1-maven导入Swagger包"><a href="#1-maven导入Swagger包" class="headerlink" title="1. maven导入Swagger包"></a>1. maven导入Swagger包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.9</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.9</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><h2 id="2-配置开启swagger2"><a href="#2-配置开启swagger2" class="headerlink" title="2. 配置开启swagger2"></a>2. 配置开启swagger2</h2><blockquote><p><strong>新建一个配置类，然后开启使用@EnableSwagger2注解就可以了</strong><br><strong>注：在后续的操作中都是在swagger配置类中进行</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>      <span class="hljs-comment">/*配置类*/</span><br><span class="hljs-meta">@EnableSwagger2</span>     <span class="hljs-comment">/*开启swagger自动配置*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">swaggerConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-测试swagger"><a href="#3-测试swagger" class="headerlink" title="3. 测试swagger"></a>3. 测试swagger</h2><blockquote><p><strong>在此之前可以编写一个测试的Controller，效果更佳显著</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">swaggerController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(path = &quot;/hello&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello swagger&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>启动项目进行访问swagger：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p></blockquote><p>能够看到此页面代表swagger基础配置就完成了，swagger页面分为4个内容</p><ol><li>swagger信息：<em>相当于作者的个人信息(可自行修改)</em></li><li>接口信息：在controller中编写的接口全在里面(SpringBoot默认有个接口就是error)</li><li>实体类信息：对应数据库表中的数据字段</li><li>开发者组：是一个下拉框，可以创建不同的开发者信息(比如某些业务的接口是01开发的，某些接口是02开发的)</li></ol><p><img src="/article_img/swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/1.png"></p><h2 id="4-配置swagger信息"><a href="#4-配置swagger信息" class="headerlink" title="4. 配置swagger信息"></a>4. 配置swagger信息</h2><p><strong>swagger信息：开发者名称、个人网站地址、邮箱地址、描述信息…(可以根据不同的Docket获取不同的ApiInfo中Contact的name属性来区别接口的开发者)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>       <span class="hljs-comment">/*配置类*/</span><br><span class="hljs-meta">@EnableSwagger2</span>     <span class="hljs-comment">/*开启swagger自动配置*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">swaggerConfig</span> &#123;<br><br>    <span class="hljs-comment">/*配置swagger的Docket实例*/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">getDocket</span><span class="hljs-params">( )</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo());<br>    &#125;<br><br>    <span class="hljs-comment">/*配置swagger 信息==ApiInfo*/</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">( )</span> &#123;<br>        <span class="hljs-comment">/*作者信息*/</span><br>        <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;阿波&quot;</span>,<span class="hljs-string">&quot;https://libo2000.github.io/&quot;</span>,<span class="hljs-string">&quot;973747397@qq.com&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfo</span>(<br>                <span class="hljs-string">&quot;阿波的SwaggerAPI文档&quot;</span>,<br>                <span class="hljs-string">&quot;记忆之中没有辛苦,只有遗憾&quot;</span>,<br>                <span class="hljs-string">&quot;v1.0&quot;</span>,<br>                <span class="hljs-string">&quot;https://libo2000.github.io/&quot;</span>,<br>                contact,<br>                <span class="hljs-string">&quot;Apache2.0&quot;</span>,<br>                <span class="hljs-string">&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()<br>        );<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>修改完之后再次访问：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong> <strong>明显的看到swagger信息与之前发生了变化</strong><br><img src="/article_img/swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/2.png"></p><h2 id="5-配置swagger扫描接口"><a href="#5-配置swagger扫描接口" class="headerlink" title="5. 配置swagger扫描接口"></a>5. 配置swagger扫描接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/*配置swagger的Docket实例*/</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">getDocket</span><span class="hljs-params">(Environment environment)</span>&#123;<br><br>     <span class="hljs-comment">/*设置需要显示的swagger环境*/</span><br>     <span class="hljs-type">Profiles</span> <span class="hljs-variable">profiles</span> <span class="hljs-operator">=</span>Profiles.of(<span class="hljs-string">&quot;dev&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br>      <span class="hljs-comment">/**/</span><br><span class="hljs-comment">     boolean flag = environment.acceptsProfiles(profiles);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="hljs-comment">        .apiInfo(apiInfo())</span><br><span class="hljs-comment">        .groupName(&quot;阿波&quot;) //swagger信息(ApiInfo)中的name成员变量(不同的开发者信息就需要设置多个ApiInfo在不同的Docket实例中获取)</span><br><span class="hljs-comment">        /*.enable(false)：是否启用swagger  如果为false,浏览器中不能访问(默认为true)*/</span><br>        .enable(flag)<br>        .select()<br>        <span class="hljs-comment">/*RequestHandlerSelectors：配置扫描接口的方式</span><br><span class="hljs-comment">               * basePackage：指定扫描的包</span><br><span class="hljs-comment">               * any：扫描全部</span><br><span class="hljs-comment">               * none：不扫描</span><br><span class="hljs-comment">               * withClassAnnotation：扫描类上的注解，参数为一个注解的反射对象</span><br><span class="hljs-comment">               * withMethodAnnotation：扫描方法上的注解*/</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.swagger.controller&quot;</span>))<br>        <span class="hljs-comment">/*paths()：过滤路径*/</span><br><span class="hljs-comment">//      .paths(PathSelectors.ant(&quot;/action&quot;))</span><br>        .build();<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>这里有个问题：这么才能控制swagger的显示问题，Docket实例中enable()默认为true就是说可以访问(false则不能访问)，但是我想让swagger在测试阶段才可以访问，其他时候不能访问，如何实现？</strong></p></blockquote><p><strong>方便我们测试所以创建多个SpringBoot的配置文件properties，在主配置文件中配置spring.profiles.active&#x3D;具体配置环境(代表当前项目使用的是那一个项目环境)</strong></p><ol><li>设置需要显示的swagger环境(例如：只有在dev或者test环境下才显示)：Profiles profiles &#x3D;Profiles.of(“dev”,”test”);</li><li>判断当前环境是否为设置的环境(返回boolean值true或false)：boolean flag &#x3D; environment.acceptsProfiles(profiles);</li><li>将flag变量传到Docket实例的.enable(flag)属性中：enable(flag)</li></ol><p> <strong>至此就可以通过获取当前环境而控制swagger的访问</strong></p><p><img src="/article_img/swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/3.png"><br><img src="/article_img/swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/4.png"></p><h2 id="6-swagger分组与接口注释"><a href="#6-swagger分组与接口注释" class="headerlink" title="6. swagger分组与接口注释"></a>6. swagger分组与接口注释</h2><blockquote><p><strong>swagger分组：</strong></p></blockquote><p><strong>在swagger配置时可分为不同的多个Docket对象，相当于每一个Docket对象就是一个项目中的开发者。可以设置多个ApiInfo信息，再通过Docket的groupName()参数为ApiInfo中Contact对象的name成员变量，在上面我们知道了Docket中可以设置扫描接口，那我们在通过扫描不同的接口、配置不同的ApiInfo信息，那么就可以进行swagger的分组(就可以在swagger中区别不同开发者写的接口及代码)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>           <span class="hljs-comment">/*配置类*/</span><br><span class="hljs-meta">@EnableSwagger2</span>     <span class="hljs-comment">/*开启swagger自动配置*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">swaggerConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">getDocket2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;阿波2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">getDocket3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;阿波3&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*配置swagger的Docket实例*/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">getDocket</span><span class="hljs-params">(Environment environment)</span>&#123;<br><br>        <span class="hljs-comment">/*设置需要显示的swagger环境*/</span><br>        <span class="hljs-type">Profiles</span> <span class="hljs-variable">profiles</span> <span class="hljs-operator">=</span>Profiles.of(<span class="hljs-string">&quot;dev&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-comment">/**/</span><br><span class="hljs-comment">        boolean flag = environment.acceptsProfiles(profiles);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="hljs-comment">                .apiInfo(apiInfo())</span><br><span class="hljs-comment">                .groupName(&quot;阿波&quot;) //swagger信息(ApiInfo)中的name成员变量(不同的开发者信息就需要设置多个ApiInfo在不同的Docket实例中获取)</span><br><span class="hljs-comment">                /*.enable(false)：是否启用swagger  如果为false,浏览器中不能访问(默认为true)*/</span><br>                .enable(flag)<br>                .select()<br>                <span class="hljs-comment">/*RequestHandlerSelectors：配置扫描接口的方式</span><br><span class="hljs-comment">                        * basePackage：指定扫描的包</span><br><span class="hljs-comment">                        * any：扫描全部</span><br><span class="hljs-comment">                        * none：不扫描</span><br><span class="hljs-comment">                        * withClassAnnotation：扫描类上的注解，参数为一个注解的反射对象</span><br><span class="hljs-comment">                        * withMethodAnnotation：扫描方法上的注解*/</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.swagger.controller&quot;</span>))<br>                <span class="hljs-comment">/*paths()：过滤路径*/</span><br><span class="hljs-comment">//                .paths(PathSelectors.ant(&quot;/action&quot;))</span><br>                .build();<br>    &#125;<br><br><br>    <span class="hljs-comment">/*配置swagger 信息==ApiInfo*/</span><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*作者信息*/</span><br>        <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;阿波&quot;</span>,<span class="hljs-string">&quot;https://libo2000.github.io/&quot;</span>,<span class="hljs-string">&quot;973747397@qq.com&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfo</span>(<br>                <span class="hljs-string">&quot;阿波的SwaggerAPI文档&quot;</span>,<br>                <span class="hljs-string">&quot;记忆之中没有辛苦,只有遗憾&quot;</span>,<br>                <span class="hljs-string">&quot;v1.0&quot;</span>,<br>                <span class="hljs-string">&quot;https://libo2000.github.io/&quot;</span>,<br>                contact,<br>                <span class="hljs-string">&quot;Apache2.0&quot;</span>,<br>                <span class="hljs-string">&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()<br>        );<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/article_img/swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/5.png"></p><blockquote><p><strong>swagger常用注解</strong><br><strong>在swagger如何去描述实体类呢?(JavaBean)</strong></p></blockquote><p><strong>首先创建实体类，然后对实体类及成员变量通过注解进行描述：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户名&quot;)</span><br>    <span class="hljs-keyword">public</span> String username;<br>    <br>    <span class="hljs-meta">@ApiModelProperty(&quot;密码&quot;)</span><br>    <span class="hljs-keyword">public</span> String password;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>然后在Controller中进行接口配置：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">swaggerController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(path = &quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello swagger&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*在接口中,返回值中存在实体类,他就会被扫描到swagger中*/</span><br>    <span class="hljs-meta">@PostMapping(path = &quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br>    <br> &#125;   <br></code></pre></td></tr></table></figure><p><img src="/article_img/swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/6.png"></p><p><strong>对接口的描述：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;user控制类&quot;)</span><br><span class="hljs-meta">@GetMapping(path = &quot;/hello2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(&quot;用户名&quot;)</span> String username, <span class="hljs-meta">@ApiParam(&quot;密码&quot;)</span>String password)</span>&#123;<br>    <span class="hljs-keyword">return</span> username+password;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/article_img/swagger%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/7.png"></p><p>Swagger常用注解<br>在Java类中添加Swagger的注解即可生成Swagger接口，常用Swagger注解如下：</p><ol><li>@Api：修饰整个类，描述Controller的作用 </li><li>@ApiOperation：描述一个类的一个方法，或者说一个接口</li><li>@ApiParam：单个参数描述 </li><li>@ApiModel：用对象来接收参数</li><li>@ApiModelProperty：用对象接收参数时，描述对象的一个字段 </li><li>@ApiResponse：HTTP响应其中1个描述</li><li>@ApiResponses：HTTP响应整体描述 </li><li>@ApiIgnore：使用该注解忽略这个API </li><li>@ApiError：发生错误返回的信息 </li><li>@ApiImplicitParam：一个请求参数 </li><li>@ApiImplicitParams：多个请求参数</li></ol><center>现在的我，未来的我，一起去啊，更远的地方！</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot实现发送邮件(验证码,文本,附件)</title>
    <link href="/2020/05/27/SpringBoot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2020/05/27/SpringBoot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot发送邮箱信息"><a href="#SpringBoot发送邮箱信息" class="headerlink" title="SpringBoot发送邮箱信息"></a>SpringBoot发送邮箱信息</h1><p> <strong>验证码的作用：网上找的解答，防止恶意注册和暴力破解所谓恶意注册和暴力破解都是用软件进行的。<br>人工注册再快，也需要一项一项输入资料，速度很慢，对服务器基本没有影响。如果没有验证码可以使用软件注册的话，可以同时运行成千上万个线程，一次能注册成千上万个用户，让服务器的数据库很快变得臃肿不堪，运行效率下降。如果一个无聊的人或竞争对手对某网站怀有敌意，那么这种方法很容易就能让对方瘫痪。</strong></p><p><strong>除了邮箱验证码，对手机验证码感兴趣的朋友可以看我另一篇博客：<a href="https://blog.csdn.net/weixin_45377770/article/details/106235791">Java如何实现发送手机短信验证码</a></strong></p><h2 id="1-配置测试邮箱"><a href="#1-配置测试邮箱" class="headerlink" title="1. 配置测试邮箱"></a>1. 配置测试邮箱</h2><blockquote><p><strong>这里选用QQ邮箱进行测试(也可以选择其他邮箱，可能相关的配置不同)</strong><br><strong>1. 首先登陆进邮箱，进入设置</strong></p></blockquote><p><img src="/article_img/SpringBoot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/1.png"></p><blockquote><p><strong>2. 在设置中找到服务一栏，选择把POP3&#x2F;SMTP服务开启(注：我这里使用过，所以已经是开启的)</strong></p></blockquote><p><img src="/article_img/SpringBoot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/2.png"></p><blockquote><p><strong>3. 点击开启之后会验证当前QQ账户的身份，会提示要用密保手机发送个短信，发了之后就开启了<br>注：这个开启POP3&#x2F;SMTP服务服务授权码要提前保存下来或者截个图(后面会用到)，如果没保存的话可能就要再验证一次身份，会再要求用密保手机发送验证短信，所以不找那个麻烦哈</strong><br><img src="/article_img/SpringBoot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/3.png"></p></blockquote><h2 id="2-配置SpringBoot项目项目中配置"><a href="#2-配置SpringBoot项目项目中配置" class="headerlink" title="2. 配置SpringBoot项目项目中配置"></a>2. 配置SpringBoot项目项目中配置</h2><blockquote><p><strong>1. 在Maven的pom.xml文件中导入依赖</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><blockquote><p><strong>2. 在application.properties文件中进行配置，下面有两个修改的地方：username&#x3D;邮箱账号(就是之前配置测试邮箱的账号)，password&#x3D;授权码</strong></font><br><strong>注意两点：1_邮箱账号是之前配置测试邮箱的账号<a href="mailto:&#120;&#120;&#x78;&#120;&#120;&#x40;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#120;&#120;&#x78;&#120;&#120;&#x40;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;</a>，</br> 2_password是前面开启POP3&#x2F;SMTP服务保存的授权码(不是你的邮箱密码哈，记住了)</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.mail.username=<span class="hljs-number">1</span>邮箱账号<br>spring.mail.password=<span class="hljs-number">2</span>授权码<br>spring.mail.host=smtp.qq.com<br>#开启加密验证<br>spring.mail.properties.mail.smtp.ssl.enable=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>3. 编写测试代码(下面介绍两种发送邮件的方式)</strong><br><strong>第一种方式(只发送一些简单的文字信息)：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Autowired</span><br>   JavaMailSenderImpl mailSender;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">/*一封简单的邮件*/</span><br>       <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">mailMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>       <span class="hljs-comment">/*邮件标题*/</span><br>       mailMessage.setSubject(<span class="hljs-string">&quot;邮件验证码&quot;</span>);<br>       <span class="hljs-comment">/*邮件内容(随机生成验证码)*/</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>       mailMessage.setText(code);<br>       <span class="hljs-comment">/*发送人(必须和配置文件中的username相同)*/</span><br>       mailMessage.setFrom(<span class="hljs-string">&quot;授权邮箱xxxx@qq.com&quot;</span>);<br>       <span class="hljs-comment">/*收件人*/</span><br>       mailMessage.setTo(<span class="hljs-string">&quot;收件邮箱xxxx@qq.com&quot;</span>);<br>       <span class="hljs-comment">/*发送*/</span><br>       mailSender.send(mailMessage);<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>话不多说，上效果图：</strong></p></blockquote><p><img src="/article_img/SpringBoot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/4.png"></p><blockquote><p><strong>第二种(可以发送附件比如图片、还可以改变文字样式)：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Autowired</span><br>   JavaMailSenderImpl mailSender;<br><br><br><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <span class="hljs-comment">/*一封复杂的邮件*/</span><br>       <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">mimeMessage</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();<br>       <span class="hljs-comment">/*组装*/</span><br>       <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(mimeMessage,<span class="hljs-literal">true</span>);<br>       <span class="hljs-comment">/*邮件标题*/</span><br>       helper.setSubject(<span class="hljs-string">&quot;邮件测试&quot;</span>);<br>       <span class="hljs-comment">/*邮件内容(随便添加个CSS样式，比如文字颜色红色),注：为true才能解析HTML元素,如果为false会解析为字符串*/</span><br>       helper.setText(<span class="hljs-string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;123&lt;/p&gt;&quot;</span>,<span class="hljs-literal">true</span>);<br>       <span class="hljs-comment">/*附件(并且发送一张偶像的帅照过去(绝对地址))*/</span><br>       helper.addAttachment(<span class="hljs-string">&quot;刘德华.jpg&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\图片\\刘德华.jpg&quot;</span>));<br>       <span class="hljs-comment">/*发送人(必须和配置文件中的username相同)*/</span><br>       helper.setFrom(<span class="hljs-string">&quot;授权邮箱xxxx@qq.com&quot;</span>);<br>       <span class="hljs-comment">/*收件人*/</span><br>       helper.setTo(<span class="hljs-string">&quot;收件邮箱xxxx@qq.com&quot;</span>);<br>       <span class="hljs-comment">/*发送*/</span><br>       mailSender.send(mimeMessage);<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>效果图：</strong><br><img src="/article_img/SpringBoot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/5.png"><br><img src="/article_img/SpringBoot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/6.png"></p></blockquote><p><strong>可以给用户发验证码，或者按一定的业务需求发送附件，比如图片这些，也能让一些重要信息不同的CSS样式显示</strong></p><center>最好的感觉，是有人懂你的欲言又止。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何发送手机短信验证码</title>
    <link href="/2020/05/20/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <url>/2020/05/20/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="如何发送手机短信验证码"><a href="#如何发送手机短信验证码" class="headerlink" title="如何发送手机短信验证码"></a>如何发送手机短信验证码</h1><h2 id="阿里云短信业务实战教程"><a href="#阿里云短信业务实战教程" class="headerlink" title="阿里云短信业务实战教程"></a>阿里云短信业务实战教程</h2><p>手机短信验证码接口适用于触发类的应用,如用户获取验证码、手机找回密码、手机短信订单通知等;具体表现为由用户的某一个事件或操作所触发的短信。最主要的作用就是确定每一个操作都是用户本人自己触发的。*(发送手机验证码有很多个平台，本次测试使用阿里云)*</p><p><strong>除了手机短信验证码，对邮件发送感兴趣的朋友可以看我另一篇博客：<a href="https://blog.csdn.net/weixin_45377770/article/details/106392057">SpringBoot实现发送邮件(验证码,文本,附件)</a></strong></p><h2 id="1-阿里云平台的使用"><a href="#1-阿里云平台的使用" class="headerlink" title="1.阿里云平台的使用"></a>1.阿里云平台的使用</h2><blockquote><p><strong>登陆阿里云网站，进入控制台(支付宝，淘宝都可以登陆需要实名认证)</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/1.png"></p><blockquote><p><strong>点击用户头像，选择AccessKey管理</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/2.png"></p><blockquote><p><strong>选择开始使用子用户AccessKey</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/3.png"></p><h2 id="2-创建用户组及用户并添加权限"><a href="#2-创建用户组及用户并添加权限" class="headerlink" title="2.创建用户组及用户并添加权限"></a>2.创建用户组及用户并添加权限</h2><blockquote><p><strong>创建用户组</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/4.png"></p><blockquote><p><strong>添加短信服务的权限SMS(代表用户组下的所有用户都有此权限)</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/5.png"></p><blockquote><p><strong>创建用户<font color=red>(注：这里一定要开启编程访问)</font></strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/6.png"></p><blockquote><p><strong>创建用户后，<font color=red>要把AccessKey ID和AccessKey Secret着两个值保存下来(可以直接点复制)</font></strong><br><strong>在后面的编程中会使用到着两个值</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/7.png"></p><blockquote><p><strong>将用户添加到用户组下</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/8.png"></p><h2 id="3-添加短信签名和短信模板并充值费用"><a href="#3-添加短信签名和短信模板并充值费用" class="headerlink" title="3.添加短信签名和短信模板并充值费用"></a>3.添加短信签名和短信模板并充值费用</h2><blockquote><p><strong>搜索短信服务</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/9.png"></p><blockquote><p><strong>来到短信服务页面之后，可以看看快速学习或者帮助文档来对阿里云短信服务做具体了解</strong><br><strong>接下来签名管理和模板管理我们都需要进行填写</strong><br><strong>选择添加签名</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/10.png"></p><blockquote><p><strong>填写签名信息</strong><br><strong>签名不可以使用人名(否则过不了审核)，申请说明就写：用于公司的登陆及注册业务，就可以了</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/11.png"></p><blockquote><p><strong>添加模板</strong><br><strong>模板内容：您的验证码为：${code},该验证码5分钟内有效，请勿泄露于他人。</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/12.png"></p><blockquote><p><strong>短信签名和短信模板这里都必须审核通过之后才能使用</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/13.png"></p><blockquote><p><strong>点击进入费用</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/14.png"></p><blockquote><p><strong>这里我们用于测试，充值个1块钱就可以了</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/15.png"></p><blockquote><p><strong>返回之前的页面，查看帮助文档</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/16.png"></p><blockquote><p><strong>使用Java发送验证码，当然是选Java SDK啦，右侧是目录(可以进行参考)</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/17.png"></p><blockquote><p><strong>到这里关于阿里云的就差不多了</strong></p></blockquote><h2 id="4-开发工具进行代码部分-这里使用IDEA"><a href="#4-开发工具进行代码部分-这里使用IDEA" class="headerlink" title="4.开发工具进行代码部分(这里使用IDEA)"></a>4.开发工具进行代码部分(这里使用IDEA)</h2><blockquote><p><strong>在Maven工程中导入两个依赖</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--短信验证码(阿里云)--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>    &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;!--JSON--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.2</span><span class="hljs-number">.45</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><blockquote><p><strong>进入查看示例源码</strong></p></blockquote><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/18.png"></p><p><img src="/article_img/%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/19.png"></p><blockquote><p><strong>在项目中新建一个测试类(或者main方法直接运行)</strong><br><strong>下面需要修改的地方都写了标识1-5，一共有5处需要修改，其他的都不需要修改</strong><br><strong>注：AccessKey ID和AccessKey Secre就是前面创建用户所保存的信息</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DefaultProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.getProfile(<span class="hljs-string">&quot;cn-hangzhou&quot;</span>, <br>    <span class="hljs-string">&quot;1这里填入阿里云用户的AccessKey ID&quot;</span>, <span class="hljs-string">&quot;2这里填入阿里云用户的AccessKey Secre&quot;</span>);<br>    <span class="hljs-type">IAcsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br><br>    <span class="hljs-type">CommonRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonRequest</span>();<br>    request.setMethod(MethodType.POST);<br>    request.setDomain(<span class="hljs-string">&quot;dysmsapi.aliyuncs.com&quot;</span>);<br>    request.setVersion(<span class="hljs-string">&quot;2017-05-25&quot;</span>);<br>    request.setAction(<span class="hljs-string">&quot;SendSms&quot;</span>);<br>    request.putQueryParameter(<span class="hljs-string">&quot;PhoneNumbers&quot;</span>,<span class="hljs-string">&quot;3目标手机号&quot;</span> );<br>    request.putQueryParameter(<span class="hljs-string">&quot;SignName&quot;</span>, <span class="hljs-string">&quot;4短信签名&quot;</span>);<br>    request.putQueryParameter(<span class="hljs-string">&quot;TemplateCode&quot;</span>, <span class="hljs-string">&quot;5短信模版CODE&quot;</span>);<br><br>    <span class="hljs-comment">/*生成随机4位验证码*/</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;code&quot;</span>,code);<br>    request.putQueryParameter(<span class="hljs-string">&quot;TemplateParam&quot;</span>, JSONObject.toJSONString(map));<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">CommonResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.getCommonResponse(request);<br>        System.out.println(response.getData());<br>    &#125; <span class="hljs-keyword">catch</span> (ServerException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><center>——什么是孤独？——心里明明空荡荡的，却什么也装不下。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax实现：原生JS和JQ的4种使用方式</title>
    <link href="/2020/04/11/Ajax%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%8E%9F%E7%94%9FJS%E5%92%8CJQ%E7%9A%844%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/04/11/Ajax%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%8E%9F%E7%94%9FJS%E5%92%8CJQ%E7%9A%844%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax的作用"><a href="#Ajax的作用" class="headerlink" title="Ajax的作用"></a>Ajax的作用</h1><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新网页部分内容的技术，实现页面和 web 服务器之间数据的异步传输。<br>相当于只刷新页面的一部分而并不刷新整个页面(局部刷新而并非全局刷新)。</p><blockquote><p>冷知识：Ajax全称 即“<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML”（异步 JavaScript 和 XML）</p><p>这里将一个简单的Ajax案例：<br>获取input输入框中的值并将其以Ajax异步请求的方式请求请求后台，再由后台响应我们所需的数据放到div中(div中无内容)<br>从而实现请求与响应，显示数据，并且请求为异步请求(Ajax)不刷新整个页面(局部刷新)<br>方式呢就是这么个方式，具体使用根据开发中的应用场景(比如：评论，分页，搜索)</p></blockquote><h2 id="JS-javascript-方式编写Ajax："><a href="#JS-javascript-方式编写Ajax：" class="headerlink" title="JS(javascript)方式编写Ajax："></a>JS(javascript)方式编写Ajax：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Ajax&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;center&gt;<br>    &lt;%--JS方式的Ajax--%&gt;<br>    &lt;div id=<span class="hljs-string">&quot;div&quot;</span>&gt;&lt;/div&gt;<br>    &lt;br/&gt;<br>    输入：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span> onclick=<span class="hljs-string">&quot;ajax()&quot;</span>&gt;<br><br>&lt;/center&gt;<br>&lt;/body&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br>    <span class="hljs-keyword">var</span> xmlHttpRequest;<br><br>    function <span class="hljs-title function_">ajax</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&quot;info&quot;</span>).value;<br><br><span class="hljs-comment">/*注：在JS中，如果创建对象使用var变量接收，代表只在该函数(function)中生效(局部变量)，不使用var接收则代表全局(全局变量)</span><br><span class="hljs-comment">        在其他地方使用对象时前提是该函数(function)要提前执行(相当于赋值)*/</span><br>        <span class="hljs-comment">/*1.建立XMLHttpRequest对象：通过ajax异步方式 请求服务端 */</span><br>        xmlHttpRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>;<br><br> <span class="hljs-comment">/*2.与服务器端交互的基本信息：open(方法名(提交方式get|post),服务器地址,true((true（异步）或 false（同步）)) :与服务端建立连接*/</span><br>        <span class="hljs-comment">// xmlHttpRequest.open(&quot;get&quot;,&quot;ajax/ajaxDemo1?info=&quot;+info,true);</span><br>        xmlHttpRequest.open(<span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-string">&quot;ajax/ajaxDemo&quot;</span>, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">/*3.设置头信息：setRequestHeader(header,value):</span><br><span class="hljs-comment">                get:不需要设置此方法</span><br><span class="hljs-comment">                post:需要设置：</span><br><span class="hljs-comment">                    a.如果请求元素中包含了 文件上传：setRequestHeader(&quot;Content-Type&quot;,&quot;multipart/form-data&quot;);</span><br><span class="hljs-comment">                    b.不包含了 文件上传：setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;)*/</span><br>        xmlHttpRequest.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br><br>        <span class="hljs-comment">/*4.传入参数：xmlHttpRequest.send()</span><br><span class="hljs-comment">                   get:send(null)</span><br><span class="hljs-comment">                  post:send(参数值)*/</span><br>        <span class="hljs-comment">// xmlHttpRequest.send(null);</span><br>        xmlHttpRequest.send(<span class="hljs-string">&quot;info=&quot;</span> + info);<br>        <span class="hljs-comment">/*注：什么是回调函数：例如有 a()，b()，c()三个方法，b()是a()的回调函数，如果b()执行完则应该执行a()，而不是c()*/</span><br>        <span class="hljs-comment">/*5.注册回调函数(获取服务器响应数据)*/</span><br>        xmlHttpRequest.onreadystatechange = callBack;<br>    &#125;<br><br>    function <span class="hljs-title function_">callBack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (xmlHttpRequest.readyState == <span class="hljs-number">4</span> &amp;&amp; xmlHttpRequest.status == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-comment">/*responseText：响应格式为String</span><br><span class="hljs-comment">               responseXML：相应格式为XML*/</span><br>            <span class="hljs-comment">/*获取后端响应的信息(放到div中)*/</span><br>            <span class="hljs-type">var</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> xmlHttpRequest.responseText;<br>            document.getElementById(<span class="hljs-string">&quot;div&quot;</span>).innerHTML = data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*笔记：xmlHttpRequest.readyState ：请求状态 只有4为完全成功</span><br><span class="hljs-comment">     　　0：请求未初始化(还没有调用 open())</span><br><span class="hljs-comment">     　　1：请求已经建立，但是还没有发送（还没有调用 send()）</span><br><span class="hljs-comment">     　　2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</span><br><span class="hljs-comment">     　　3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</span><br><span class="hljs-comment">     　　4：响应已完成；您可以获取并使用服务器的响应了。</span><br><span class="hljs-comment">        xmlHttpRequest.status：响应状态(相当于于http响应状态码，太多则不过多说明) 只有200为完全成功*/</span><br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="JQ-jquery-方式使用Ajax："><a href="#JQ-jquery-方式使用Ajax：" class="headerlink" title="JQ(jquery)方式使用Ajax："></a>JQ(jquery)方式使用Ajax：</h2><blockquote><p><strong>看了上面JS的方式编写Ajax，写起来的确是有些繁琐</strong><br><strong>接下来使用jquery方式编写4种类似的Ajax，相比JS方式简便很多</strong><br><strong>$.ajax()方法中属性详解请参考：</strong> <a href="https://www.cnblogs.com/tylerdonet/p/3520862.html">https://www.cnblogs.com/tylerdonet/p/3520862.html</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Jquery -Ajax&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;center&gt;<br>    &lt;%--JQ方式的ajax--%&gt;<br>    &lt;div id=<span class="hljs-string">&quot;div&quot;</span>&gt;ajax：&lt;/div&gt;<br>    &lt;br/&gt;<br>    输入：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span> onclick=<span class="hljs-string">&quot;ajax()&quot;</span>&gt;<br><br>&lt;/center&gt;<br>&lt;/body&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    function <span class="hljs-title function_">ajax</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//var info = document.getElementById(&quot;info&quot;).value;</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> $(<span class="hljs-string">&quot;#info&quot;</span>).val();<br><br>        $.ajax(&#123;<br>            <span class="hljs-comment">/* url：请求地址(可以带参数：url:    &quot;ajax/ajaxDemo?info=&quot;+info,)*/</span><br>            url:    <span class="hljs-string">&quot;ajax/ajaxDemo&quot;</span>,<br>            <span class="hljs-comment">/*async：默认设置为true，代表为异步请求   false则为同步请求*/</span><br>            async:  <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">/*type：请求方式*/</span><br>            type:   <span class="hljs-string">&quot;get&quot;</span>,<br>            <span class="hljs-comment">/*data：请求参数(和js的send方法区别：get和post都可以直接填入  请求参数   名称+值*/</span><br>            data:   <span class="hljs-string">&quot;info=&quot;</span> + info,<br>            <span class="hljs-comment">/*dataType：服务器响应类型(例如text(纯文本)、json(json数据)、xml(xml文档))*/</span><br>            dataType:   <span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-comment">/*success：请求成功后调用的回调函数(由服务器返回，并根据dataType参数进行处理后的数据)*/</span><br>            success: function (data) &#123;<br>                $(<span class="hljs-string">&quot;#div&quot;</span>).html(data);<br>            &#125;,<br>            <span class="hljs-comment">/*error：请求失败时被调用的函数*/</span><br>            error: function () &#123;<br>                $(<span class="hljs-string">&quot;#div&quot;</span>).html(<span class="hljs-string">&quot;服务器响应失败!&quot;</span>);<br>            &#125;<br>        &#125;);<br><br><br><span class="hljs-comment">/*--------------------------------------------------------------------------------------------------------*/</span><br>        <span class="hljs-comment">/*$.get()不写参数名，但必须按照参数的顺序进行配置*/</span><br>        $.get(<br>            <span class="hljs-comment">/*请求地址*/</span><br>             <span class="hljs-string">&quot;ajax/ajaxDemo&quot;</span>,<br>            <span class="hljs-comment">/*请求参数   名称+值*/</span><br>            <span class="hljs-string">&quot;info=&quot;</span> + info,<br>            <span class="hljs-comment">/*回调函数*/</span><br>            function (data)&#123;<br>                $(<span class="hljs-string">&quot;#div&quot;</span>).html(data);<br>            &#125;,<br>            <span class="hljs-comment">/*服务器响应类型*/</span><br>        <span class="hljs-string">&quot;text&quot;</span><br>        );<br><br><br><span class="hljs-comment">/*--------------------------------------------------------------------------------------------------------*/</span><br>        <span class="hljs-comment">/*$.post()不写参数名，但必须按照参数的顺序进行配置*/</span><br>        $.post(<br>            <span class="hljs-comment">/*请求地址*/</span><br>            <span class="hljs-string">&quot;ajax/ajaxDemo&quot;</span>,<br>           <span class="hljs-comment">/*请求参数   名称+值*/</span><br>            <span class="hljs-string">&quot;info=&quot;</span> + info,<br>            <span class="hljs-comment">/*回调函数*/</span><br>            function (data)&#123;<br>                $(<span class="hljs-string">&quot;#div&quot;</span>).html(data);<br>                <span class="hljs-keyword">if</span>(data == <span class="hljs-literal">null</span> || data == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>                    alert(<span class="hljs-string">&quot;服务器响应为null&quot;</span>);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-comment">/*服务器响应类型*/</span><br>            <span class="hljs-string">&quot;text&quot;</span><br>        );<br><br><br><span class="hljs-comment">/*--------------------------------------------------------------------------------------------------------*/</span><br>        <span class="hljs-comment">/*load:将服务端的返回值  直接加载到$(xxx)所选择的元素中 例如案例的div*/</span><br>        $(<span class="hljs-string">&quot;#div&quot;</span>).load(<br>            <span class="hljs-comment">/*请求地址*/</span><br>            <span class="hljs-string">&quot;ajax/ajaxDemo&quot;</span>,<br>            <span class="hljs-comment">/*请求参数   名称+值*/</span><br>            <span class="hljs-string">&quot;info=&quot;</span>+info<br>        );<br>    &#125;<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>本篇文章还缺少一个重要的知识点、也是和Ajax挂钩的，那就是JSON数据格式，本人也正在学习将JSON类型数据请求到后台再响应JSON数据格式给前台。到时候我会在发一篇文章介绍JSON或者到时候会修改本篇文章将JSON知识点补上。</strong></p><center>爱你所爱，行你所行，听从你心，无问西东。</center>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC框架编写验证码</title>
    <link href="/2020/04/07/SpringMVC%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99%E5%90%8E%E7%AB%AF%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <url>/2020/04/07/SpringMVC%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99%E5%90%8E%E7%AB%AF%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC框架编写验证码"><a href="#SpringMVC框架编写验证码" class="headerlink" title="SpringMVC框架编写验证码"></a>SpringMVC框架编写验证码</h1><blockquote><p><strong>验证码的作用：可以防止：恶意破解密码、刷票、论坛灌水，有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试，实际上用验证码是现在很多网站通行的方式，我们利用比较简易的方式实现了这个功能。这个问题可以由计算机生成并评判。<br>验证码可以使用纯数字、纯文字(例如很多4字成语的验证码)、纯英文字母(本章案例使用0-9,a-z的数字+字母验证码)</strong></p></blockquote><h2 id="1-首先再Controller中写接受验证码请求的方法"><a href="#1-首先再Controller中写接受验证码请求的方法" class="headerlink" title="1.首先再Controller中写接受验证码请求的方法"></a>1.首先再Controller中写接受验证码请求的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*验证码*/</span><br><span class="hljs-meta">@RequestMapping(path = &quot;/validation&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validation</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br><span class="hljs-comment">//设置浏览器无缓存</span><br>        response.setHeader(<span class="hljs-string">&quot;pragam&quot;</span>, <span class="hljs-string">&quot;No-cache&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Cache&quot;</span>, <span class="hljs-string">&quot;No-cache&quot;</span>);<br>        response.setDateHeader(<span class="hljs-string">&quot;Expires&quot;</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//设置响应格式为图片(以前的html/text是文本)</span><br>        response.setContentType(<span class="hljs-string">&quot;image/gif&quot;</span>);<br><br><span class="hljs-comment">//设置宽高</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><br><span class="hljs-comment">//创建缓冲区(画板)</span><br><span class="hljs-comment">//BufferedImage.TYPE_INT_RGB使用图片颜色的方案</span><br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(width, height, BufferedImage.TYPE_INT_RGB);<br><br><span class="hljs-comment">//(画笔)</span><br>        <span class="hljs-type">Graphics</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> image.getGraphics();<br><br><span class="hljs-comment">//字体(字体，加粗，大小)</span><br>        <span class="hljs-type">Font</span> <span class="hljs-variable">font</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;楷体&quot;</span>, Font.BOLD, <span class="hljs-number">30</span>);<br><br>        g.setFont(font);<br>        <span class="hljs-comment">//设置验证码边框</span><br>        g.setColor(Color.orange);<br>        g.drawRect(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, width, height);<br>        <span class="hljs-comment">//设置验证码内部背景颜色</span><br>        g.setColor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">255</span>, <span class="hljs-number">247</span>, <span class="hljs-number">238</span>));<br>        g.fillRect(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, width - <span class="hljs-number">2</span>, height - <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//验证码的内容(0-9,a-z)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">//四位验证码循环四次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">4</span>; x++) &#123;<br><span class="hljs-comment">//随机取字符串</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(content.length() - <span class="hljs-number">1</span>);<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> content.charAt(index);<br><span class="hljs-comment">//随机数类</span><br>            <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-comment">//         每个字符随机颜色(颜色可以固定,也可以使用Random类随机,Color的三个参数位RGB颜色值)这里演示为固定</span><br>            g.setColor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">255</span>, <span class="hljs-number">113</span>, <span class="hljs-number">0</span>));<br><span class="hljs-comment">//字符位置(随机)</span><br>            g.drawString(ch + <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">25</span> * x + <span class="hljs-number">1</span>, <span class="hljs-number">20</span> + random.nextInt(<span class="hljs-number">30</span>));<br><span class="hljs-comment">//干扰线位置(随机)</span><br>            g.drawLine(random.nextInt(<span class="hljs-number">100</span>), random.nextInt(<span class="hljs-number">50</span>), random.nextInt(<span class="hljs-number">100</span>), random.nextInt(<span class="hljs-number">50</span>));<br><span class="hljs-comment">//生成的验证码赋值给info</span><br>            info += ch;<br>        &#125;<br><br><span class="hljs-comment">//将随机生成的验证码存入Session(使用时获取Session的值,进行判断输入的是否与随机生成的相同)</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        session.setAttribute(<span class="hljs-string">&quot;validation&quot;</span>, info);<br>        <br><span class="hljs-comment">//      通过流的方式进行响应</span><br>        g.dispose();<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        ImageIO.write(image, <span class="hljs-string">&quot;gif&quot;</span>, out);<br><br><span class="hljs-comment">//释放资源</span><br>        out.flush();<br>        out.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-编写前台页面代码"><a href="#2-编写前台页面代码" class="headerlink" title="2.编写前台页面代码"></a>2.编写前台页面代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%--style=<span class="hljs-string">&quot;cursor:pointer;&quot;</span>作用:鼠标移入时会将鼠标改小手形状。title=<span class="hljs-string">&quot;看不清?点击换一换&quot;</span>作用:鼠标悬停显示文字--%&gt;<br>验证码：&lt;img src=<span class="hljs-string">&quot;validation&quot;</span> id=<span class="hljs-string">&quot;img&quot;</span> title=<span class="hljs-string">&quot;看不清?点击换一换&quot;</span> onclick=<span class="hljs-string">&quot;reload()&quot;</span> style=<span class="hljs-string">&quot;cursor:pointer;&quot;</span>/&gt;<br><br>&lt;/body&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-comment">//  每次点击刷新都不是相同请求</span><br>    function <span class="hljs-title function_">reload</span><span class="hljs-params">()</span>&#123;<br>        document.getElementById(<span class="hljs-string">&quot;img&quot;</span>).src = document.getElementById(<span class="hljs-string">&quot;img&quot;</span>).src+<span class="hljs-string">&quot;?a=&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime();<br>    &#125;<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="3-打开浏览器访问就可以啦"><a href="#3-打开浏览器访问就可以啦" class="headerlink" title="3.打开浏览器访问就可以啦"></a>3.打开浏览器访问就可以啦</h2><p>点击就切换验证码<br><img src="/article_img/SpringMVC%E7%BC%96%E5%86%99%E5%90%8E%E7%AB%AF%E9%AA%8C%E8%AF%81%E7%A0%81/1.png"></p><center>痛苦犹如一艘船，欲望是指南针。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>SpringMVC</tag>
      
      <tag>验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis框架逆向工程的使用</title>
    <link href="/2020/04/03/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/04/03/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="通过Mybatis框架使用逆向工程-IDEA"><a href="#通过Mybatis框架使用逆向工程-IDEA" class="headerlink" title="通过Mybatis框架使用逆向工程(IDEA)"></a>通过Mybatis框架使用逆向工程(IDEA)</h1><blockquote><p><strong>什么是逆向工程？</strong><br><strong>Mybatis提供了一个逆向工程工具，通过逆向工程，可以帮助程序员根据数据库中的表来生成实体类(JavaBean)、mapper映射文件、mapper接口。</strong></p></blockquote><h2 id="1-导入所需Jar包-这里通过Maven方式-不使用Maven也网上下载后导入lib"><a href="#1-导入所需Jar包-这里通过Maven方式-不使用Maven也网上下载后导入lib" class="headerlink" title="1.导入所需Jar包(这里通过Maven方式,不使用Maven也网上下载后导入lib)"></a>1.导入所需Jar包(这里通过Maven方式,不使用Maven也网上下载后导入lib)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--Mybatis逆向工程 注：导入Jar包需要在Maven配置文件(pom.xml)&lt;dependencies&gt;标签中--&gt;<br>&lt;dependencies&gt;<br>&lt;!--Mysql--&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;mysql&lt;/groupId&gt;<br>        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!--Mybatis逆向工程--&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>      &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;<br>      &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.5</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br><br>&lt;!-- mybatis逆向工程Maven插件 注：导入逆向工程插件Jar包需要在Maven配置文件(pom.xml)&lt;&lt;plugins&gt;&gt;标签中--&gt;<br>&lt;plugins&gt;<br>        &lt;plugin&gt;<br>          &lt;!--Mybatis逆向工程Maven插件--&gt;<br>          &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>          &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;<br>          &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.5</span>&lt;/version&gt;<br>        &lt;/plugin&gt;<br>&lt;/plugins&gt;<br></code></pre></td></tr></table></figure><h2 id="2-创建逆向工程配置文件generatorConfig-xml"><a href="#2-创建逆向工程配置文件generatorConfig-xml" class="headerlink" title="2.创建逆向工程配置文件generatorConfig.xml"></a>2.创建逆向工程配置文件generatorConfig.xml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE generatorConfiguration<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;<br><br>&lt;generatorConfiguration&gt;<br>    &lt;!--指定数据库jdbc驱动jar包的位置--&gt;<br>&lt;classPathEntry location=<span class="hljs-string">&quot;D:\Maven\jar\mysql\mysql-connector-java\5.1.6\mysql-connector-java-5.1.6.jar&quot;</span>/&gt;<br>    &lt;context id=<span class="hljs-string">&quot;table_test&quot;</span> targetRuntime=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;<br>        &lt;commentGenerator&gt;<br>            &lt;!--suppressAllComments属性值：<br>                             <span class="hljs-literal">true</span>:自动生成实体类、SQL映射文件时没有注释<br>                             <span class="hljs-literal">true</span>:自动生成实体类、SQL映射文件，并附有注释 --&gt;<br>            &lt;property name=<span class="hljs-string">&quot;suppressAllComments&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span> /&gt;<br>        &lt;/commentGenerator&gt;<br>        &lt;!-- <span class="hljs-number">4</span>个数据库连接信息 --&gt;<br>        &lt;jdbcConnection<br>                        driverClass=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br>                        connectionURL=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mysql&quot;</span><br>                        userId=<span class="hljs-string">&quot;root&quot;</span><br>                        password=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>        &lt;/jdbcConnection&gt;<br>        &lt;!--forceBigDecimals属性值：<br>                      <span class="hljs-literal">true</span>:把数据表中的DECIMAL和NUMERIC类型，<br>      解析为JAVA代码中的java.math.BigDecimal类型<br>                      <span class="hljs-literal">false</span>(默认):把数据表中的DECIMAL和NUMERIC类型，<br>      解析为解析为JAVA代码中的Integer类型 --&gt;<br>        &lt;javaTypeResolver&gt;<br>            &lt;property name=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> value=<span class="hljs-string">&quot;false&quot;</span> /&gt;<br>        &lt;/javaTypeResolver&gt;<br>        &lt;!-- 生成实体类(JavaBean)<br>                  targetProject属性值:实体类的生成位置<br>                  targetPackage属性值：实体类所在包的路径<br>        --&gt;<br>        &lt;javaModelGenerator targetPackage=<span class="hljs-string">&quot;com.itheima.domain&quot;</span><br>                            targetProject=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;<br>            &lt;!-- trimStrings属性值：<br>                         <span class="hljs-literal">true</span>：对数据库的查询结果进行trim操作<br>                         <span class="hljs-literal">false</span>(默认)：不进行trim操作<br>             --&gt;<br>            &lt;property name=<span class="hljs-string">&quot;trimStrings&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span> /&gt;<br>        &lt;/javaModelGenerator&gt;<br>        &lt;!-- 生成mapper映射配置文件<br>                  targetProject属性值:SQL映射文件的生成位置<br>                  targetPackage属性值：SQL映射文件所在包的路径<br>        --&gt;<br>        &lt;sqlMapGenerator targetPackage=<span class="hljs-string">&quot;com.itheima.dao&quot;</span><br>                         targetProject=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;<br>        &lt;/sqlMapGenerator&gt;<br>        &lt;!-- 生成动态代理的接口  <br>                  targetProject属性值:SQL映射文件的生成位置<br>                  targetPackage属性值：SQL映射文件所在包的路径<br>         --&gt;<br>        &lt;javaClientGenerator type=<span class="hljs-string">&quot;XMLMAPPER&quot;</span><br>                             targetPackage=<span class="hljs-string">&quot;com.itheima.dao&quot;</span> targetProject=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;<br>        &lt;/javaClientGenerator&gt;<br>        <br>        &lt;!-- 指定mysql中数据库表  --&gt;<br>        &lt;table tableName=<span class="hljs-string">&quot;user&quot;</span>&gt; &lt;/table&gt;<br>        &lt;table tableName=<span class="hljs-string">&quot;account&quot;</span>&gt; &lt;/table&gt;<br>    &lt;/context&gt;<br>&lt;/generatorConfiguration&gt;<br></code></pre></td></tr></table></figure><h2 id="3-接下来介绍执行逆向工程generatorConfig-xml配置文件的两种方式"><a href="#3-接下来介绍执行逆向工程generatorConfig-xml配置文件的两种方式" class="headerlink" title="3.接下来介绍执行逆向工程generatorConfig.xml配置文件的两种方式"></a>3.接下来介绍执行逆向工程generatorConfig.xml配置文件的两种方式</h2><p>创建Java类执行生成逆向工程文件直接运行(run)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        此路径是IDEA中的相对路径(可以写绝对路径),指定配置文件路径<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src\\main\\resources\\generatorConfig.xml&quot;</span>);<br>        List&lt;String&gt; warnings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-type">ConfigurationParser</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationParser</span>(warnings);<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> cp.parseConfiguration(f);<br>        <span class="hljs-type">DefaultShellCallback</span> <span class="hljs-variable">callBack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultShellCallback</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">MyBatisGenerator</span> <span class="hljs-variable">generator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBatisGenerator</span>(config, callBack, warnings);<br>        generator.generate(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图(方法执行前后对比)：</p><p>执行之前：</p><p><img src="/article_img/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/1.png"></p><p>执行之后：</p><p><img src="/article_img/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/2.png"></p><p>通过Maven方式 点击 ： Run 》Edit Configurations…</p><p><img src="/article_img/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/3.png"><br><img src="/article_img/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/4.png"></p><p>命令：mybatis-generator:generate</p><p><img src="/article_img/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/5.png"><br><img src="/article_img/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/6.png"></p><p>可以看到使用Maven运行之后的结果和使用Java类运行是一样的</p><p><img src="/article_img/Mybatis%E6%A1%86%E6%9E%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/7.png"></p><center>过去的事情可以不忘记，但一定要放下。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>SSM</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+Hexo搭建个人博客(图文详解)</title>
    <link href="/2020/03/31/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3)/"/>
    <url>/2020/03/31/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3)/</url>
    
    <content type="html"><![CDATA[<h1 id="Github-Hexo搭建个人博客-图文详解"><a href="#Github-Hexo搭建个人博客-图文详解" class="headerlink" title="Github+Hexo搭建个人博客(图文详解)"></a><strong>Github+Hexo搭建个人博客(图文详解)</strong></h1><h2 id="使用Github-hexo搭建个人博客-不会让小伙伴们走弯路"><a href="#使用Github-hexo搭建个人博客-不会让小伙伴们走弯路" class="headerlink" title="使用Github+hexo搭建个人博客(不会让小伙伴们走弯路)"></a><strong>使用Github+hexo搭建个人博客(不会让小伙伴们走弯路)</strong></h2><blockquote><p><strong>因为本人(小白)也是第一次使用GIthub+hexo搭建博客，在网上也看了一些的教程，其中也走了一些弯路，第一次搭建可能不太熟悉之前这些工具也没使用过但是搭建完成还是有那么一点成就感的。此篇博客每一步都很详细，我也希望小伙伴们在第一次搭建时少遇到些问题，节约大家去解决问题的时间。想让自己博客变得更好看，更炫酷还可以去网上下载一些好看的主题样式，博客能通过Github仓库域名访问基本就搭建完成啦 ，后面的功能就靠搭建去摸索了(本人(小白)也在继续研究中)</strong></p></blockquote><blockquote><p><strong>成功之后的效果：<a href="https://libo2000.github.io/">https://libo2000.github.io/</a></strong></p></blockquote><h2 id="1-准备工作：安装两个我们本次所需要使用的软件："><a href="#1-准备工作：安装两个我们本次所需要使用的软件：" class="headerlink" title="1. 准备工作：安装两个我们本次所需要使用的软件："></a><strong>1. 准备工作：安装两个我们本次所需要使用的软件：</strong></h2><blockquote><ol><li><p><strong>node.js下载地址-<a href="http://nodejs.cn/">http://nodejs.cn</a></strong>  </p></li><li><p><strong>Git下载地址-<a href="https://git-scm.com/">https://git-scm.com/</a>(官网下载非常慢，可百度找资源哈)</strong><br><strong>安装过程一直Next就可以了(安装路径可以改)</strong></p></li></ol></blockquote><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png"></strong><br><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png"></strong></p><p><strong>两者安装完成之后，右击此电脑》属性》高级系统设置》环境变量》系统变量下的Path</strong><br><strong>可以看到两者已自动修改了环境变量，这是我们可以通过cmd命令查看两者版本。(确认是否安装成功及可以使用)</strong><br><strong>查看Node.js版本命令：node -v</strong><br><strong>查看Git版本命令：git –version</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png"></strong></p><h2 id="2-注册Github账号以及建立仓库：https-github-com"><a href="#2-注册Github账号以及建立仓库：https-github-com" class="headerlink" title="2. 注册Github账号以及建立仓库：https://github.com/"></a><strong>2. 注册Github账号以及建立仓库：<a href="https://github.com/">https://github.com/</a></strong></h2><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png"></strong><br><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png"></strong></p><p><strong>注册之后邮箱会收到一封Github的邮件，点击Github的链接确认注册</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png"></strong></p><p><strong>之后就是建立Github个人仓库(新用户登陆后会自动跳转到创建页面哈)</strong></p><blockquote><p><strong>注：如果已有Github账号登陆进去可以在主页点击Create repository</strong></p></blockquote><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/7.png"></strong></p><p><strong>确认注册后会让用户选择公有还是私有仓库(私有的个人仓库好像需要Money好像是每月7美金)</strong><br><strong>个人博客的话直接选免费的就行了</strong><br><strong>注意仓库的取名格式：用户名.github.io(这将是以后的访问域名)</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8.png"></strong></p><p><strong>到这里代表我们Github账号以及仓库都已经创建完毕</strong><br><strong>可以把下面这段仓库的地址复制下来留着后面配置时会用到</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/9.png"></strong></p><h2 id="3-接下来进入本地配置安装Hexo"><a href="#3-接下来进入本地配置安装Hexo" class="headerlink" title="3. 接下来进入本地配置安装Hexo"></a><strong>3. 接下来进入本地配置安装Hexo</strong></h2><p><strong>在磁盘中创建一个用来存放Github本地仓库文件的目录(可自定义目录存放，顾名思义blog&#x3D;&#x3D;博客)</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/10.png"></strong></p><p><strong>选中创建的目录(文件夹)右键选择使用Gti Bash Here打开Git命令窗口(这就是开始安装的Git工具，现在开始使用)</strong><br><strong>也可以使用Windows的cmd命令行(不推荐)</strong><br><strong>(因为是从国外服务器下载，受网络的影响比较大，有可能会出现异常，所以我们需要连接国内淘宝官方的服务器来进行)</strong><br><strong>输入命令：npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></strong><br><strong>注：之后再次使用命令则是以cnpm开头~而不是npm</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/11.png"></strong></p><p><strong>正式开始安装hexo</strong></p><p><strong>正式开始安装hexo</strong><br><strong>输入命令：cnpm install -g hexo-cli</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/12.png"></strong></p><p><strong>之后就是初始化Hexo</strong><br><strong>输入命令：hexo init</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/13.png"></strong></p><p><strong>这时我们创建的目录(文件夹)下已经多出许多文件(这里不多介绍这些文件及目录)</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/14.png"></strong></p><p><strong>这时启动hexo之后在浏览器输入localhost:4000就可以在本地浏览博客(自带一篇Hello World博客)</strong><br><strong>输入命令：hexo s</strong><br><strong>关闭hexo ctrl + c</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/15.png"></strong><br><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16.png"></strong></p><h2 id="4-设置ssh"><a href="#4-设置ssh" class="headerlink" title="4. 设置ssh"></a><strong>4. 设置ssh</strong></h2><p><strong>生成sshkey</strong><br><strong>输入命令：cd ~&#x2F;.ssh进入.ssh文件</strong><br><strong>输入命令：ssh-keygen -t rsa -C ‘注册时的邮箱地址’</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/17.png"></strong></p><p><strong>此时我们去查看C盘目录(此文件夹所在C:\用户\用户名目录下)</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/18.png"></strong></p><p><strong>使用记事本打开id_rsa.put文件并复制生成的key</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/19.png"></strong></p><p><strong>在已登陆的Github主页点击右侧头像 》 Settings设置</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20.png"></strong></p><p><strong>再点击SSH and GPG keys 》 New SSH key</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/21.png"></strong></p><p><strong>将刚刚在.ssh目录下所复制id_rsa.put文件中的信息复制进key(注意空格)，在给它取个名字(随意)</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/22.png"></strong></p><p><strong>这里需要在本地进行验证一次</strong>输入命令：ssh -T <a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;">&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#46;&#x63;&#111;&#x6d;</a> 并且输入yes之后，行末尾会显示你的用户名****</p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/23.png"></strong></p><p><strong>绑定成功并且邮箱收到邮件</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/24.png"></strong></p><p><strong>接着在本地绑定与Github的用户名和邮箱</strong><br><strong>输入命令：git config –global user.name “注册时用户名”</strong><br><strong>输入命令：git config –global user.email “注册时邮箱”</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/25.png"></strong></p><h2 id="5-上传测试博客"><a href="#5-上传测试博客" class="headerlink" title="5. 上传测试博客"></a><strong>5. 上传测试博客</strong></h2><p><strong>用记事本打开并修改本地仓库目录下_config.yml文件</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/26.png"></strong></p><p><strong>之前创建仓库生成的Github仓库Http地址，如果没保存的话查看方式在个人仓库 》Clone or download下可查看</strong><br><strong>(因为本人已经上传所以仓库中有文件，没上传是没有文件的)</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/27.png"></strong></p><p><strong>在文件的末尾修改(repository属性的地址就是之前创建仓库后所保存的http地址)</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repository:</span> https:<span class="hljs-comment">//github.com/用户名/用户名.github.io.git</span><br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/28.png"></strong></p><p><strong>此时需要安装一个上传工具</strong><br><strong>输入命令：cnpm install hexo-deployer-git</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/29.png"></strong></p><p><strong>可以新建一篇测试文章(不新建的话也会有一篇自带的Hello World文章)</strong><br><strong>输入命令：hexo new “文章名称”</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/30.png"></strong></p><p><strong>新建文章之后需要生成一遍文件</strong><br><strong>输入命令：hexo g</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/31.png"></strong></p><p><strong>新建文章后可在本地先预览一遍</strong><br><strong>输入命令：hexo s浏览器输入：localhost:4000(ctrl + c 关闭)</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/32.png"></strong></p><p><strong>最后直接部署到Github就可以啦</strong><br><strong>输入命令：hexo d</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/33.png"></strong></p><p><strong>第一次上传文件到Github仓库邮箱还会收到一封邮件</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/34.png"></strong></p><p><strong>然后再Github仓库查看就发现多了很多文件</strong></p><p><strong><img src="/article_img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/35.png"></strong></p><p> <strong>此时再浏览器输入：用户名.github.io(Github仓库名)就可以访问博客啦</strong><br> <strong>例如：<a href="https://libo2000.github.io/">https://libo2000.github.io/</a></strong></p><p><strong>注：这只是Hexo最基础的博客模板，后续可以使用Hexo的主题让博客更好看</strong></p><center>憧憬是距离理解最遥远的感情。</center>]]></content>
    
    
    <categories>
      
      <category>GitHub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地Maven的安装及配置(图文详解)</title>
    <link href="/2019/11/22/%E6%9C%AC%E5%9C%B0Maven%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE(%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3)/"/>
    <url>/2019/11/22/%E6%9C%AC%E5%9C%B0Maven%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE(%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3)/</url>
    
    <content type="html"><![CDATA[<h1 id="安装本地Maven并配置阿里国内的镜像仓库"><a href="#安装本地Maven并配置阿里国内的镜像仓库" class="headerlink" title="安装本地Maven并配置阿里国内的镜像仓库"></a>安装本地Maven并配置阿里国内的镜像仓库</h1><p><strong>1. 首先去到apache旗下Maven的官网 (<a href="https://maven.apache.org/">https://maven.apache.org/</a>) 下载一个Mavne的解压包</strong><br> 如图所示(网站是英文，我是Google浏览器翻译过的)：<br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/1.png"></p><p> <strong>2. 注意下载的版本，根据个人需求选择不同版本</strong>（Maven3.6.2版本与idea2019版本不兼容，亲身经历）<strong>可选择</strong>档案<strong>下面的最新版，也可选择下面</strong>先前版本<strong>进行下载</strong><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/2.png"></p><p> <strong>3. 将解压包解压到所要存放的位置(目录可自行选择，不固定)</strong><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/3.png"><br> <strong>4.配置Mavne的环境变量</strong><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/4.png"> </p><p><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/5.png"><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/6.png"><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/7.png"><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/8.png"><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/9.png"></p><p> <strong>4. 环境变量配置完成之后可使用cmd命令进行查询Maven(测试是否成功)</strong><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/10.png"><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/11.png"></p><p> <strong>5. 修改Mavne配置文件，配置阿里国内的镜像仓库</strong><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/12.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyum maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color=red>注：是在<mirrors>标签里面配置,配置之后下次下载Jar包则是去阿里国内的镜像仓库而不是apache国外服务器</font></p><p> <strong>6. 可配置下载Jar包之后的存放位置(如果不修改则是默认存放在C:\Users\具体用户名称下)</strong><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/13.png"></p><p> <strong>7. 打开idea修改maven</strong><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/14.png"><br><img src="/article_img/%E6%9C%AC%E5%9C%B0Maven%E9%85%8D%E7%BD%AE/15.png"></p><p><font size=4>至此：安装本地Maven并配置阿里国内镜像仓库及idea修改Maven就完成了</font></p><center>只要努力活下去，总有一天会笑着回忆。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat如何在Eclipse中配置</title>
    <link href="/2019/07/24/Tomcat%E5%A6%82%E4%BD%95%E5%9C%A8Eclipse%E4%B8%AD%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/07/24/Tomcat%E5%A6%82%E4%BD%95%E5%9C%A8Eclipse%E4%B8%AD%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="将Tomcat服务器整合到Eclipse中"><a href="#将Tomcat服务器整合到Eclipse中" class="headerlink" title="将Tomcat服务器整合到Eclipse中"></a>将Tomcat服务器整合到Eclipse中</h1><blockquote><ul><li><strong>第一步：</strong><br> <strong>点击Eclipse中的window选项找到下面的preferences</strong></li></ul></blockquote><p><img src="/article_img/Tomcat%E9%85%8D%E7%BD%AE/1.png"></p><blockquote><p><strong>第二步：</strong><br><strong>找到servlet，点击下面的Runtimeenvironments，最后点击add。</strong></p></blockquote><p><img src="/article_img/Tomcat%E9%85%8D%E7%BD%AE/2.png"></p><blockquote><p><strong>找到于本机相符的Tomcat服务器版本，点击Finish完成</strong></p></blockquote><p><img src="/article_img/Tomcat%E9%85%8D%E7%BD%AE/3.png"></p><blockquote><p>第三步：<br>依然还是Eclipse中的window选项，找到线面的Show View、之后点击Servers。</p></blockquote><p><img src="/article_img/Tomcat%E9%85%8D%E7%BD%AE/4.png"></p><blockquote><p><strong>软件下方会出现一个Servers。</strong></p></blockquote><p><img src="/article_img/Tomcat%E9%85%8D%E7%BD%AE/5.png"></p><blockquote><p>第四步： 点击下方这串提示的英文，然后找到对应的Tomcat版本。</p><p><img src="/article_img/Tomcat%E9%85%8D%E7%BD%AE/6.png"></p></blockquote><blockquote><p><strong>然后点击最后以后旁边的Add，此界面中中间那个选择Tomcat的路径，下面这行需要选择JDK所编译的版本</strong><br><img src="/article_img/Tomcat%E9%85%8D%E7%BD%AE/7.png"></p><p>配置成功后：项目栏里会自动出现一个Servers的文件，软件下方的Servers有发生改变。<br><img src="/article_img/Tomcat%E9%85%8D%E7%BD%AE/8.png"></p></blockquote><center>鱼与熊掌不可兼得，唯独穷和单身可以。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>Tomcat</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础(面向对象)笔记整理</title>
    <link href="/2019/07/13/Java%E5%9F%BA%E7%A1%80(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1)%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <url>/2019/07/13/Java%E5%9F%BA%E7%A1%80(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1)%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA基础-面向对象-笔记整理："><a href="#JAVA基础-面向对象-笔记整理：" class="headerlink" title="JAVA基础(面向对象)笔记整理："></a>JAVA基础(面向对象)笔记整理：</h1><p><strong>面向对象概述：</strong><br>1.面向对象的思想来源生活<br>2.任何的对象从两个方面描述，静态属性、动态属性<br>3.创建一个类，其实就创建了一个模板<br>4.创建了一个类就是创建了一个新的数据类型<br>5.this代表的是指向当前实例<br>6.当自定义了有参数的构造方法后，系统不再自动生成无参构造<br>7.this()是调用对应参数的构造方法，必须放在第一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>数据类型 变量名 类的构造方法<br></code></pre></td></tr></table></figure><p><strong>继承：</strong></p><p>1.JAVA中的继承是单继承<br>2.成员变量只有加上了set和get方法之后才被称作为 “属性”<br>3.JAVA中子类的实例化会调用所有父类的构造方法<br>4.子类在重写父类的方法时权限只能放大<br>5.调用指定的父类方法可以使用super</p><pre><code class="hljs">注：在方法中调用变量会有就近原则</code></pre><p><img src="/article_img/Java%E5%9F%BA%E7%A1%80/1.png"><br><strong>抽象类</strong><br><em>被abstract所修饰</em></p><p>1.专业做父类<br>2.抽象类是类的模板<br>3.不可以实例化，但是有构造方法</p><p> <em>final：</em></p><ul><li><p><em>可以用于修饰类、成员方法和成员变量!</em></p></li><li><p><em>所修饰的类：不能被继承、不能有子类</em></p></li><li><p><em>所修饰的成员方法：不能被子类重写</em></p></li><li><p>*<em>所修饰的成员变量：不能被修改(是常量)</em></p></li></ul><p><strong>接口：</strong></p><p>定义接口使用：interface<br>实现接口使用：implements</p><p>1.接口就是标准。<br>2.JAVA中一个类可以实现多个接口，在实际开发中，如果既可以定义为抽象类又可以定义为接口，那就定义为接口。这样是因为代码的扩展性更好。<br>3.接口中只能有常量(标准的常量命名是全大写)和抽象方法()；</p><p><strong>多态：</strong></p><p>多态：父类来接收子类<br>子类转化为父类后，只能访问父类和子类共有的方法，子类特有的方法则不能访问<br>在JAVA中所有的类都是Object的子类<br>动态绑定：运行期间调用的方法，是根据其具体的类型</p><p><img src="/article_img/Java%E5%9F%BA%E7%A1%80/2.png"></p><pre><code class="hljs">*注：多态的优缺点： 1. 优点：可以提高可维护性(多态前提所保证的)，提高代码的可扩展性  1. 缺点：无法直接访问子类的特有成员*</code></pre><p>多态中的向上转型和向下转型<br>引用类型之间的转换     </p><ul><li>向上转型：          <br>由小到大(子类型转换为父类型)    </li><li>向下转型<br>            由大到小(父类型转换为子类型)</li></ul><p><em><strong>面向对象和面向过程的区别：</strong></em><br>面向对象编程首先考虑让谁去做，然后考虑怎么做<br>面向过程直接就考虑怎么做</p><center>幸运的人一生都在被童年治愈，不幸的人一生都在治愈童年。</center>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
